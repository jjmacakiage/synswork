{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nvar _this = this;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Grid } from '@material-ui/core';\nimport Tabs, { Tab } from \"react-awesome-tabs\";\nimport \"../resources/styles/react-awesome-tabs.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport nextCookie from 'next-cookies';\nimport Router from 'next/router';\nimport Header from \"../components/main/Header\";\nimport Home from './Home';\nimport NewTrade from './NewTrade';\nimport Trade from './Trade';\nimport Blotter from './Blotter';\nimport FileUpload from './FileUpload';\nimport { error } from \"next/dist/build/output/log\";\nimport { withAuthSync } from '../utils/Auth/auth';\nimport getHost from '../utils/Auth/get-host';\nimport { fetchTrades, initialFetch } from \"../js/tradehelpers\";\n/**\n * @class Main\n * @constructor\n * Contains all the navigation functions, including the <Tabs /> and their functions (dispatched to reducers/TabReducer)\n * Dependencies used:\n * @react-awesome-tabs for the <Tabs> and <Tab> components, react-awesome-tabs.scss for styling (comes with module)\n * @material-ui for <Grid />\n * @react-redux for useDispatch and useSelector\n * Custom Components used:\n * @class NewTradeContent - New Trade page\n * @class Home - Home page\n * @class Trade - Trade page\n * @class Header - Header\n */\n\nfunction useInterval(callback, params, delay) {\n  setInterval(function () {\n    callback(params);\n  }, delay);\n  console.log('Fetch Done');\n}\n\nvar Main = function Main() {\n  var blocknumber = useSelector(function (state) {\n    return state.TradeReducer.blocknumber;\n  });\n  var notifications = useSelector(function (state) {\n    return state.NotificationReducer.notifications;\n  });\n  /**\n   * @constant dispatch\n   * @type {function}\n   * gives access to dispatch function from Redux store\n   */\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    initialFetch(dispatch);\n    return;\n  }, []); //useInterval(fetchTrades, { blocknumber, dispatch, traderid: 1, notifications }, 5000);\n\n  /**\n   * @constant MAIN_TABS\n   * @type {array}\n   * array of objects that contains a 'key' and a 'component' that is mapped to the 'component' attribute from a tab object in....\n   * ....matchLink\n   */\n\n  var MAIN_TABS = [{\n    key: 'Home'\n  }, {\n    key: 'NewTrade'\n  }, {\n    key: 'Trade'\n  }, {\n    key: 'Blotter'\n  }, {\n    key: 'FileNewTrade'\n  }];\n  /**\n   * @constant activeTab\n   * @type {object}\n   * a number that represents the activeTab piece of state\n   */\n\n  var activeTab = useSelector(function (state) {\n    return state.TabReducer.activeTab;\n  });\n  /**\n   * @var tabs\n   * @type {object}\n   * an array of objects representing the tabs, with each object in the format { title, index, component }\n   */\n\n  var tabs = useSelector(function (state) {\n    return state.TabReducer.tabs;\n  });\n  /**\n   * @constant openTabs\n   * @type {array}\n   * used in handleClick method to redirect to a tab if it is already open\n   */\n\n  var _useState = useState(['Home']),\n      _useState2 = _slicedToArray(_useState, 2),\n      openTabs = _useState2[0],\n      changeTabs = _useState2[1];\n  /**\n   * @function matchLink\n   * @type string\n   * @param link\n   * helper function that receives a link {string} from an option in the <HomePane />'s (child components of <Home />) and\n   * matches it to a 'component' in the MAIN_TABS array via the 'key'\n   * @return number\n   */\n\n\n  function matchLink(link) {\n    for (var i = 0; i < MAIN_TABS.length; i++) {\n      var data = MAIN_TABS[i];\n\n      if (link === data.key) {\n        return i;\n      }\n    }\n\n    throw Error('Component Not Found');\n  }\n  /**\n   * @function handleTabSwitch\n   * @type number\n   * @type dispatch\n   * @param active\n   * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n   */\n\n\n  function handleTabSwitch(active) {\n    dispatch({\n      type: 'SWITCH_TAB',\n      payload: active\n    });\n  }\n  /**\n   * @function handleTabPositionChange\n   * @type dispatch\n   * @param a\n   * @param b\n   * eventHandler helper function that takes the two tabs to be switched around, switches their indices,...\n   * ...and changes the new active tab\n   */\n\n\n  function handleTabPositionChange(a, b) {\n    var c = tabs[a];\n    tabs[a] = tabs[b];\n    tabs[b] = c;\n\n    if (activeTab === a) {\n      dispatch({\n        type: 'SWITCH_TAB',\n        activeTab: b\n      });\n    } else if (activeTab === b) {\n      dispatch({\n        type: 'SWITCH_TAB',\n        activeTab: a\n      });\n    }\n  }\n  /**\n   * @function handleTabClose\n   * @param index\n   * eventHandler helper function that takes the closed tab and pops it from 'tabs' piece of state\n   */\n\n\n  function handleTabClose(index) {\n    dispatch({\n      type: 'REMOVE_TAB',\n      payload: index\n    });\n    var newTabs = openTabs.filter(function (value, i) {\n      return i !== index;\n    });\n    changeTabs(newTabs);\n  }\n  /**\n   * @function handleClick\n   * @param link\n   * eventHandler helper function that takes the link as a param and returns a component number from matchLink()\n   * if the tab is already open (!indexOf(link) === -1) then switch to that tab with handleTabSwitch\n   * else dispatch a new tab object containing a title, index, and component keys to be appended to 'tabs'...\n   * ...piece of state\n   */\n\n\n  function handleClick(link) {\n    var component = matchLink(link);\n\n    if (openTabs.indexOf(link) === -1) {\n      var newTabContent = {\n        title: link.match(/[A-Z][a-z]+|[0-9]+/g).join(\" \"),\n        index: tabs.length,\n        key: link,\n        component: component\n      };\n      dispatch({\n        type: 'ADD_TAB',\n        payload: newTabContent\n      });\n\n      var newOpen = _toConsumableArray(openTabs);\n\n      newOpen.push(link);\n      changeTabs(newOpen);\n    } else {\n      handleTabSwitch(openTabs.indexOf(link));\n    }\n  }\n\n  function createTab(key) {\n    switch (key) {\n      case 'Home':\n        return React.createElement(Home, {\n          onClick: handleClick.bind(this)\n        });\n\n      case 'NewTrade':\n        return React.createElement(NewTrade, {\n          onClick: handleClick\n        });\n\n      case 'Trade':\n        return React.createElement(Trade, null);\n\n      case 'Blotter':\n        return React.createElement(Blotter, null);\n\n      case 'FileNewTrade':\n        return React.createElement(FileUpload, null);\n\n      default:\n        throw new error('Tab Map Failed');\n    }\n  }\n  /**\n   * @return\n   * @type Grid\n   * @type Header\n   * @type Tabs\n   * @type Tab\n   * @type MAIN_TABS[component]\n   */\n\n\n  return React.createElement(Grid, {\n    container: true,\n    spacing: 2\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      maxWidth: 'min-content',\n      backgroundColor: '#f5f5f5'\n    }\n  }, React.createElement(Tabs, {\n    active: activeTab,\n    onTabSwitch: handleTabSwitch.bind(_this),\n    onTabPositionChange: handleTabPositionChange.bind(_this),\n    onTabClose: handleTabClose.bind(_this),\n    draggable: true,\n    showAdd: false\n  }, //maps 'tabs' piece of state to a <Tab> component, changes when 'tabs' changes\n  tabs.map(function (value, index) {\n    return React.createElement(Tab, {\n      key: value.title + index,\n      title: value.title,\n      showClose: index !== 0\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 4\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12\n    }, React.createElement(Header, null)), React.createElement(Grid, {\n      item: true,\n      xs: 12\n    }, createTab(value.key))));\n  }))));\n};\n/**\n * @function getInitialProps\n * @param ctx\n * checks if user is already logged in before Main component is mounted, if not redirected to  Login page\n * @return {Promise<boolean|any|Promise<boolean>>}\n */\n\n/* Main.getInitialProps = async ctx => {\n    const { token } = nextCookie(ctx);\n    const apiUrl = getHost(ctx.req) + '/api/profile';\n\n    const redirectOnError = () =>\n        typeof window !== 'undefined'\n            ? Router.push('/Login')\n            : ctx.res.writeHead(302, { Location: '/Login' }).end();\n\n    try {\n        const response = await fetch(apiUrl, {\n            credentials: 'include',\n            headers: {\n                Authorization: JSON.stringify({ token })\n            }\n        });\n\n        if (response.ok) {\n            const js = await response.json()\n            console.log('js', js);\n            return js\n        } else {\n            // https://github.com/developit/unfetch#caveats\n            return await redirectOnError()\n        }\n    } catch (error) {\n        // Implementation or Network error\n        return redirectOnError()\n    }\n};\n\nexport default withAuthSync(Main);\n\n */\n\n\nexport default Main;","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-rates-platform/frontend/synswap/pages/Main.js"],"names":["React","useState","useEffect","axios","Grid","Tabs","Tab","useDispatch","useSelector","nextCookie","Router","Header","Home","NewTrade","Trade","Blotter","FileUpload","error","withAuthSync","getHost","fetchTrades","initialFetch","useInterval","callback","params","delay","setInterval","console","log","Main","blocknumber","state","TradeReducer","notifications","NotificationReducer","dispatch","MAIN_TABS","key","activeTab","TabReducer","tabs","openTabs","changeTabs","matchLink","link","i","length","data","Error","handleTabSwitch","active","type","payload","handleTabPositionChange","a","b","c","handleTabClose","index","newTabs","filter","value","handleClick","component","indexOf","newTabContent","title","match","join","newOpen","push","createTab","bind","maxWidth","backgroundColor","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\nimport { Grid } from '@material-ui/core';\nimport Tabs, {Tab} from \"react-awesome-tabs\";\nimport \"../resources/styles/react-awesome-tabs.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport nextCookie from 'next-cookies';\nimport Router from 'next/router';\n\nimport Header from \"../components/main/Header\";\nimport Home from './Home';\nimport NewTrade from './NewTrade';\nimport Trade from './Trade';\nimport Blotter from './Blotter';\nimport FileUpload from './FileUpload';\nimport {error} from \"next/dist/build/output/log\";\nimport { withAuthSync } from '../utils/Auth/auth';\nimport getHost from '../utils/Auth/get-host';\nimport { fetchTrades, initialFetch } from \"../js/tradehelpers\";\n\n/**\n * @class Main\n * @constructor\n * Contains all the navigation functions, including the <Tabs /> and their functions (dispatched to reducers/TabReducer)\n * Dependencies used:\n * @react-awesome-tabs for the <Tabs> and <Tab> components, react-awesome-tabs.scss for styling (comes with module)\n * @material-ui for <Grid />\n * @react-redux for useDispatch and useSelector\n * Custom Components used:\n * @class NewTradeContent - New Trade page\n * @class Home - Home page\n * @class Trade - Trade page\n * @class Header - Header\n */\n\nfunction useInterval(callback, params, delay) {\n    setInterval(() => {\n        callback(params);\n    }, delay);\n    console.log('Fetch Done');\n}\n\nconst Main = () => {\n    const blocknumber = useSelector(state => state.TradeReducer.blocknumber);\n    const notifications = useSelector(state => state.NotificationReducer.notifications);\n    /**\n     * @constant dispatch\n     * @type {function}\n     * gives access to dispatch function from Redux store\n     */\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        initialFetch(dispatch);\n        return;\n    },[]);\n\n    //useInterval(fetchTrades, { blocknumber, dispatch, traderid: 1, notifications }, 5000);\n\n    /**\n     * @constant MAIN_TABS\n     * @type {array}\n     * array of objects that contains a 'key' and a 'component' that is mapped to the 'component' attribute from a tab object in....\n     * ....matchLink\n     */\n    const MAIN_TABS= [\n        { key: 'Home' },\n        { key: 'NewTrade' },\n        { key: 'Trade' },\n        { key: 'Blotter' },\n        { key: 'FileNewTrade' }\n    ];\n\n    /**\n     * @constant activeTab\n     * @type {object}\n     * a number that represents the activeTab piece of state\n     */\n    const activeTab = useSelector(state => state.TabReducer.activeTab);\n\n    /**\n     * @var tabs\n     * @type {object}\n     * an array of objects representing the tabs, with each object in the format { title, index, component }\n     */\n    const tabs = useSelector(state => state.TabReducer.tabs);\n\n    /**\n     * @constant openTabs\n     * @type {array}\n     * used in handleClick method to redirect to a tab if it is already open\n     */\n    const [openTabs, changeTabs] = useState(['Home']);\n\n    /**\n     * @function matchLink\n     * @type string\n     * @param link\n     * helper function that receives a link {string} from an option in the <HomePane />'s (child components of <Home />) and\n     * matches it to a 'component' in the MAIN_TABS array via the 'key'\n     * @return number\n     */\n    function matchLink(link) {\n        for (let i = 0; i < MAIN_TABS.length; i++) {\n            const data = MAIN_TABS[i];\n            if (link === data.key) {\n                return i;\n            }\n        }\n        throw Error('Component Not Found');\n    }\n\n    /**\n     * @function handleTabSwitch\n     * @type number\n     * @type dispatch\n     * @param active\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n    function handleTabSwitch(active) {\n        dispatch({ type: 'SWITCH_TAB', payload: active});\n    }\n\n    /**\n     * @function handleTabPositionChange\n     * @type dispatch\n     * @param a\n     * @param b\n     * eventHandler helper function that takes the two tabs to be switched around, switches their indices,...\n     * ...and changes the new active tab\n     */\n    function handleTabPositionChange(a, b) {\n        let c = tabs[a];\n        tabs[a] = tabs[b];\n        tabs[b] = c;\n\n        if(activeTab === a) {\n            dispatch({ type: 'SWITCH_TAB', activeTab: b });\n        }else if(activeTab === b) {\n            dispatch({ type: 'SWITCH_TAB', activeTab: a });\n        }\n\n    }\n\n    /**\n     * @function handleTabClose\n     * @param index\n     * eventHandler helper function that takes the closed tab and pops it from 'tabs' piece of state\n     */\n    function handleTabClose(index) {\n        dispatch({ type: 'REMOVE_TAB', payload: index });\n        const newTabs = openTabs.filter((value, i) => {\n            return i !== index;\n        });\n        changeTabs(newTabs)\n    }\n\n    /**\n     * @function handleClick\n     * @param link\n     * eventHandler helper function that takes the link as a param and returns a component number from matchLink()\n     * if the tab is already open (!indexOf(link) === -1) then switch to that tab with handleTabSwitch\n     * else dispatch a new tab object containing a title, index, and component keys to be appended to 'tabs'...\n     * ...piece of state\n     */\n    function handleClick(link) {\n        let component = matchLink(link);\n        if (openTabs.indexOf(link) === -1) {\n            let newTabContent = {\n                title: link.match(/[A-Z][a-z]+|[0-9]+/g).join(\" \"),\n                index: tabs.length,\n                key: link,\n                component: component\n            };\n            dispatch({type: 'ADD_TAB', payload: newTabContent});\n            const newOpen = [...openTabs];\n            newOpen.push(link);\n            changeTabs(newOpen);\n        }\n        else {\n            handleTabSwitch(openTabs.indexOf(link));\n        }\n    }\n\n    function createTab(key) {\n        switch (key) {\n            case ('Home'):\n                return (\n                    <Home onClick={ handleClick.bind(this) } />\n                );\n            case ('NewTrade'):\n                return (\n                    <NewTrade onClick={ handleClick }/>\n                );\n            case ('Trade'):\n                return (\n                    <Trade />\n                );\n            case ('Blotter'):\n                return (\n                    <Blotter/>\n                );\n            case ('FileNewTrade'):\n                return (\n                    <FileUpload/>\n                );\n            default:\n                throw new error('Tab Map Failed')\n        }\n    }\n    /**\n     * @return\n     * @type Grid\n     * @type Header\n     * @type Tabs\n     * @type Tab\n     * @type MAIN_TABS[component]\n     */\n    return (\n        <Grid container spacing={ 2 }>\n            <Grid item xs={ 12 } style={{ maxWidth: 'min-content', backgroundColor: '#f5f5f5'}}>\n                <Tabs\n                    active={ activeTab }\n                    onTabSwitch={ handleTabSwitch.bind(this) }\n                    onTabPositionChange={ handleTabPositionChange.bind(this) }\n                    onTabClose={ handleTabClose.bind(this) }\n                    draggable={ true }\n                    showAdd={ false }\n                >\n                    {\n                        //maps 'tabs' piece of state to a <Tab> component, changes when 'tabs' changes\n                        tabs.map((value, index) => {\n                            return (\n                                <Tab\n                                    key={ value.title + index }\n                                    title={value.title}\n                                    showClose={ index !== 0 }\n                                >\n                                    <Grid container spacing={ 4 }>\n                                        <Grid item xs={ 12 }>\n                                            <Header />\n                                        </Grid>\n                                        <Grid item xs={ 12 }>\n                                            {\n                                                createTab(value.key)\n                                            }\n                                        </Grid>\n                                    </Grid>\n                                </Tab>\n                            );\n                        })\n                    }\n                </Tabs>\n            </Grid>\n        </Grid>\n    );\n\n};\n\n/**\n * @function getInitialProps\n * @param ctx\n * checks if user is already logged in before Main component is mounted, if not redirected to  Login page\n * @return {Promise<boolean|any|Promise<boolean>>}\n */\n\n/* Main.getInitialProps = async ctx => {\n    const { token } = nextCookie(ctx);\n    const apiUrl = getHost(ctx.req) + '/api/profile';\n\n    const redirectOnError = () =>\n        typeof window !== 'undefined'\n            ? Router.push('/Login')\n            : ctx.res.writeHead(302, { Location: '/Login' }).end();\n\n    try {\n        const response = await fetch(apiUrl, {\n            credentials: 'include',\n            headers: {\n                Authorization: JSON.stringify({ token })\n            }\n        });\n\n        if (response.ok) {\n            const js = await response.json()\n            console.log('js', js);\n            return js\n        } else {\n            // https://github.com/developit/unfetch#caveats\n            return await redirectOnError()\n        }\n    } catch (error) {\n        // Implementation or Network error\n        return redirectOnError()\n    }\n};\n\nexport default withAuthSync(Main);\n\n */\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}