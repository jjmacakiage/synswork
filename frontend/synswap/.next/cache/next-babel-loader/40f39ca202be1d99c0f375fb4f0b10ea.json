{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useDispatch } from \"react-redux\";\nimport { Button, Grid, makeStyles, Tabs, Tab, TextField, MenuItem, Divider, Typography } from '@material-ui/core';\nimport { Eclipse } from \"react-loading-io\";\nimport { ErrorMessage, Field, Formik, Form } from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { TabPanel, a11yProps } from \"../trade/Helpers\";\nimport { tradeSchema, generateInitial, handleSubmit } from \"../../js/tradehelpers\";\n/**\n * @constant useStyles\n * hook used for styling\n */\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper\n    },\n    customise: {\n      marginTop: 20\n    }\n  };\n});\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeContent\n */\n\nexport default function NewTradeContent(props) {\n  var classes = useStyles();\n  var fields = props.fields,\n      counterpartyList = props.counterpartyList,\n      schema = props.schema;\n  var IRS = schema.IRS;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      changeLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      counterparty = _useState4[0],\n      changeCounterparty = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  function _onSubmit(values) {\n    return handleSubmit({\n      schema: IRS,\n      values: values,\n      dispatch: dispatch\n    });\n  }\n  /**\n   * @function tabChange\n   * @param e\n   * @param newValue\n   * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n   */\n\n\n  function tabChange(e, newValue) {\n    setValue(newValue);\n  }\n\n  function handleCounterpartyChange(e) {\n    changeCounterparty(e.target.value);\n  }\n\n  function createFormColumns(array) {\n    return React.createElement(React.Fragment, null, array.map(function (value, index) {\n      if (value[1] !== 'select') {\n        return React.createElement(Grid, {\n          item: true,\n          xs: 4\n        }, React.createElement(Field, {\n          name: value[0],\n          key: value[0],\n          type: value[1],\n          render: function render(_ref) {\n            var field = _ref.field,\n                isSubmitting = _ref.form.isSubmitting;\n            return React.createElement(TextField, _extends({}, field, {\n              label: value[1] === 'date' ? '' : value[0],\n              disabled: counterparty === '' || isSubmitting,\n              variant: \"outlined\",\n              type: value[1],\n              helperText: value[1] === 'date' ? value[0] : ''\n            }));\n          }\n        }), React.createElement(ErrorMessage, {\n          name: value[0],\n          component: \"div\"\n        }));\n      } else {\n        return React.createElement(Grid, {\n          item: true,\n          xs: 4\n        }, React.createElement(Field, {\n          name: value[0],\n          key: value[0],\n          render: function render(_ref2) {\n            var field = _ref2.field,\n                isSubmitting = _ref2.form.isSubmitting,\n                props = _objectWithoutProperties(_ref2, [\"field\", \"form\"]);\n\n            return React.createElement(TextField, _extends({\n              select: true,\n              disabled: counterparty === '' || isSubmitting,\n              variant: \"outlined\",\n              style: {\n                width: '100%'\n              },\n              SelectProps: {\n                \"native\": true\n              }\n            }, field, props), React.createElement(\"option\", null, \" \", value[0], \" \"), value[3].map(function (option) {\n              return React.createElement(\"option\", {\n                key: option,\n                value: option\n              }, option);\n            }));\n          }\n        }), React.createElement(ErrorMessage, {\n          name: value[0],\n          component: \"div\"\n        }));\n      }\n    }));\n  }\n\n  function extendedFields() {\n    var extended = fields.filter(function (field) {\n      return field[2] === '1';\n    });\n\n    var returnExtended = function returnExtended(i) {\n      return extended[i];\n    };\n\n    return React.createElement(Grid, {\n      container: true,\n      spacing: 2\n    }, [[0], [1, 2, 3], [4], [5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17], [18, 19, 20], [21, 22, 23]].map(function (value, index) {\n      var temp = [];\n\n      for (var i = 0; i < value.length; i++) {\n        temp.push(returnExtended(value[i]));\n      }\n\n      return React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        key: value + index\n      }, index === 2 || index === 7 ? React.createElement(\"div\", {\n        style: {\n          marginTop: 20,\n          marginBottom: 20\n        }\n      }, React.createElement(Typography, {\n        variant: \"overline\",\n        style: {\n          marginBottom: 20\n        }\n      }, index === 2 ? \"Floating Leg\" : \"Fixed Leg\"), React.createElement(Divider, {\n        dark: true\n      })) : null, React.createElement(Grid, {\n        container: true,\n        spacing: 2\n      }, createFormColumns(temp)));\n    }));\n  }\n  /**\n   * @return\n   * @type Grid\n   * @type TabContainer\n   * @type div\n   */\n\n\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(\"div\", null, React.createElement(Typography, {\n    variant: \"overline\",\n    style: {\n      marginBottom: 20\n    }\n  }, \" \", counterparty === '' ? 'New Trade' : counterparty), React.createElement(Tabs, {\n    value: value,\n    onChange: tabChange,\n    centered: true\n  }, React.createElement(Tab, _extends({\n    label: \"Main\"\n  }, a11yProps(0))), React.createElement(Tab, _extends({\n    label: \"Details\"\n  }, a11yProps(1)))), React.createElement(LoadingOverlay, {\n    active: isLoading,\n    spinner: React.createElement(Eclipse, null),\n    styles: {\n      overlay: function overlay(base) {\n        return _objectSpread({}, base, {\n          background: 'rgba(255, 255, 255, 0.1)'\n        });\n      }\n    }\n  }, React.createElement(Formik, {\n    initialValues: generateInitial(fields, new Array(fields.length).fill('')),\n    enableReinitialize: true,\n    onSubmit: function onSubmit(values, actions) {\n      _onSubmit(IRS);\n\n      actions.setSubmitting(false);\n    },\n    validateOnBlur: true,\n    render: function render(_ref3) {\n      var errors = _ref3.errors,\n          status = _ref3.status,\n          touched = _ref3.touched,\n          isSubmitting = _ref3.isSubmitting,\n          isValidating = _ref3.isValidating;\n      return React.createElement(Form, null, React.createElement(TabPanel, {\n        value: value,\n        index: 0\n      }, React.createElement(TextField, {\n        select: true,\n        label: \"Select Counterparty\",\n        disabled: isSubmitting,\n        variant: \"outlined\",\n        type: value[1],\n        value: counterparty,\n        onChange: function onChange(e) {\n          return handleCounterpartyChange(e);\n        },\n        style: {\n          width: '100%',\n          marginBottom: 20\n        }\n      }, counterpartyList.map(function (value, index) {\n        return React.createElement(MenuItem, {\n          key: value + index,\n          value: value\n        }, value);\n      })), React.createElement(Grid, {\n        container: true,\n        spacing: 2\n      }, fields.map(function (field, index) {\n        if (field[2] === '0') {\n          return React.createElement(Grid, {\n            item: true,\n            xs: 6,\n            style: {\n              marginTop: 2,\n              marginBottom: 2\n            },\n            key: field + index\n          }, createFormColumns([field]));\n        }\n      }))), React.createElement(TabPanel, {\n        index: 1,\n        value: value\n      }, extendedFields(), React.createElement(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        disabled: isValidating || isSubmitting || counterparty === '',\n        style: {\n          marginTop: 20\n        }\n      }, \"Submit\")));\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-rates-platform/frontend/synswap/components/newtrade/NewTradeContent.js"],"names":["React","useState","useEffect","axios","useDispatch","Button","Grid","makeStyles","Tabs","Tab","TextField","MenuItem","Divider","Typography","Eclipse","ErrorMessage","Field","Formik","Form","LoadingOverlay","TabPanel","a11yProps","tradeSchema","generateInitial","handleSubmit","useStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","customise","marginTop","NewTradeContent","props","classes","fields","counterpartyList","schema","IRS","isLoading","changeLoading","counterparty","changeCounterparty","dispatch","value","setValue","onSubmit","values","tabChange","e","newValue","handleCounterpartyChange","target","createFormColumns","array","map","index","field","isSubmitting","form","width","option","extendedFields","extended","filter","returnExtended","i","temp","length","push","marginBottom","overlay","base","Array","fill","actions","setSubmitting","errors","status","touched","isValidating"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useDispatch } from \"react-redux\";\nimport { Button, Grid, makeStyles, Tabs, Tab, TextField, MenuItem, Divider, Typography} from '@material-ui/core';\nimport {Eclipse} from \"react-loading-io\";\nimport {ErrorMessage, Field, Formik, Form} from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\n\nimport { TabPanel, a11yProps } from \"../trade/Helpers\";\nimport { tradeSchema, generateInitial, handleSubmit } from \"../../js/tradehelpers\";\n\n/**\n * @constant useStyles\n * hook used for styling\n */\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    customise: {\n        marginTop: 20\n    }\n}));\n\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeContent\n */\n\nexport default function NewTradeContent(props) {\n    const classes = useStyles();\n    const { fields, counterpartyList, schema } = props;\n    const { IRS } = schema;\n    const [isLoading, changeLoading] = useState(false);\n    const [counterparty, changeCounterparty] = useState('');\n    const dispatch = useDispatch();\n    const [value, setValue] = useState(0);\n\n\n    function onSubmit(values) {\n        return handleSubmit({ schema: IRS, values, dispatch })\n    }\n\n    /**\n     * @function tabChange\n     * @param e\n     * @param newValue\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n    function tabChange(e, newValue) {\n        setValue(newValue);\n    }\n\n    function handleCounterpartyChange(e) {\n        changeCounterparty(e.target.value);\n    }\n\n    function createFormColumns(array) {\n        return (\n            <>\n            {\n                array.map((value, index) => {\n                    if (value[1] !== 'select') {\n                        return (\n                            <Grid item xs={ 4 }>\n                                <Field name={value[0]}\n                                       key={value[0]}\n                                       type={ value[1] }\n                                       render={({ field, form: { isSubmitting } }) => (\n                                           <TextField {...field} label={ (value[1] === 'date') ? '' : value[0]}\n                                                      disabled={counterparty === '' || isSubmitting}\n                                                      variant=\"outlined\" type={ value[1]}\n                                                      helperText={ (value[1] === 'date') ? value[0] : ''}\n                                           />\n                                       )}\n                                />\n                                <ErrorMessage name={value[0]} component=\"div\"/>\n                            </Grid>\n                        );\n                    }\n                    else {\n                        return (\n                            <Grid item xs={ 4 }>\n                                <Field name={value[0]}\n                                       key={value[0]}\n                                       render= {\n                                           ({ field, form: { isSubmitting }, ...props }) => {\n                                               return (\n                                                   <TextField\n                                                       select\n                                                       disabled={counterparty === '' || isSubmitting}\n                                                       variant=\"outlined\"\n                                                       style={{ width: '100%' }}\n                                                       SelectProps={{\n                                                           native: true,\n                                                       }}\n                                                       { ...field }\n                                                       { ...props }\n                                                   >\n                                                       <option> { value[0] } </option>\n                                                       {\n                                                           value[3].map(option => {\n                                                               return (\n                                                                   <option key={option} value={option}>\n                                                                       {option}\n                                                                   </option>\n                                                               )\n                                                           })\n                                                       }\n                                                   </TextField>\n                                               );\n                                           }\n                                       }\n                                />\n                                    <ErrorMessage name={value[0]} component=\"div\"/>\n                            </Grid>\n                        )\n                    }\n                })\n            }\n            </>\n        )\n    }\n\n    function extendedFields() {\n        const extended = fields.filter((field) => {\n            return field[2] === '1';\n        });\n        const returnExtended = i => {\n            return extended[i];\n        };\n        return (\n            <Grid container spacing={ 2 }>\n                {\n                    [[0], [1,2,3], [4], [5,6], [7,8,9], [10,11,12], [13,14,15], [16,17], [18,19,20], [21,22,23]].map((value, index) => {\n                        const temp = [];\n                        for (let i = 0; i < value.length; i++) {\n                            temp.push(returnExtended(value[i]));\n                        }\n                        return (\n                            <Grid item xs={ 12 } key={ value + index}>\n                                { (index === 2 || index === 7) ?\n                                    (\n                                        <div style={{ marginTop: 20, marginBottom: 20 }}>\n                                            <Typography variant=\"overline\" style={{ marginBottom: 20 }}>\n                                                {index === 2 ? \"Floating Leg\" : \"Fixed Leg\"}\n                                            </Typography>\n                                            <Divider dark />\n                                        </div>\n                                    )\n                                    : null\n                                }\n                                <Grid container spacing={ 2 }>\n                                    { createFormColumns(temp) }\n                                </Grid>\n                            </Grid>\n                        )\n                    })\n                }\n            </Grid>\n        );\n    }\n\n\n    /**\n     * @return\n     * @type Grid\n     * @type TabContainer\n     * @type div\n     */\n    return (\n        <div className={ classes.root }>\n            <div>\n                <Typography variant=\"overline\" style={{ marginBottom: 20 }}> { (counterparty === '') ? 'New Trade' : counterparty }</Typography>\n                <Tabs value={value} onChange={tabChange} centered >\n                    <Tab label=\"Main\" {...a11yProps(0)} />\n                    <Tab label=\"Details\" {...a11yProps(1)} />\n                </Tabs>\n                <LoadingOverlay\n                    active={ isLoading }\n                    spinner={ <Eclipse />}\n                    styles={{\n                        overlay: (base) => ({\n                            ...base,\n                            background: 'rgba(255, 255, 255, 0.1)'\n                        })\n                    }}\n                >\n                    <Formik\n                        initialValues={ generateInitial(fields, new Array(fields.length).fill('')) }\n                        enableReinitialize={ true }\n                        onSubmit={(values, actions) => {\n                            onSubmit(IRS);\n                            actions.setSubmitting(false)\n                        }}\n                        validateOnBlur={ true }\n                        render={({ errors, status, touched, isSubmitting, isValidating }) => (\n                            <Form>\n                                <TabPanel value={value} index={0}>\n                                    <TextField\n                                        select\n                                        label=\"Select Counterparty\"\n                                        disabled={isSubmitting}\n                                        variant=\"outlined\" type={ value[1] }\n                                        value={ counterparty }\n                                        onChange={ e => handleCounterpartyChange(e) }\n                                        style={{ width: '100%', marginBottom: 20 }}\n                                    >\n                                        { counterpartyList.map((value, index) => {\n                                            return (\n                                                <MenuItem key={ value + index } value={ value }>\n                                                    {value}\n                                                </MenuItem>\n                                            );\n                                        })}\n                                    </TextField>\n                                    <Grid container spacing={ 2 }>\n                                        {\n                                            fields.map((field, index) => {\n                                                if (field[2] === '0') {\n                                                    return (\n                                                        <Grid item xs={ 6 } style={{ marginTop: 2, marginBottom: 2 }} key={ field + index}>\n                                                            {createFormColumns([field])}\n                                                        </Grid>\n                                                    )\n                                                }\n                                            })\n                                        }\n                                    </Grid>\n                                </TabPanel>\n                                <TabPanel index={1} value={value}>\n                                    { extendedFields() }\n                                    <Button\n                                        variant=\"contained\"\n                                        type=\"submit\"\n                                        disabled={ isValidating || isSubmitting || counterparty === ''}\n                                        style={{ marginTop: 20 }}\n                                    >\n                                        Submit\n                                    </Button>\n                                </TabPanel>\n                            </Form>\n                        )}\n                    />\n                </LoadingOverlay>\n            </div>\n        </div>\n    );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}