{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport React, { useState } from 'react';\nimport { Tab, Tabs, TextField, Grid, Typography } from \"@material-ui/core\";\nimport BestMatch from '../components/trade/BestMatch';\nimport { TabPanel, a11yProps } from \"../components/trade/Helpers\";\nimport { generateInitial } from \"../js/tradehelpers\";\nvar columns = [{\n  width: 400,\n  label: 'Dessert',\n  dataKey: 'dessert'\n}, {\n  width: 240,\n  label: \"Calories\\xA0(g)\",\n  dataKey: 'calories',\n  numeric: true\n}, {\n  width: 240,\n  label: \"Fat\\xA0(g)\",\n  dataKey: 'fat',\n  numeric: true\n}, {\n  width: 240,\n  label: \"Carbs\\xA0(g)\",\n  dataKey: 'carbs',\n  numeric: true\n}, {\n  width: 240,\n  label: \"Protein\\xA0(g)\",\n  dataKey: 'protein',\n  numeric: true\n}];\nvar sample = [['Frozen yoghurt', 159, 6.0, 24, 4.0], ['Ice cream sandwich', 237, 9.0, 37, 4.3], ['Eclair', 262, 16.0, 24, 6.0], ['Cupcake', 305, 3.7, 67, 4.3], ['Gingerbread', 356, 16.0, 49, 3.9]];\n\nfunction createData(id, dessert, calories, fat, carbs, protein) {\n  return {\n    id: id,\n    dessert: dessert,\n    calories: calories,\n    fat: fat,\n    carbs: carbs,\n    protein: protein\n  };\n}\n\nvar rows = [];\n\nfor (var i = 0; i < 200; i += 1) {\n  var randomSelection = sample[Math.floor(Math.random() * sample.length)];\n  rows.push(createData.apply(void 0, [i].concat(_toConsumableArray(randomSelection))));\n}\n\nexport default function Trade(props) {\n  var data = props.data;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      score = _useState4[0],\n      setScore = _useState4[1];\n  /**\n   * @function tabChange\n   * @param e\n   * @param newValue\n   * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n   */\n\n\n  var tabChange = function tabChange(e, newValue) {\n    setValue(newValue);\n  };\n\n  var BEST_MATCH_TITLE = 'Best Match Score: ' + score + '%';\n\n  var generateMain = function generateMain() {\n    return React.createElement(Typography, {\n      variant: \"overline\"\n    }, \" Lmao \");\n  };\n\n  return React.createElement(\"div\", null, React.createElement(Grid, {\n    container: true,\n    spacing: 2\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React.createElement(\"div\", null, React.createElement(Tabs, {\n    value: value,\n    onChange: tabChange,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    centered: true\n  }, React.createElement(Tab, _extends({\n    label: \"Main\"\n  }, a11yProps(0))), React.createElement(Tab, _extends({\n    label: \"Details\"\n  }, a11yProps(1))), React.createElement(Tab, _extends({\n    label: \"Cashflow Schedule\"\n  }, a11yProps(2))), React.createElement(Tab, _extends({\n    label: \"Confirmation\"\n  }, a11yProps(3))), React.createElement(Tab, _extends({\n    label: BEST_MATCH_TITLE\n  }, a11yProps(4)))), React.createElement(TabPanel, {\n    value: value,\n    index: 0\n  }, generateMain()), React.createElement(TabPanel, {\n    value: value,\n    index: 1\n  }), React.createElement(TabPanel, {\n    value: value,\n    index: 2\n  }, React.createElement(Typography, {\n    variant: \"overline\"\n  }, \" Cashflow Schedule \")), React.createElement(TabPanel, {\n    value: value,\n    index: 3\n  }, \"Confirmation\"), React.createElement(TabPanel, {\n    index: 4,\n    value: value\n  }, React.createElement(BestMatch, {\n    score: score\n  }))))));\n}","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-rates-platform/frontend/synswap/pages/Trade.js"],"names":["React","useState","Tab","Tabs","TextField","Grid","Typography","BestMatch","TabPanel","a11yProps","generateInitial","columns","width","label","dataKey","numeric","sample","createData","id","dessert","calories","fat","carbs","protein","rows","i","randomSelection","Math","floor","random","length","push","Trade","props","data","value","setValue","score","setScore","tabChange","e","newValue","BEST_MATCH_TITLE","generateMain"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Tab, Tabs, TextField, Grid, Typography } from \"@material-ui/core\";\nimport BestMatch from '../components/trade/BestMatch';\nimport { TabPanel, a11yProps } from \"../components/trade/Helpers\";\nimport { generateInitial } from \"../js/tradehelpers\";\n\nconst columns= [\n    {\n        width: 400,\n        label: 'Dessert',\n        dataKey: 'dessert',\n    },\n    {\n        width: 240,\n        label: 'Calories\\u00A0(g)',\n        dataKey: 'calories',\n        numeric: true,\n    },\n    {\n        width: 240,\n        label: 'Fat\\u00A0(g)',\n        dataKey: 'fat',\n        numeric: true,\n    },\n    {\n        width: 240,\n        label: 'Carbs\\u00A0(g)',\n        dataKey: 'carbs',\n        numeric: true,\n    },\n    {\n        width: 240,\n        label: 'Protein\\u00A0(g)',\n        dataKey: 'protein',\n        numeric: true,\n    },\n];\n\nconst sample = [\n    ['Frozen yoghurt', 159, 6.0, 24, 4.0],\n    ['Ice cream sandwich', 237, 9.0, 37, 4.3],\n    ['Eclair', 262, 16.0, 24, 6.0],\n    ['Cupcake', 305, 3.7, 67, 4.3],\n    ['Gingerbread', 356, 16.0, 49, 3.9],\n];\n\nfunction createData(id, dessert, calories, fat, carbs, protein) {\n    return { id, dessert, calories, fat, carbs, protein };\n}\n\nconst rows = [];\n\nfor (let i = 0; i < 200; i += 1) {\n    const randomSelection = sample[Math.floor(Math.random() * sample.length)];\n    rows.push(createData(i, ...randomSelection));\n}\n\n\nexport default function Trade(props) {\n    const { data } = props;\n\n    const [value, setValue] = useState(0);\n    const [score, setScore] = useState(0);\n\n    /**\n     * @function tabChange\n     * @param e\n     * @param newValue\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n    const tabChange = (e, newValue) => {\n        setValue(newValue);\n    };\n\n    const BEST_MATCH_TITLE = 'Best Match Score: ' + score + '%';\n\n    const generateMain = () => {\n        return (\n            <Typography variant=\"overline\"> Lmao </Typography>\n        )\n    };\n    return (\n        <div>\n            <Grid container spacing={ 2 }>\n                <Grid item xs={ 12 }>\n                    <div>\n                        <Tabs\n                            value={value}\n                            onChange={tabChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            centered\n                        >\n                            <Tab label=\"Main\" {...a11yProps(0)} />\n                            <Tab label=\"Details\" {...a11yProps(1)} />\n                            <Tab label=\"Cashflow Schedule\" {...a11yProps(2)} />\n                            <Tab label=\"Confirmation\" {...a11yProps(3)} />\n                            <Tab label={ BEST_MATCH_TITLE } {...a11yProps(4)} />\n                        </Tabs>\n\n                        <TabPanel value={value} index={0}>\n                            { generateMain() }\n                        </TabPanel>\n\n                        <TabPanel value={value} index={1}>\n\n                        </TabPanel>\n\n                        <TabPanel value={value} index={2}>\n                            <Typography variant=\"overline\"> Cashflow Schedule </Typography>\n                        </TabPanel>\n\n                        <TabPanel value={value} index={3}>\n                            Confirmation\n                        </TabPanel>\n\n                        <TabPanel index={4} value={value}>\n                            <BestMatch score={ score }/>\n                        </TabPanel>\n\n                    </div>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}