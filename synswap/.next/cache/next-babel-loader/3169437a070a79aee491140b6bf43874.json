{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport { login } from \"./auth\";\nexport default function doLogin(_x) {\n  return _doLogin.apply(this, arguments);\n}\n\nfunction _doLogin() {\n  _doLogin = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(userData) {\n    var username, url, response, _ref, token, error;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            username = userData.username;\n            url = '/api/login';\n            _context.prev = 2;\n            _context.next = 5;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: _JSON$stringify({\n                username: username\n              })\n            });\n\n          case 5:\n            response = _context.sent;\n\n            if (!(response.status === 200)) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 9;\n            return response.json();\n\n          case 9:\n            _ref = _context.sent;\n            token = _ref.token;\n            _context.next = 13;\n            return login({\n              token: token\n            });\n\n          case 13:\n            return _context.abrupt(\"return\", {\n              token: token,\n              status: 'success'\n            });\n\n          case 16:\n            console.log('Login failed.'); // https://github.com/developit/unfetch#caveats\n\n            error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n\n          case 20:\n            _context.next = 26;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](2);\n            console.error('You have an error in your code or there are Network issues.', _context.t0);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 22]]);\n  }));\n  return _doLogin.apply(this, arguments);\n}","map":{"version":3,"sources":["C:\\Users\\liams\\synswap-web-react\\synswap\\utils\\Auth\\login.js"],"names":["fetch","login","doLogin","userData","username","url","method","headers","body","response","status","json","token","console","log","error","Error","statusText"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,wBAA8BC,OAA9B;AAAA;AAAA;;;;;2BAAe,iBAAuBC,QAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,QADK,GACMD,QAAQ,CAACC,QADf;AAELC,YAAAA,GAFK,GAEC,YAFD;AAAA;AAAA;AAAA,mBAIgBL,KAAK,CAACK,GAAD,EAAM;AAC9BC,cAAAA,MAAM,EAAE,MADsB;AAE9BC,cAAAA,OAAO,EAAE;AAAE,gCAAgB;AAAlB,eAFqB;AAG9BC,cAAAA,IAAI,EAAE,gBAAe;AAAEJ,gBAAAA,QAAQ,EAARA;AAAF,eAAf;AAHwB,aAAN,CAJrB;;AAAA;AAIDK,YAAAA,QAJC;;AAAA,kBASHA,QAAQ,CAACC,MAAT,KAAoB,GATjB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAUqBD,QAAQ,CAACE,IAAT,EAVrB;;AAAA;AAAA;AAUKC,YAAAA,KAVL,QAUKA,KAVL;AAAA;AAAA,mBAWGX,KAAK,CAAC;AAAEW,cAAAA,KAAK,EAALA;AAAF,aAAD,CAXR;;AAAA;AAAA,6CAYI;AAAEA,cAAAA,KAAK,EAAEA,KAAT;AAAgBF,cAAAA,MAAM,EAAE;AAAxB,aAZJ;;AAAA;AAcHG,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAdG,CAeH;;AACIC,YAAAA,KAhBD,GAgBS,IAAIC,KAAJ,CAAUP,QAAQ,CAACQ,UAAnB,CAhBT;AAiBHF,YAAAA,KAAK,CAACN,QAAN,GAAiBA,QAAjB;AAjBG,kBAkBGM,KAlBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBPF,YAAAA,OAAO,CAACE,KAAR,CACI,6DADJ;AArBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\nimport { login } from \"./auth\";\r\n\r\nexport default async function doLogin(userData) {\r\n    const username = userData.username;\r\n    const url = '/api/login';\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ username })\r\n        });\r\n        if (response.status === 200) {\r\n            const { token } = await response.json();\r\n            await login({ token });\r\n            return { token: token, status: 'success' };\r\n        } else {\r\n            console.log('Login failed.');\r\n            // https://github.com/developit/unfetch#caveats\r\n            let error = new Error(response.statusText);\r\n            error.response = response;\r\n            throw error\r\n        }\r\n    } catch (error) {\r\n        console.error(\r\n            'You have an error in your code or there are Network issues.',\r\n            error\r\n        );\r\n        return error;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}