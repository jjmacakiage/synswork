{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nexport default function fetchCounterpartyList(_x) {\n  return _fetchCounterpartyList.apply(this, arguments);\n}\n\nfunction _fetchCounterpartyList() {\n  _fetchCounterpartyList = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(currentUser) {\n    var url, response, _ref, counterpartyList, error;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = '/api/new_trade';\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: _JSON$stringify({\n                currentUser: currentUser\n              })\n            });\n\n          case 4:\n            response = _context.sent;\n\n            if (!(response.status === 200)) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            _ref = _context.sent;\n            counterpartyList = _ref.counterpartyList;\n            return _context.abrupt(\"return\", {\n              counterpartyList: counterpartyList,\n              status: 'success'\n            });\n\n          case 13:\n            console.log('Counterparty config fetch failed.');\n            error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n\n          case 17:\n            _context.next = 23;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](1);\n            console.error('You have an error in your code or there are Network issues.', _context.t0);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 19]]);\n  }));\n  return _fetchCounterpartyList.apply(this, arguments);\n}","map":{"version":3,"sources":["C:\\Users\\liams\\synswap-web-react\\synswap\\utils\\NewTrade\\new_trade_util.js"],"names":["fetch","fetchCounterpartyList","currentUser","url","method","headers","body","response","status","json","counterpartyList","console","log","error","Error","statusText"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,wBAA8BC,qBAA9B;AAAA;AAAA;;;;;2BAAe,iBAAqCC,WAArC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,GADK,GACC,gBADD;AAAA;AAAA;AAAA,mBAGgBH,KAAK,CAACG,GAAD,EAAM;AAC9BC,cAAAA,MAAM,EAAE,MADsB;AAE9BC,cAAAA,OAAO,EAAE;AAAE,gCAAgB;AAAlB,eAFqB;AAG9BC,cAAAA,IAAI,EAAE,gBAAe;AAAEJ,gBAAAA,WAAW,EAAXA;AAAF,eAAf;AAHwB,aAAN,CAHrB;;AAAA;AAGDK,YAAAA,QAHC;;AAAA,kBAQHA,QAAQ,CAACC,MAAT,KAAoB,GARjB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASgCD,QAAQ,CAACE,IAAT,EAThC;;AAAA;AAAA;AASKC,YAAAA,gBATL,QASKA,gBATL;AAAA,6CAUI;AAAEA,cAAAA,gBAAgB,EAAEA,gBAApB;AAAsCF,cAAAA,MAAM,EAAE;AAA9C,aAVJ;;AAAA;AAYHG,YAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AAEIC,YAAAA,KAdD,GAcS,IAAIC,KAAJ,CAAUP,QAAQ,CAACQ,UAAnB,CAdT;AAeHF,YAAAA,KAAK,CAACN,QAAN,GAAiBA,QAAjB;AAfG,kBAgBGM,KAhBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBPF,YAAAA,OAAO,CAACE,KAAR,CACI,6DADJ;AAnBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\n\r\nexport default async function fetchCounterpartyList(currentUser) {\r\n    const url = '/api/new_trade';\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ currentUser })\r\n        });\r\n        if (response.status === 200) {\r\n            const { counterpartyList } = await response.json();\r\n            return { counterpartyList: counterpartyList, status: 'success' };\r\n        } else {\r\n            console.log('Counterparty config fetch failed.');\r\n\r\n            let error = new Error(response.statusText);\r\n            error.response = response;\r\n            throw error\r\n        }\r\n    } catch (error) {\r\n        console.error(\r\n            'You have an error in your code or there are Network issues.',\r\n            error\r\n        );\r\n        return error;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}