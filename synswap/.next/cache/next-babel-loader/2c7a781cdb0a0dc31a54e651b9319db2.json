{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(req, res) {\n    var _ref2, currentUser, url, response, _ref3, counterpartyList, error, _response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return req.body;\n\n          case 2:\n            _ref2 = _context.sent;\n            currentUser = _ref2.currentUser;\n            url = \"https://api.github.com/users/jjmacakiage\"; //INSERT SERVICE LAYER URL HERE with current user as query parameter e.g. api.ourApi.com/?id=${currentUser}\n\n            _context.prev = 5;\n            _context.next = 8;\n            return fetch(url);\n\n          case 8:\n            response = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.next = 12;\n            return response.json();\n\n          case 12:\n            _ref3 = _context.sent;\n            counterpartyList = _ref3.counterpartyList;\n            return _context.abrupt(\"return\", res.status(200).json({\n              counterpartyList: counterpartyList\n            }));\n\n          case 17:\n            error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n\n          case 20:\n            _context.next = 26;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](5);\n            _response = _context.t0.response;\n            return _context.abrupt(\"return\", _response ? res.status(_response.status).json({\n              message: _response.statusText\n            }) : res.status(400).json({\n              message: _context.t0.message\n            }));\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 22]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/pages/api/new_trade.js"],"names":["fetch","req","res","body","currentUser","url","response","ok","json","counterpartyList","status","error","Error","statusText","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBD,GAAG,CAACE,IADvB;;AAAA;AAAA;AACHC,YAAAA,WADG,SACHA,WADG;AAELC,YAAAA,GAFK,+CAE6C;;AAF7C;AAAA;AAAA,mBAKgBL,KAAK,CAACK,GAAD,CALrB;;AAAA;AAKDC,YAAAA,QALC;;AAAA,iBAMHA,QAAQ,CAACC,EANN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOgCD,QAAQ,CAACE,IAAT,EAPhC;;AAAA;AAAA;AAOKC,YAAAA,gBAPL,SAOKA,gBAPL;AAAA,6CAQIP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,cAAAA,gBAAgB,EAAEA;AAApB,aAArB,CARJ;;AAAA;AAUGE,YAAAA,KAVH,GAUW,IAAIC,KAAJ,CAAUN,QAAQ,CAACO,UAAnB,CAVX;AAWHF,YAAAA,KAAK,CAACL,QAAN,GAAiBA,QAAjB;AAXG,kBAYGK,KAZH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeCL,YAAAA,SAfD,eAeCA,QAfD;AAAA,6CAgBAA,SAAQ,GACTJ,GAAG,CAACQ,MAAJ,CAAWJ,SAAQ,CAACI,MAApB,EAA4BF,IAA5B,CAAiC;AAAEM,cAAAA,OAAO,EAAER,SAAQ,CAACO;AAApB,aAAjC,CADS,GAETX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEM,cAAAA,OAAO,EAAE,YAAMA;AAAjB,aAArB,CAlBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nexport default async (req, res) => {\n    const { currentUser } = await req.body;\n    const url = `https://api.github.com/users/jjmacakiage`; //INSERT SERVICE LAYER URL HERE with current user as query parameter e.g. api.ourApi.com/?id=${currentUser}\n\n    try {\n        const response = await fetch(url);\n        if (response.ok) {\n            const { counterpartyList } = await response.json();\n            return res.status(200).json({ counterpartyList: counterpartyList });\n        } else {\n            const error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n        }\n    } catch (error) {\n        const { response } = error;\n        return response\n            ? res.status(response.status).json({ message: response.statusText })\n            : res.status(400).json({ message: error.message })\n    }\n};\n"]},"metadata":{},"sourceType":"module"}