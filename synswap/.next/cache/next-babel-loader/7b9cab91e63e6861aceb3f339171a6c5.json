{"ast":null,"code":"import _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { ErrorMessage, Formik, Form, Field } from 'formik';\nimport LoadingOverlay from 'react-loading-overlay';\nimport Ball from 'react-loading-io';\nimport * as Yup from 'yup';\n\nvar NewTradeFrom = function NewTradeFrom(props) {\n  //const validationSchema = useSelector(state => state.NewTradeReducer.validationSchema);\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      counterparty = _React$useState2[0],\n      changeCounterparty = _React$useState2[1];\n\n  var values = function values() {\n    var list = _toConsumableArray(props.initialValues);\n\n    var result = [];\n\n    for (var i = 0; i < list.length; i++) {\n      result.push([list[i], Yup.string().required('Required')]);\n    }\n\n    return Object.fromEntries(new _Map(result));\n  };\n\n  var testSchema = Yup.object().shape(values());\n  return React.createElement(LoadingOverlay, {\n    active: isActive,\n    spinner: React.createElement(Ball, null)\n  }, React.createElement(Formik, {\n    initialValues: props.initialValues,\n    onSubmit: function onSubmit(values, actions) {\n      console.log(values);\n      actions.setSubmitting(false);\n    },\n    enableReinitialize: true\n    /*onSubmit={(values, actions) => {\n        MyImaginaryRestApiCall(user.id, values).then(\n            updatedUser => {\n                actions.setSubmitting(false);\n                updateUser(updatedUser);\n                onClose();\n            },\n            error => {\n                actions.setSubmitting(false);\n                actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n                actions.setStatus({ msg: 'Set some arbitrary status or data' });\n            }\n        );\n    }}\n    */\n    ,\n    validationSchema: testSchema,\n    validateOnBlur: true\n  }, function (_ref) {\n    var errors = _ref.errors,\n        touched = _ref.touched,\n        isValidating = _ref.isValidating,\n        isSubmitting = _ref.isSubmitting;\n    return React.createElement(Form, null, React.createElement(\"select\", {\n      value: counterparty,\n      onChange: function onChange(e) {\n        return changeCounterparty(e.target.value);\n      }\n    }, React.createElement(\"option\", {\n      value: \"\"\n    }, \" Select Counterparty \"), props.counterparties.map(function (value, index) {\n      return React.createElement(\"option\", {\n        key: value + index,\n        value: value\n      }, value);\n    })), props.fields.map(function (field, index) {\n      return React.createElement(\"div\", {\n        className: \"col\",\n        key: field + index\n      }, React.createElement(Field, {\n        type: \"name\",\n        name: field,\n        disabled: counterparty === ''\n      }), React.createElement(ErrorMessage, {\n        name: field\n      }));\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isValidating || isSubmitting\n    }, \" Submit \"));\n  }));\n};\n\nexport default NewTradeFrom;","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/components/newtrade/Form.js"],"names":["React","ErrorMessage","Formik","Form","Field","LoadingOverlay","Ball","Yup","NewTradeFrom","props","useState","counterparty","changeCounterparty","values","list","initialValues","result","i","length","push","string","required","Object","fromEntries","testSchema","object","shape","isActive","actions","console","log","setSubmitting","errors","touched","isValidating","isSubmitting","e","target","value","counterparties","map","index","fields","field"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ErrorMessage, Formik, Form, Field } from 'formik';\nimport LoadingOverlay from 'react-loading-overlay';\nimport Ball from 'react-loading-io';\nimport * as Yup from 'yup';\n\n\nconst NewTradeFrom = props => {\n    //const validationSchema = useSelector(state => state.NewTradeReducer.validationSchema);\n    const [counterparty, changeCounterparty] = React.useState('');\n    const values = () => {\n        const list = [...props.initialValues];\n        const result = [];\n        for (let i = 0; i < list.length; i++) {\n            result.push(\n                [list[i], Yup.string().required('Required')]\n            )\n        }\n        return Object.fromEntries(new Map(result));\n    };\n    const testSchema = Yup.object().shape(values());\n    return (\n        <LoadingOverlay\n            active={ isActive }\n            spinner={ <Ball />}\n        >\n            <Formik\n                initialValues={ props.initialValues }\n                onSubmit={ (values, actions)=> {\n                    console.log(values);\n                    actions.setSubmitting(false);\n                }}\n                enableReinitialize={ true }\n                /*onSubmit={(values, actions) => {\n                    MyImaginaryRestApiCall(user.id, values).then(\n                        updatedUser => {\n                            actions.setSubmitting(false);\n                            updateUser(updatedUser);\n                            onClose();\n                        },\n                        error => {\n                            actions.setSubmitting(false);\n                            actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n                            actions.setStatus({ msg: 'Set some arbitrary status or data' });\n                        }\n                    );\n                }}\n                */\n                validationSchema={ testSchema }\n                validateOnBlur={ true }\n                >\n                {({ errors, touched, isValidating, isSubmitting }) => (\n                    <Form>\n                        <select value={ counterparty } onChange={ e => changeCounterparty(e.target.value)}>\n                            <option value=\"\"> Select Counterparty </option>\n                            { props.counterparties.map((value, index) => {\n                                return (\n                                   <option key={ value + index } value={ value }>\n                                        {value}\n                                   </option>\n                                );\n                            })}\n                        </select>\n                        {\n                            props.fields.map((field, index) => {\n                                return (\n                                    <div className=\"col\" key={ field + index }>\n                                        <Field type=\"name\" name={ field } disabled={ counterparty === ''} />\n                                        <ErrorMessage name={ field } />\n                                    </div>\n                                )\n                            })\n                        }\n                        <button type=\"submit\" disabled={ isValidating || isSubmitting }> Submit </button>\n                    </Form>\n                )}\n            </Formik>\n        </LoadingOverlay>\n    )\n};\nexport default NewTradeFrom;\n"]},"metadata":{},"sourceType":"module"}