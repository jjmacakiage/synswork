{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport React, { useEffect, useState } from 'react';\nimport { MultiGrid, AutoSizer } from 'react-virtualized';\nimport { Paper, Typography } from '@material-ui/core';\nexport default function Table(props) {\n  function pullStuff(obj, param) {\n    var getKeys = function getKeys(obj) {\n      if (typeof obj !== 'object') {\n        throw new Error('Invalid JSON');\n      }\n\n      var result = [];\n\n      var topKeys = _Object$keys(obj);\n\n      for (var i = 0; i < topKeys.length; i++) {\n        var topKey = topKeys[i];\n        var topEntry = obj[topKey];\n\n        if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n          result.push(topKey);\n        } else if (_Array$isArray(topEntry)) {\n          var arrayEntry = void 0;\n\n          for (arrayEntry in topEntry) {\n            result.push(getKeys(arrayEntry, true));\n          }\n        } else {\n          result.push(getKeys(topEntry));\n        }\n      }\n\n      return result.flat(Infinity);\n    };\n\n    var getValues = function getValues(obj) {\n      if (typeof obj !== 'object') {\n        throw new Error('Invalid JSON');\n      }\n\n      var result = [];\n\n      var topValues = _Object$values(obj);\n\n      for (var i = 0; i < topValues.length; i++) {\n        var topValue = topValues[i];\n\n        if (typeof topValue === 'string' || typeof topValue === 'number') {\n          result.push(topValue);\n        } else if (_Array$isArray(topValue)) {\n          var arrayEntry = void 0;\n\n          for (arrayEntry in topValue) {\n            result.push(getValues(arrayEntry, true));\n          }\n        } else {\n          result.push(getValues(topValue));\n        }\n      }\n\n      return result.flat(Infinity);\n    };\n\n    switch (param) {\n      case 'keys':\n        return getKeys(obj, false);\n\n      case 'values':\n        return getValues(obj, false);\n\n      default:\n        return;\n    }\n  }\n\n  var formatData = function formatData(data) {\n    var columns = pullStuff(data[0], 'keys');\n    var result = [];\n    result.push(columns);\n\n    for (var i = 0; i < data.length; i++) {\n      result.push(pullStuff(data[i], 'values'));\n    }\n\n    return result;\n  };\n\n  var data = formatData(props.data);\n  console.log(data);\n\n  var cellRenderer = function cellRenderer(_ref) {\n    var columnIndex = _ref.columnIndex,\n        key = _ref.key,\n        rowIndex = _ref.rowIndex,\n        style = _ref.style;\n    return React.createElement(Paper, {\n      key: key,\n      style: _objectSpread({}, style, {\n        padding: 5,\n        minWidth: \"min-content\"\n      }),\n      square: true\n    }, React.createElement(Typography, {\n      variant: \"overline\"\n    }, \" \", data[rowIndex][columnIndex], \" \"));\n  };\n\n  return React.createElement(MultiGrid, {\n    cellRenderer: cellRenderer,\n    columnCount: data[0].length,\n    columnWidth: 5000 / data[0].length,\n    fixedColumnCount: 0,\n    fixedRowCount: 1,\n    height: 600,\n    rowCount: data.length,\n    rowHeight: 30,\n    width: 1200,\n    style: {\n      marginLeft: 20\n    }\n  });\n}","map":{"version":3,"sources":["C:\\Users\\liams\\synswap-web-react\\synswap\\components\\Table.js"],"names":["React","useEffect","useState","MultiGrid","AutoSizer","Paper","Typography","Table","props","pullStuff","obj","param","getKeys","Error","result","topKeys","i","length","topKey","topEntry","push","arrayEntry","flat","Infinity","getValues","topValues","topValue","formatData","data","columns","console","log","cellRenderer","columnIndex","key","rowIndex","style","padding","minWidth","marginLeft"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { MultiGrid, AutoSizer } from 'react-virtualized';\r\nimport { Paper, Typography } from '@material-ui/core';\r\n\r\nexport default function Table(props) {\r\n    function pullStuff(obj, param) {\r\n        const getKeys = obj => {\r\n            if (typeof obj !== 'object') {\r\n                throw new Error('Invalid JSON');\r\n            }\r\n            let result = [];\r\n            const topKeys = Object.keys(obj);\r\n            for (let i = 0; i < topKeys.length; i++) {\r\n                let topKey = topKeys[i];\r\n                let topEntry = obj[topKey];\r\n                if (typeof topEntry === 'string' || typeof topEntry === 'number') {\r\n                    result.push(topKey);\r\n                }\r\n                else if (Array.isArray(topEntry)) {\r\n                    let arrayEntry;\r\n                    for (arrayEntry in topEntry) {\r\n                        result.push(getKeys(arrayEntry, true));\r\n                    }\r\n                }\r\n                else {\r\n                    result.push(getKeys(topEntry))\r\n                }\r\n            }\r\n            return result.flat(Infinity);\r\n        };\r\n\r\n        const getValues = obj => {\r\n            if (typeof obj !== 'object') {\r\n                throw new Error('Invalid JSON');\r\n            }\r\n            let result = [];\r\n            let topValues = Object.values(obj);\r\n            for (let i = 0; i < topValues.length; i++) {\r\n                let topValue = topValues[i];\r\n                if (typeof topValue === 'string' || typeof topValue === 'number') {\r\n                    result.push(topValue);\r\n                }\r\n                else if (Array.isArray(topValue)) {\r\n                    let arrayEntry;\r\n                    for (arrayEntry in topValue) {\r\n                        result.push(getValues(arrayEntry, true));\r\n                    }\r\n                }\r\n                else {\r\n                    result.push(getValues(topValue))\r\n                }\r\n            }\r\n            return result.flat(Infinity);\r\n        };\r\n        switch (param) {\r\n            case 'keys':\r\n                return getKeys(obj, false);\r\n            case 'values':\r\n                return getValues(obj, false);\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const formatData = data => {\r\n        const columns = pullStuff(data[0], 'keys');\r\n        const result = [];\r\n        result.push(columns);\r\n        for (let i = 0; i < data.length; i++) {\r\n            result.push(pullStuff(data[i], 'values'))\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const data = formatData(props.data);\r\n    console.log(data);\r\n\r\n    const cellRenderer = ({ columnIndex, key, rowIndex, style }) => {\r\n        return (\r\n            <Paper\r\n                key={ key }\r\n                style={ {...style, padding: 5, minWidth: \"min-content\" } }\r\n                square\r\n            >\r\n                <Typography variant=\"overline\"> { data[rowIndex][columnIndex] } </Typography>\r\n            </Paper>\r\n        )\r\n    }\r\n    return (\r\n        <MultiGrid\r\n            cellRenderer={cellRenderer}\r\n            columnCount={data[0].length}\r\n            columnWidth={ 5000 / data[0].length }\r\n            fixedColumnCount={ 0 }\r\n            fixedRowCount={ 1 }\r\n            height={ 600 }\r\n            rowCount={data.length}\r\n            rowHeight={30}\r\n            width={ 1200 }\r\n            style={{ marginLeft: 20 }}\r\n        />\r\n\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}