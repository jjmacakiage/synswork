{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { Button, Grid, makeStyles, Tabs, Tab, Select, TextField, InputLabel, Divider } from '@material-ui/core';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { TabContainer } from \"../../utils/tradehelpers\";\nimport { Eclipse } from \"react-loading-io\";\nimport { ErrorMessage, Field, Formik, Form } from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\n/**\n * @constant useStyles\n * hook used for styling\n */\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper\n    },\n    customise: {\n      marginTop: 20\n    }\n  };\n});\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeContent\n */\n\nexport default function NewTradeContent(props) {\n  var classes = useStyles();\n  var fields = props.fields,\n      counterpartyList = props.counterpartyList,\n      trades_length = props.trades_length;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      changeLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      counterparty = _useState4[0],\n      changeCounterparty = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n  /**\n   * @function handleSubmit\n   * @param result\n   * takes fields passed in from the form and appends to 'tradeStates' piece of state\n   */\n\n\n  function handleSubmit(result) {\n    var nameRemoved = result.filter(function (value, index) {\n      return index !== result.length - 1;\n    });\n    var payload = {\n      id: trades_length,\n      value: nameRemoved\n    };\n    dispatch({\n      type: 'NEW_TRADE',\n      payload: payload\n    });\n  }\n  /**\n   * @function addFields\n   * @param addFields\n   * takes the custom fields created in component and appends to NEW_TRADE_FIELDS piece of state\n   */\n\n\n  function addFields(addFields) {\n    dispatch({\n      type: 'APPEND_FIELDS',\n      payload: addFields\n    });\n  }\n  /**\n   * @function tabChange\n   * @param e\n   * @param newValue\n   * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n   */\n\n\n  function tabChange(e, newValue) {\n    setValue(newValue);\n  }\n  /**\n   * @return\n   * @type Grid\n   * @type TabContainer\n   * @type Tab\n   * @type Tabs\n   * @type div\n   */\n\n\n  function handleCounterpartyChange(e) {\n    changeCounterparty(e.target.value);\n  }\n\n  function createFormColumns(array) {\n    return React.createElement(\"div\", {\n      className: \"col\"\n    }, React.createElement(\"div\", {\n      className: \"row\"\n    }, array.map(function (field, index) {\n      if (field[1] !== 'select') {\n        return React.createElement(\"div\", null, React.createElement(Field, {\n          name: field[0],\n          key: field[0],\n          render: function render() {\n            return React.createElement(TextField, {\n              label: field[0],\n              disabled: counterparty === '',\n              variant: \"outlined\",\n              type: field[2]\n            });\n          }\n        }), React.createElement(ErrorMessage, {\n          name: field[0]\n        }));\n      } else {\n        return React.createElement(Field, {\n          name: field[0],\n          key: field[0],\n          render: function render() {\n            return React.createElement(\"div\", null, React.createElement(InputLabel, {\n              htmlFor: field[0]\n            }, \" \", field[0], \" \"), React.createElement(Select, {\n              name: field[0]\n            }, React.createElement(\"option\", {\n              value: \"DEFAULT\"\n            }, \" Default\")), React.createElement(ErrorMessage, {\n              name: field[0]\n            }));\n          }\n        });\n      }\n    })));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(\"div\", null, React.createElement(LoadingOverlay, {\n    active: false,\n    spinner: React.createElement(Eclipse, null),\n    styles: {\n      overlay: function overlay(base) {\n        return _objectSpread({}, base, {\n          background: 'rgba(255, 255, 255, 0.1)'\n        });\n      }\n    }\n  }, React.createElement(Formik, {\n    initialValues: [],\n    onSubmit: function onSubmit(values, actions) {\n      changeLoading(true);\n      setTimeout(function () {\n        changeLoading(false);\n      }, 2000);\n      console.log(values);\n      actions.setSubmitting(false);\n    },\n    enableReinitialize: true\n    /*onSubmit={(values, actions) => {\n        MyImaginaryRestApiCall(user.id, values).then(\n            updatedUser => {\n                actions.setSubmitting(false);\n                updateUser(updatedUser);\n                onClose();\n            },\n            error => {\n                actions.setSubmitting(false);\n                actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n                actions.setStatus({ msg: 'Set some arbitrary status or data' });\n            }\n        );\n    }}\n    */\n    ,\n    validateOnBlur: true\n  }, function (_ref) {\n    var errors = _ref.errors,\n        touched = _ref.touched,\n        isValidating = _ref.isValidating,\n        isSubmitting = _ref.isSubmitting;\n    return React.createElement(Form, null, React.createElement(Select, {\n      value: counterparty,\n      onChange: function onChange(e) {\n        return handleCounterpartyChange(e);\n      }\n    }, React.createElement(\"option\", {\n      value: \"\"\n    }, \" Select Counterparty \"), counterpartyList.map(function (value, index) {\n      return React.createElement(\"option\", {\n        key: value + index,\n        value: value\n      }, value);\n    })), React.createElement(Grid, {\n      container: true,\n      spacing: 2\n    }, fields.map(function (field, index) {\n      if (field[2] === '0') {\n        return React.createElement(Grid, {\n          item: true,\n          xs: 6,\n          style: {\n            margin: 2\n          }\n        }, createFormColumns([field]));\n      }\n    })), function () {\n      var extended = fields.filter(function (field) {\n        return field[2] === '1';\n      });\n      return React.createElement(\"div\", null, createFormColumns([extended[0]]), createFormColumns([extended[1], extended[2], extended[3]]), React.createElement(Divider, {\n        dark: true\n      }), createFormColumns([extended[4]]), createFormColumns([extended[5], extended[6]]), createFormColumns([extended[7], extended[8], extended[9]]), createFormColumns([extended[10], extended[11], extended[12]]), createFormColumns([extended[13], extended[14], extended[15]]), React.createElement(Divider, {\n        dark: true\n      }), createFormColumns([extended[16], extended[17]]), createFormColumns([extended[18], extended[19], extended[20]]), createFormColumns([extended[21], extended[22], extended[23]]));\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      disabled: isValidating || isSubmitting\n    }, \" Submit \"));\n  }))));\n}","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/components/newtrade/NewTradeContent.js"],"names":["React","useState","useEffect","Button","Grid","makeStyles","Tabs","Tab","Select","TextField","InputLabel","Divider","useSelector","useDispatch","TabContainer","Eclipse","ErrorMessage","Field","Formik","Form","LoadingOverlay","useStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","customise","marginTop","NewTradeContent","props","classes","fields","counterpartyList","trades_length","isLoading","changeLoading","counterparty","changeCounterparty","dispatch","value","setValue","handleSubmit","result","nameRemoved","filter","index","length","payload","id","type","addFields","tabChange","e","newValue","handleCounterpartyChange","target","createFormColumns","array","map","field","overlay","base","values","actions","setTimeout","console","log","setSubmitting","errors","touched","isValidating","isSubmitting","margin","extended"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {Button, Grid, makeStyles, Tabs, Tab, Select, TextField, InputLabel, Divider} from '@material-ui/core';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { TabContainer } from \"../../utils/tradehelpers\";\nimport {Eclipse} from \"react-loading-io\";\nimport {ErrorMessage, Field, Formik, Form} from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\n/**\n * @constant useStyles\n * hook used for styling\n */\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    customise: {\n        marginTop: 20\n    }\n}));\n\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeContent\n */\n\nexport default function NewTradeContent(props) {\n    const classes = useStyles();\n    const { fields, counterpartyList, trades_length } = props;\n    const [isLoading, changeLoading] = useState(false);\n    const [counterparty, changeCounterparty] = useState('');\n    const dispatch = useDispatch();\n    const [value, setValue] = useState(0);\n\n\n    /**\n     * @function handleSubmit\n     * @param result\n     * takes fields passed in from the form and appends to 'tradeStates' piece of state\n     */\n    function handleSubmit(result) {\n        const nameRemoved = result.filter((value, index) => {\n            return index !== result.length - 1;\n        });\n        const payload = { id: trades_length, value: nameRemoved };\n        dispatch({ type: 'NEW_TRADE', payload: payload });\n    }\n\n\n    /**\n     * @function addFields\n     * @param addFields\n     * takes the custom fields created in component and appends to NEW_TRADE_FIELDS piece of state\n     */\n    function addFields(addFields) {\n        dispatch({ type: 'APPEND_FIELDS', payload: addFields });\n    }\n\n    /**\n     * @function tabChange\n     * @param e\n     * @param newValue\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n\n    function tabChange(e, newValue) {\n        setValue(newValue);\n    }\n\n    /**\n     * @return\n     * @type Grid\n     * @type TabContainer\n     * @type Tab\n     * @type Tabs\n     * @type div\n     */\n\n    function handleCounterpartyChange(e) {\n        changeCounterparty(e.target.value);\n    }\n    function createFormColumns(array) {\n        return (\n            <div className=\"col\">\n                <div className=\"row\">\n                    {\n                        array.map((field, index) => {\n                            if (field[1] !== 'select') {\n                                return (\n                                    <div>\n                                        <Field name={field[0]}\n                                               key={field[0]}\n                                               render={() => (\n                                                   <TextField label={field[0]}\n                                                              disabled={counterparty === ''}\n                                                              variant=\"outlined\" type={ field[2] }\n                                                   />\n                                               )}\n                                        />\n                                        <ErrorMessage name={field[0]} />\n                                    </div>\n                                );\n                            }\n                            else {\n                                return (\n                                    <Field name={field[0]}\n                                           key={field[0]}\n                                           render={() => (\n                                               <div>\n                                                   <InputLabel\n                                                       htmlFor={field[0]}> {field[0]} </InputLabel>\n                                                   <Select name={field[0]}>\n                                                       <option value=\"DEFAULT\"> Default</option>\n                                                   </Select>\n                                                   <ErrorMessage name={field[0]}/>\n                                               </div>\n                                           )}\n                                    />\n                                )\n                            }\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className={ classes.root }>\n            <div>\n                <LoadingOverlay\n                    active={ false }\n                    spinner={ <Eclipse />}\n                    styles={{\n                        overlay: (base) => ({\n                            ...base,\n                            background: 'rgba(255, 255, 255, 0.1)'\n                        })\n                    }}\n                >\n                    <Formik\n                        initialValues={ [] }\n                        onSubmit={ (values, actions)=> {\n                            changeLoading(true);\n                            setTimeout(() => {\n                                changeLoading(false);\n                            }, 2000);\n                            console.log(values);\n                            actions.setSubmitting(false);\n                        }}\n                        enableReinitialize={ true }\n                        /*onSubmit={(values, actions) => {\n                            MyImaginaryRestApiCall(user.id, values).then(\n                                updatedUser => {\n                                    actions.setSubmitting(false);\n                                    updateUser(updatedUser);\n                                    onClose();\n                                },\n                                error => {\n                                    actions.setSubmitting(false);\n                                    actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n                                    actions.setStatus({ msg: 'Set some arbitrary status or data' });\n                                }\n                            );\n                        }}\n                        */\n                        validateOnBlur={ true }\n                    >\n                        {({ errors, touched, isValidating, isSubmitting }) => (\n                            <Form>\n                                <Select value={ counterparty } onChange={ e => handleCounterpartyChange(e) } >\n                                    <option value=\"\"> Select Counterparty </option>\n                                    { counterpartyList.map((value, index) => {\n                                        return (\n                                            <option key={ value + index } value={ value }>\n                                                {value}\n                                            </option>\n                                        );\n                                    })}\n                                </Select>\n                                <Grid container spacing={ 2 }>\n                                {\n                                    fields.map((field, index) => {\n                                        if (field[2] === '0') {\n                                            return (\n                                                <Grid item xs={ 6 } style={{ margin: 2 }}>\n                                                    {createFormColumns([field])}\n                                                </Grid>\n                                            )\n                                        }\n                                    })\n                                }\n                                </Grid>\n                                {\n                                    () => {\n                                        const extended = fields.filter((field) => {\n                                            return field[2] === '1';\n                                        });\n                                        return (\n                                            <div>\n                                                { createFormColumns([extended[0]]) }\n                                                { createFormColumns([extended[1], extended[2], extended[3]])}\n                                                <Divider dark={ true } />\n                                                { createFormColumns([extended[4]])}\n                                                { createFormColumns([extended[5], extended[6]])}\n                                                { createFormColumns([extended[7], extended[8], extended[9]])}\n                                                { createFormColumns([extended[10], extended[11], extended[12]])}\n                                                { createFormColumns([extended[13], extended[14], extended[15]])}\n                                                <Divider dark={ true } />\n                                                { createFormColumns([extended[16], extended[17]])}\n                                                { createFormColumns([extended[18], extended[19], extended[20]])}\n                                                { createFormColumns([extended[21], extended[22], extended[23]])}\n                                            </div>\n                                        )\n                                    }\n                                }\n                                <Button variant=\"contained\" type=\"submit\" disabled={ isValidating || isSubmitting }> Submit </Button>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </LoadingOverlay>\n            </div>\n        </div>\n    );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}