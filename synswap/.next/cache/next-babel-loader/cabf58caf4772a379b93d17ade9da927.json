{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { Grid } from 'react-virtualized';\nexport default function Table(props) {\n  var data = props.data;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      display = _useState2[0],\n      setDisplay = _useState2[1];\n\n  useEffect(function () {\n    setDisplay(formatData());\n  });\n\n  function pullStuff(obj, param) {\n    var getKeys = function getKeys(obj) {\n      if (typeof obj !== 'object') {\n        throw new Error('Invalid JSON');\n      }\n\n      var result = [];\n\n      var topKeys = _Object$keys(obj);\n\n      for (var i = 0; i < topKeys.length; i++) {\n        var topKey = topKeys[i];\n        var topEntry = obj[topKey];\n\n        if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n          result.push(topKey);\n        } else if (_Array$isArray(topEntry)) {\n          var arrayEntry = void 0;\n\n          for (arrayEntry in topEntry) {\n            result.push(getKeys(arrayEntry, true));\n          }\n        } else {\n          result.push(getKeys(topEntry));\n        }\n      }\n\n      return result.flat(Infinity);\n    };\n\n    var getValues = function getValues(obj) {\n      if (typeof obj !== 'object') {\n        throw new Error('Invalid JSON');\n      }\n\n      var result = [];\n\n      var topValues = _Object$values(obj);\n\n      for (var i = 0; i < topValues.length; i++) {\n        var topValue = topValues[i];\n\n        if (typeof topValue === 'string' || typeof topValue === 'number') {\n          result.push(topValue);\n        } else if (_Array$isArray(topValue)) {\n          var arrayEntry = void 0;\n\n          for (arrayEntry in topValue) {\n            result.push(getValues(arrayEntry, true));\n          }\n        } else {\n          result.push(getValues(topValue));\n        }\n      }\n\n      return result.flat(Infinity);\n    };\n\n    switch (param) {\n      case 'keys':\n        return getKeys(obj, false);\n\n      case 'values':\n        return getValues(obj, false);\n\n      default:\n        return;\n    }\n  }\n\n  var formatData = function formatData() {\n    var columns = _Object$keys(data[0]);\n\n    var result = [];\n    result.push(columns);\n\n    for (var i = 0; i < data.length; i++) {\n      result.push(pullStuff(data[i], 'values'));\n    }\n\n    return result;\n  };\n\n  var test = function test() {\n    var result = [];\n\n    for (var i = 0; i < 100; i++) {\n      var row = [];\n      var count = 0;\n\n      for (var _i = 0; _i < 20; _i++) {\n        row.push(count);\n        count++;\n      }\n\n      result.push(row);\n    }\n\n    return result;\n  };\n\n  function cellRenderer(_ref) {\n    var columnIndex = _ref.columnIndex,\n        key = _ref.key,\n        rowIndex = _ref.rowIndex,\n        style = _ref.style;\n    return React.createElement(\"div\", {\n      key: key,\n      style: style\n    }, display[rowIndex][columnIndex]);\n  }\n\n  return React.createElement(Grid, {\n    cellRenderer: cellRenderer,\n    columnCount: display[0].length,\n    columnWidth: 1800 / display[0].length,\n    height: 600,\n    rowCount: display.length,\n    rowHeight: 30,\n    width: 1000,\n    style: {\n      marginLeft: 20\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/components/Table.js"],"names":["React","useEffect","useState","Grid","Table","props","data","display","setDisplay","formatData","pullStuff","obj","param","getKeys","Error","result","topKeys","i","length","topKey","topEntry","push","arrayEntry","flat","Infinity","getValues","topValues","topValue","columns","test","row","count","cellRenderer","columnIndex","key","rowIndex","style","marginLeft"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Grid } from 'react-virtualized';\n\nexport default function Table(props) {\n    const { data } = props;\n    const [display, setDisplay] = useState([]);\n\n    useEffect(() => {\n        setDisplay(formatData());\n    });\n    function pullStuff(obj, param) {\n        const getKeys = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            const topKeys = Object.keys(obj);\n            for (let i = 0; i < topKeys.length; i++) {\n                let topKey = topKeys[i];\n                let topEntry = obj[topKey];\n                if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n                    result.push(topKey);\n                }\n                else if (Array.isArray(topEntry)) {\n                    let arrayEntry;\n                    for (arrayEntry in topEntry) {\n                        result.push(getKeys(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getKeys(topEntry))\n                }\n            }\n            return result.flat(Infinity);\n        };\n\n        const getValues = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            let topValues = Object.values(obj);\n            for (let i = 0; i < topValues.length; i++) {\n                let topValue = topValues[i];\n                if (typeof topValue === 'string' || typeof topValue === 'number') {\n                    result.push(topValue);\n                }\n                else if (Array.isArray(topValue)) {\n                    let arrayEntry;\n                    for (arrayEntry in topValue) {\n                        result.push(getValues(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getValues(topValue))\n                }\n            }\n            return result.flat(Infinity);\n        };\n        switch (param) {\n            case 'keys':\n                return getKeys(obj, false);\n            case 'values':\n                return getValues(obj, false);\n            default:\n                return;\n        }\n    }\n\n    const formatData = () => {\n        const columns = Object.keys(data[0]);\n        const result = [];\n        result.push(columns);\n        for (let i = 0; i < data.length; i++) {\n            result.push(pullStuff(data[i], 'values'))\n        }\n        return result;\n    };\n\n    const test = () => {\n        let result = [];\n        for (let i = 0; i < 100; i++) {\n            let row = [];\n            let count = 0;\n            for (let i = 0; i < 20; i++) {\n                row.push(count);\n                count++;\n            }\n            result.push(row);\n        }\n        return result;\n    };\n\n\n    function cellRenderer ({ columnIndex, key, rowIndex, style }) {\n        return (\n            <div\n                key={key}\n                style={ style }\n            >\n                { display[rowIndex][columnIndex] }\n            </div>\n        )\n    }\n    return (\n        <Grid\n            cellRenderer={cellRenderer}\n            columnCount={display[0].length}\n            columnWidth={ 1800 / display[0].length }\n            height={600}\n            rowCount={display.length}\n            rowHeight={30}\n            width={1000}\n            style={{ marginLeft: 20 }}\n        />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}