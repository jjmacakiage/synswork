{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { Button, Grid, makeStyles, TextField } from \"@material-ui/core\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1)\n    },\n    button: {\n      marginLeft: theme.spacing(1)\n    }\n  };\n});\nexport default function NewTradeForm(props) {\n  var classes = useStyles();\n  var onSubmit = props.onSubmit,\n      fieldList = props.fieldList;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      tradeName = _useState2[0],\n      changeName = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fields = _useState4[0],\n      setFields = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isError = _useState6[0],\n      changeError = _useState6[1];\n\n  var temp = [];\n\n  var _useState7 = useState({\n    changes: temp\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      RESULT = _useState8[0],\n      setRESULT = _useState8[1];\n\n  useEffect(function () {\n    generateGrids();\n    temp = resultInit();\n  }, [fieldList]);\n\n  function resultInit() {\n    var result = [];\n\n    for (var i = 0; i < fieldList.length; i++) {\n      var _value = '';\n      result.push(_value);\n    }\n\n    return result;\n  }\n\n  function handleChange(e, index) {\n    var newState = _objectSpread({}, RESULT, {\n      changes: RESULT.changes[index] = e.target.value\n    });\n\n    setRESULT(newState);\n  }\n\n  function submitForm() {\n    for (var i = 0; i < RESULT.changes.length; i++) {\n      if (RESULT.changes[i] === '' || RESULT.changes[i] === null) {\n        changeError(true);\n        return;\n      }\n    }\n\n    changeError(false);\n\n    if (isError === false) {\n      var _final = _toConsumableArray(RESULT.changes);\n\n      _final.push(tradeName);\n\n      onSubmit(_final);\n    }\n  }\n\n  function generateGrids() {\n    setFields(fieldList.map(function (label, index) {\n      return React.createElement(Grid, {\n        item: true,\n        key: index\n      }, React.createElement(TextField, {\n        id: label.replace(/ /g, \"-\"),\n        label: label,\n        disabled: props.isDisabled,\n        className: classes.textField,\n        value: RESULT.changes[index],\n        onChange: function onChange(e) {\n          return handleChange(e, index);\n        },\n        margin: \"normal\",\n        variant: \"outlined\",\n        error: isError && value === ''\n      }));\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 2\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, fields.slice(0, fields.length / 2)), React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, fields.slice(fields.length / 2, fields.length)), React.createElement(Grid, {\n    item: true,\n    xs: 3\n  }, React.createElement(TextField, {\n    id: \"trade-name\",\n    key: -1,\n    label: \"Name\",\n    className: classes.textField,\n    value: tradeName,\n    onChange: function onChange(e) {\n      return changeName(e.target.value);\n    },\n    margin: \"normal\",\n    variant: \"outlined\"\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 3\n  }, React.createElement(Button, {\n    onClick: submitForm,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button\n  }, \"Submit New Trade\"))));\n}","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/components/newtrade/NewTradeForm.js"],"names":["React","useEffect","useState","Button","Grid","makeStyles","TextField","useStyles","theme","root","flexGrow","textField","marginLeft","spacing","marginRight","button","NewTradeForm","props","classes","onSubmit","fieldList","tradeName","changeName","fields","setFields","isError","changeError","temp","changes","RESULT","setRESULT","generateGrids","resultInit","result","i","length","value","push","handleChange","e","index","newState","target","submitForm","final","map","label","replace","isDisabled","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Grid, makeStyles, TextField } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    button: {\n        marginLeft: theme.spacing(1)\n    }\n}));\n\n\nexport default function NewTradeForm(props) {\n    const classes = useStyles();\n    const { onSubmit, fieldList } = props;\n    const [tradeName, changeName] = useState('');\n    const [fields, setFields] = useState([]);\n    const [isError, changeError] = useState(false);\n    let temp = [];\n    const [RESULT, setRESULT] = useState({ changes: temp });\n\n    useEffect(() => {\n        generateGrids();\n        temp = resultInit();\n    }, [fieldList]);\n\n    function resultInit() {\n        const result = [];\n        for (let i = 0; i < fieldList.length; i++) {\n            let value = '';\n            result.push(value);\n        }\n        return result;\n    }\n\n    function handleChange(e, index) {\n        const newState = { ...RESULT, changes: RESULT.changes[index] = e.target.value };\n        setRESULT(newState);\n\n    }\n\n    function submitForm() {\n        for (let i = 0; i < RESULT.changes.length; i++) {\n            if (RESULT.changes[i] === '' || RESULT.changes[i] === null) {\n                changeError(true);\n                return;\n            }\n        }\n        changeError(false);\n        if (isError === false) {\n            const final = [...RESULT.changes];\n            final.push(tradeName);\n            onSubmit(final);\n        }\n    }\n    function generateGrids() {\n        setFields(fieldList.map((label, index) => {\n                return (\n                    <Grid item key={ index }>\n                        <TextField\n                            id={ label.replace(/ /g,\"-\") }\n                            label={ label }\n                            disabled={ props.isDisabled }\n                            className={ classes.textField }\n                            value={ RESULT.changes[index] }\n                            onChange={ e => handleChange(e, index) }\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            error={ isError && value === ''}\n                        />\n                    </Grid>\n                );\n            }\n        ));\n\n    }\n\n\n\n    return (\n        <div className={ classes.root }>\n            <Grid container spacing={ 2 }>\n                <Grid item xs={ 6 }>\n                    { fields.slice(0, fields.length / 2) }\n                </Grid>\n                <Grid item xs={ 6 }>\n                    { fields.slice(fields.length / 2, fields.length) }\n                </Grid>\n                <Grid item xs={ 3 }>\n                    <TextField\n                        id=\"trade-name\"\n                        key={ -1 }\n                        label=\"Name\"\n                        className={ classes.textField }\n                        value={ tradeName }\n                        onChange={ e => changeName(e.target.value) }\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={ 3 }>\n                    <Button\n                        onClick={ submitForm }\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={ classes.button }\n                    >\n                        Submit New Trade\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}