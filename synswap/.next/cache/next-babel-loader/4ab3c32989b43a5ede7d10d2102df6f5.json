{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React, { useState } from 'react';\nimport { ErrorMessage, Formik, Form, Field } from 'formik';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { Ball } from 'react-loading-io';\nimport * as Yup from 'yup';\nimport { TextField, Select, InputLabel } from \"@material-ui/core\";\n\nvar NewTradeForm = function NewTradeForm(props) {\n  //const validationSchema = useSelector(state => state.NewTradeReducer.validationSchema);\n  var counterpartyList = props.counterpartyList,\n      initialValues = props.initialValues,\n      fields = props.fields;\n  return React.createElement(LoadingOverlay, {\n    active: isLoading,\n    spinner: React.createElement(Ball, null),\n    styles: {\n      overlay: function overlay(base) {\n        return _objectSpread({}, base, {\n          background: 'rgba(255, 255, 255, 0.1)'\n        });\n      }\n    }\n  }, React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: function onSubmit(values, actions) {\n      changeLoading(true);\n      setTimeout(function () {\n        changeLoading(false);\n      }, 2000);\n      console.log(values);\n      actions.setSubmitting(false);\n    },\n    enableReinitialize: true\n    /*onSubmit={(values, actions) => {\n        MyImaginaryRestApiCall(user.id, values).then(\n            updatedUser => {\n                actions.setSubmitting(false);\n                updateUser(updatedUser);\n                onClose();\n            },\n            error => {\n                actions.setSubmitting(false);\n                actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n                actions.setStatus({ msg: 'Set some arbitrary status or data' });\n            }\n        );\n    }}\n    */\n    ,\n    validationSchema: testSchema,\n    validateOnBlur: true\n  }, function (_ref) {\n    var errors = _ref.errors,\n        touched = _ref.touched,\n        isValidating = _ref.isValidating,\n        isSubmitting = _ref.isSubmitting;\n    return React.createElement(Form, null, React.createElement(Select, {\n      value: counterparty,\n      onChange: function onChange(e) {\n        return handleCounterpartyChange(e);\n      }\n    }, React.createElement(\"option\", {\n      value: \"\"\n    }, \" Select Counterparty \"), counterpartyList.map(function (value, index) {\n      return React.createElement(\"option\", {\n        key: value + index,\n        value: value\n      }, value);\n    })), fields.map(function (field, index) {\n      switch (field[1]) {\n        case 'text':\n          return React.createElement(\"div\", {\n            className: \"col\",\n            key: field[0] + index\n          }, React.createElement(Field, {\n            name: field[0],\n            render: function render() {\n              return React.createElement(TextField, {\n                label: field[0],\n                disabled: counterparty === '',\n                variant: \"outlined\"\n              });\n            }\n          }), React.createElement(ErrorMessage, {\n            name: field[0]\n          }));\n\n        case 'select':\n          return React.createElement(Field, {\n            name: field[0],\n            render: function render() {\n              return React.createElement(\"div\", null, React.createElement(InputLabel, {\n                htmlFor: field[0]\n              }, \" \", field[0], \" \"), React.createElement(Select, {\n                name: field[0]\n              }, React.createElement(\"option\", {\n                value: \"DEFAULT\"\n              }, \" Default \")), React.createElement(ErrorMessage, {\n                name: field[0]\n              }));\n            }\n          });\n\n        case 'number':\n          return React.createElement(\"div\", {\n            className: \"col\",\n            key: field[0] + index\n          }, React.createElement(Field, {\n            name: field[0],\n            render: function render() {\n              return React.createElement(TextField, {\n                label: field[0],\n                disabled: counterparty === '',\n                variant: \"outlined\",\n                type: \"number\"\n              });\n            }\n          }), React.createElement(ErrorMessage, {\n            name: field[0]\n          }));\n\n        case 'date':\n          return React.createElement(\"div\", {\n            className: \"col\",\n            key: field[0] + index\n          }, React.createElement(Field, {\n            name: field[0],\n            render: function render() {\n              return React.createElement(TextField, {\n                label: field[0],\n                disabled: counterparty === '',\n                variant: \"outlined\",\n                type: \"date\"\n              });\n            }\n          }), React.createElement(ErrorMessage, {\n            name: field[0]\n          }));\n\n        default:\n          return;\n      }\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isValidating || isSubmitting\n    }, \" Submit \"));\n  }));\n};\n\nexport default NewTradeForm;","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/components/newtrade/Form.js"],"names":["React","useState","ErrorMessage","Formik","Form","Field","LoadingOverlay","Ball","Yup","TextField","Select","InputLabel","NewTradeForm","props","counterpartyList","initialValues","fields","isLoading","overlay","base","background","values","actions","changeLoading","setTimeout","console","log","setSubmitting","testSchema","errors","touched","isValidating","isSubmitting","counterparty","e","handleCounterpartyChange","map","value","index","field"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { ErrorMessage, Formik, Form, Field } from 'formik';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { Ball } from 'react-loading-io';\nimport * as Yup from 'yup';\nimport {TextField, Select, InputLabel} from \"@material-ui/core\";\n\nconst NewTradeForm = props => {\n    //const validationSchema = useSelector(state => state.NewTradeReducer.validationSchema);\n    const { counterpartyList, initialValues, fields } = props;\n\n\n\n\n    return (\n        <LoadingOverlay\n            active={ isLoading }\n            spinner={ <Ball />}\n            styles={{\n                overlay: (base) => ({\n                    ...base,\n                    background: 'rgba(255, 255, 255, 0.1)'\n                })\n            }}\n        >\n            <Formik\n                initialValues={ initialValues }\n                onSubmit={ (values, actions)=> {\n                    changeLoading(true);\n                    setTimeout(() => {\n                        changeLoading(false);\n                    }, 2000);\n                    console.log(values);\n                    actions.setSubmitting(false);\n                }}\n                enableReinitialize={ true }\n                /*onSubmit={(values, actions) => {\n                    MyImaginaryRestApiCall(user.id, values).then(\n                        updatedUser => {\n                            actions.setSubmitting(false);\n                            updateUser(updatedUser);\n                            onClose();\n                        },\n                        error => {\n                            actions.setSubmitting(false);\n                            actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n                            actions.setStatus({ msg: 'Set some arbitrary status or data' });\n                        }\n                    );\n                }}\n                */\n                validationSchema={ testSchema }\n                validateOnBlur={ true }\n                >\n                {({ errors, touched, isValidating, isSubmitting }) => (\n                    <Form>\n                        <Select value={ counterparty } onChange={ e => handleCounterpartyChange(e) } >\n                            <option value=\"\"> Select Counterparty </option>\n                            { counterpartyList.map((value, index) => {\n                                return (\n                                   <option key={ value + index } value={ value }>\n                                        {value}\n                                   </option>\n                                );\n                            })}\n                        </Select>\n                        {\n                            fields.map((field, index) => {\n                                switch(field[1]){\n                                    case 'text':\n                                        return (\n                                            <div className=\"col\" key={ field[0] + index }>\n                                                <Field name={ field[0] }\n                                                       render={() => (\n                                                           <TextField label={ field[0] } disabled={ counterparty === ''} variant=\"outlined\"/>\n                                                       )}\n                                                />\n                                                <ErrorMessage name={ field[0] } />\n                                            </div>\n                                        );\n                                    case 'select':\n                                        return (\n                                            <Field name={ field[0]}\n                                                   render={() => (\n                                                       <div>\n                                                           <InputLabel htmlFor={ field[0] }> { field[0] } </InputLabel>\n                                                           <Select name={ field[0]} >\n                                                               <option value=\"DEFAULT\"> Default </option>\n                                                           </Select>\n                                                           <ErrorMessage name={ field[0] } />\n                                                       </div>\n                                                   )}\n                                            />\n                                        );\n                                    case 'number':\n                                        return (\n                                            <div className=\"col\" key={ field[0] + index }>\n                                                <Field name={ field[0] }\n                                                       render={() => (\n                                                           <TextField label={ field[0] } disabled={ counterparty === ''} variant=\"outlined\" type=\"number\"/>\n                                                       )}\n                                                />\n                                                <ErrorMessage name={ field[0] } />\n                                            </div>\n                                        );\n                                    case 'date':\n                                        return (\n                                            <div className=\"col\" key={ field[0] + index }>\n                                                <Field name={ field[0] }\n                                                       render={() => (\n                                                           <TextField label={ field[0] } disabled={ counterparty === ''} variant=\"outlined\" type=\"date\"/>\n                                                       )}\n                                                />\n                                                <ErrorMessage name={ field[0] } />\n                                            </div>\n                                        );\n                                    default:\n                                        return;\n                                }\n\n                            })\n                        }\n                        <button type=\"submit\" disabled={ isValidating || isSubmitting }> Submit </button>\n                    </Form>\n                )}\n            </Formik>\n        </LoadingOverlay>\n    )\n};\nexport default NewTradeForm;\n"]},"metadata":{},"sourceType":"module"}