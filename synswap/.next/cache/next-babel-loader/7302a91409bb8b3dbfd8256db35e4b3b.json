{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { login } from '../utils/auth';\nimport LoginForm from '../components/login/LoginForm';\nexport default function Login() {\n  var _useState = useState({\n    username: '',\n    error: '',\n    password: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      userData = _useState2[0],\n      setUserData = _useState2[1];\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(event) {\n      var username, url, response, _ref, token, error, _response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              username = userData.username;\n              url = '/api/login';\n              _context.prev = 3;\n              _context.next = 6;\n              return fetch(url, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: _JSON$stringify({\n                  username: username\n                })\n              });\n\n            case 6:\n              response = _context.sent;\n\n              if (!(response.status === 200)) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 10;\n              return response.json();\n\n            case 10:\n              _ref = _context.sent;\n              token = _ref.token;\n              _context.next = 14;\n              return login({\n                token: token\n              });\n\n            case 14:\n              _context.next = 20;\n              break;\n\n            case 16:\n              console.log('Login failed.'); // https://github.com/developit/unfetch#caveats\n\n              error = new Error(response.statusText);\n              error.response = response;\n              throw error;\n\n            case 20:\n              _context.next = 27;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](3);\n              console.error('You have an error in your code or there are Network issues.', _context.t0);\n              _response = _context.t0.response;\n              setUserData(_Object$assign({}, userData, {\n                error: _response ? _response.statusText : _context.t0.message\n              }));\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 22]]);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"login\"\n  }, React.createElement(LoginForm, {\n    onClick: function onClick(e) {\n      return handleSubmit(e);\n    },\n    username: userData.username,\n    changeUsername: function changeUsername(e) {\n      var newUsername = e.target.value;\n      setUserData({\n        username: newUsername,\n        error: userData.error,\n        password: userData.password\n      });\n    },\n    changePassword: function changePassword(e) {\n      var newPassword = e.target.value;\n      setUserData({\n        username: userData.username,\n        error: userData.error,\n        password: newPassword\n      });\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/pages/Login.js"],"names":["React","useState","fetch","login","LoginForm","Login","username","error","password","userData","setUserData","handleSubmit","event","preventDefault","url","method","headers","body","response","status","json","token","console","log","Error","statusText","message","e","newUsername","target","value","newPassword"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport { login } from '../utils/auth'\nimport LoginForm from '../components/login/LoginForm';\n\nexport default function Login () {\n    const [userData, setUserData] = useState({ username: '', error: '' , password: ''});\n\n    async function handleSubmit (event) {\n        event.preventDefault();\n\n        const username = userData.username;\n        const url = '/api/login';\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ username })\n            })\n            if (response.status === 200) {\n                const { token } = await response.json()\n                await login({ token });\n            } else {\n                console.log('Login failed.')\n                // https://github.com/developit/unfetch#caveats\n                let error = new Error(response.statusText)\n                error.response = response\n                throw error\n            }\n        } catch (error) {\n            console.error(\n                'You have an error in your code or there are Network issues.',\n                error\n            )\n\n            const { response } = error\n            setUserData(\n                Object.assign({}, userData, {\n                    error: response ? response.statusText : error.message\n                })\n            )\n        }\n    }\n\n    return (\n        <div className='login'>\n           <LoginForm\n               onClick={ e => handleSubmit(e) }\n               username={ userData.username }\n               changeUsername={ e => { const newUsername = e.target.value;  setUserData({ username: newUsername, error: userData.error, password: userData.password}) } }\n               changePassword={ e => { const newPassword = e.target.value;  setUserData({ username: userData.username, error: userData.error, password: newPassword}) } }\n           />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}