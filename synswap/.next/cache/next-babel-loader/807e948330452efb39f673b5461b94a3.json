{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Grid, makeStyles, Tabs, Tab, Select, TextField, MenuItem, Divider, Typography } from '@material-ui/core';\nimport { Eclipse } from \"react-loading-io\";\nimport { ErrorMessage, Field, Formik, Form } from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { TabContainer } from \"../../utils/tradehelpers\";\n/**\r\n * @constant useStyles\r\n * hook used for styling\r\n */\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper\n    },\n    customise: {\n      marginTop: 20\n    }\n  };\n});\n/**\r\n * @class NewTradeContent\r\n * Contains the forms for creating a NewTrade\r\n * Dependencies used:\r\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\r\n * Custom Components used:\r\n * @class NewTradeContent\r\n */\n\nexport default function NewTradeContent(props) {\n  var classes = useStyles();\n  var fields = props.fields,\n      counterpartyList = props.counterpartyList,\n      trades_length = props.trades_length,\n      schema = props.schema,\n      validationFunctions = props.validationFunctions;\n  var IRS = schema.IRS;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      changeLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      counterparty = _useState4[0],\n      changeCounterparty = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  var irsSchema = function irsSchema(values) {\n    var generateSchema = function generateSchema(object, values) {\n      var keys = _Object$keys(object);\n\n      var valueCount = 0;\n      var result = {};\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var obj = object[key];\n\n        if (typeof obj === 'string' || typeof obj === 'number') {\n          result = _objectSpread({}, result, _defineProperty({}, key, values[valueCount]));\n          valueCount++;\n        } else {\n          result = _objectSpread({}, result, _defineProperty({}, key, generateSchema(obj, values.slice(valueCount, valueCount + _Object$keys(object).length))));\n          valueCount = valueCount + _Object$keys(object).length;\n        }\n      }\n\n      return result;\n    };\n\n    return generateSchema(IRS, values);\n  };\n  /**\r\n   * @function handleSubmit\r\n   * @param result\r\n   * takes fields passed in from the form and sends to api\r\n   */\n\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(result) {\n      var url;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // TODO: Below using fixed user id for now. Can change this once we add user registration, login, auth...\n              url = 'http://localhost:4000/api/traders/1/trades';\n              _context.prev = 1;\n              axios.post(url, {\n                result: result\n              }).then(function (response) {\n                if (response.status === 200) {\n                  console.log(response);\n                  return 'Trade Sent';\n                } else {\n                  console.log('Trade register failed.', response.status);\n                  var error = new Error(response.statusText);\n                  error.response = response;\n                  throw error;\n                }\n              });\n              _context.next = 9;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('You have an error in your code or there are Network issues.', _context.t0);\n              return _context.abrupt(\"return\", _context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 5]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\r\n   * @function addFields\r\n   * @param addFields\r\n   * takes the custom fields created in component and appends to NEW_TRADE_FIELDS piece of state\r\n   */\n\n\n  function addFields(addFields) {\n    dispatch({\n      type: 'APPEND_FIELDS',\n      payload: addFields\n    });\n  }\n  /**\r\n   * @function tabChange\r\n   * @param e\r\n   * @param newValue\r\n   * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\r\n   */\n\n\n  function tabChange(e, newValue) {\n    setValue(newValue);\n  }\n\n  function generateInitial(array, values) {\n    var result = {};\n\n    for (var i = 0; i < array.length; i++) {\n      result = _objectSpread({}, result, _defineProperty({}, array[i][0], values[i]));\n    }\n\n    return result;\n  }\n\n  function handleCounterpartyChange(e) {\n    changeCounterparty(e.target.value);\n  }\n\n  function createFormColumns(array) {\n    return React.createElement(React.Fragment, null, array.map(function (value, index) {\n      if (value[1] !== 'select') {\n        return React.createElement(Grid, {\n          item: true,\n          xs: 4\n        }, React.createElement(Field, {\n          name: value[0],\n          key: value[0],\n          type: value[1],\n          render: function render(_ref2) {\n            var field = _ref2.field,\n                isSubmitting = _ref2.form.isSubmitting;\n            return React.createElement(TextField, _extends({}, field, {\n              label: value[1] === 'date' ? '' : value[0],\n              disabled: counterparty === '' || isSubmitting,\n              variant: \"outlined\",\n              type: value[1],\n              helperText: value[1] === 'date' ? value[0] : ''\n            }));\n          }\n        }), React.createElement(ErrorMessage, {\n          name: value[0],\n          component: \"div\"\n        }));\n      } else {\n        return React.createElement(Grid, {\n          item: true,\n          xs: 4\n        }, React.createElement(Field, {\n          name: value[0],\n          key: value[0],\n          placeholder: value[0],\n          component: \"select\"\n          /*\r\n          render= {({ field, form: { isSubmitting } }) => (\r\n                     <div>\r\n                       <TextField\r\n                           select\r\n                           label={ value[0] }\r\n                           disabled={counterparty === '' || isSubmitting}\r\n                           variant=\"outlined\"\r\n                           type={ value[1] }\r\n                           style={{ width: '100%' }}\r\n                       >\r\n                           <MenuItem value={ value[0] }>\r\n                               Default\r\n                           </MenuItem>\r\n                       </TextField>\r\n                  </div>\r\n               )\r\n          }\r\n           */\n\n        }, value[3].map(function (option, index) {\n          return React.createElement(\"option\", {\n            value: option\n          }, \" \", option, \" \");\n        })), React.createElement(ErrorMessage, {\n          name: value[0],\n          component: \"div\"\n        }));\n      }\n    }));\n  }\n\n  function extendedFields() {\n    var extended = fields.filter(function (field) {\n      return field[2] === '1';\n    });\n\n    var returnExtended = function returnExtended(i) {\n      return extended[i];\n    };\n\n    return React.createElement(Grid, {\n      container: true,\n      spacing: 2\n    }, [[0], [1, 2, 3], [4, 5, 6], [7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19]].map(function (value, index) {\n      var temp = [];\n\n      for (var i = 0; i < value.length; i++) {\n        temp.push(returnExtended(value[i]));\n      }\n\n      return React.createElement(Grid, {\n        item: true,\n        xs: 12\n      }, index === 0 || index === 5 ? React.createElement(Typography, {\n        variant: \"overline\",\n        style: {\n          marginBottom: 20\n        }\n      }, index === 0 ? \"Floating Leg\" : \"Fixed Leg\") : null, React.createElement(Grid, {\n        container: true,\n        spacing: 2\n      }, createFormColumns(temp)));\n    }));\n  }\n  /**\r\n   * @return\r\n   * @type Grid\r\n   * @type TabContainer\r\n   * @type div\r\n   */\n\n\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(\"div\", null, React.createElement(Typography, {\n    variant: \"overline\",\n    style: {\n      marginBottom: 20\n    }\n  }, \" \", counterparty === '' ? 'New Trade' : counterparty), React.createElement(LoadingOverlay, {\n    active: isLoading,\n    spinner: React.createElement(Eclipse, null),\n    styles: {\n      overlay: function overlay(base) {\n        return _objectSpread({}, base, {\n          background: 'rgba(255, 255, 255, 0.1)'\n        });\n      }\n    }\n  }, React.createElement(Formik, {\n    initialValues: generateInitial(fields, new Array(fields.length).fill('')),\n    enableReinitialize: true,\n    onSubmit: function onSubmit(values, actions) {\n      //console.log(irsSchema(Object.values(values)));\n      handleSubmit(IRS);\n      actions.setSubmitting(false);\n    },\n    validateOnBlur: true,\n    render: function render(_ref3) {\n      var errors = _ref3.errors,\n          status = _ref3.status,\n          touched = _ref3.touched,\n          isSubmitting = _ref3.isSubmitting,\n          isValidating = _ref3.isValidating;\n      return React.createElement(Form, null, React.createElement(TextField, {\n        select: true,\n        label: \"Select Counterparty\",\n        disabled: isSubmitting,\n        variant: \"outlined\",\n        type: value[1],\n        value: counterparty,\n        onChange: function onChange(e) {\n          return handleCounterpartyChange(e);\n        },\n        style: {\n          width: '100%',\n          marginBottom: 20\n        }\n      }, counterpartyList.map(function (value, index) {\n        return React.createElement(MenuItem, {\n          key: value + index,\n          value: value\n        }, value);\n      })), React.createElement(Grid, {\n        container: true,\n        spacing: 2\n      }, fields.map(function (field, index) {\n        if (field[2] === '0') {\n          return React.createElement(Grid, {\n            item: true,\n            xs: 6,\n            style: {\n              marginTop: 2,\n              marginBottom: 2\n            }\n          }, createFormColumns([field]));\n        }\n      })), React.createElement(\"div\", {\n        style: {\n          marginTop: 20,\n          marginBottom: 20\n        }\n      }, React.createElement(Divider, null)), extendedFields(), React.createElement(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        disabled: isValidating || isSubmitting || counterparty === '',\n        style: {\n          marginTop: 20\n        }\n      }, \"Submit\"));\n    }\n  }))));\n}","map":{"version":3,"sources":["C:\\Users\\liams\\synswap-web-react\\synswap\\components\\newtrade\\NewTradeContent.js"],"names":["React","useState","useEffect","fetch","axios","useSelector","useDispatch","Button","Grid","makeStyles","Tabs","Tab","Select","TextField","MenuItem","Divider","Typography","Eclipse","ErrorMessage","Field","Formik","Form","LoadingOverlay","TabContainer","useStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","customise","marginTop","NewTradeContent","props","classes","fields","counterpartyList","trades_length","schema","validationFunctions","IRS","isLoading","changeLoading","counterparty","changeCounterparty","dispatch","value","setValue","irsSchema","values","generateSchema","object","keys","valueCount","result","i","length","key","obj","slice","handleSubmit","url","post","then","response","status","console","log","error","Error","statusText","addFields","type","payload","tabChange","e","newValue","generateInitial","array","handleCounterpartyChange","target","createFormColumns","map","index","field","isSubmitting","form","option","extendedFields","extended","filter","returnExtended","temp","push","marginBottom","overlay","base","Array","fill","actions","setSubmitting","errors","touched","isValidating","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {Button, Grid, makeStyles, Tabs, Tab, Select, TextField, MenuItem, Divider, Typography} from '@material-ui/core';\r\nimport {Eclipse} from \"react-loading-io\";\r\nimport {ErrorMessage, Field, Formik, Form} from \"formik\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\n\r\nimport { TabContainer } from \"../../utils/tradehelpers\";\r\n\r\n\r\n\r\n/**\r\n * @constant useStyles\r\n * hook used for styling\r\n */\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    customise: {\r\n        marginTop: 20\r\n    }\r\n}));\r\n\r\n/**\r\n * @class NewTradeContent\r\n * Contains the forms for creating a NewTrade\r\n * Dependencies used:\r\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\r\n * Custom Components used:\r\n * @class NewTradeContent\r\n */\r\n\r\nexport default function NewTradeContent(props) {\r\n    const classes = useStyles();\r\n    const { fields, counterpartyList, trades_length, schema, validationFunctions } = props;\r\n    const { IRS } = schema;\r\n    const [isLoading, changeLoading] = useState(false);\r\n    const [counterparty, changeCounterparty] = useState('');\r\n    const dispatch = useDispatch();\r\n    const [value, setValue] = useState(0);\r\n\r\n    const irsSchema = (values) => {\r\n        const generateSchema = (object, values) => {\r\n            let keys = Object.keys(object);\r\n            let valueCount = 0;\r\n            let result = {};\r\n            for (let i = 0; i < keys.length; i++) {\r\n                let key = keys[i];\r\n                let obj = object[key];\r\n                if (typeof obj === 'string' || typeof obj === 'number') {\r\n                    result = { ...result, [key]: values[valueCount]};\r\n                    valueCount++;\r\n                }\r\n                else {\r\n                    result = { ...result, [key]: generateSchema(obj, values.slice(valueCount, valueCount + Object.keys(object).length))};\r\n                    valueCount = valueCount + Object.keys(object).length\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        return generateSchema(IRS, values)\r\n    };\r\n\r\n    /**\r\n     * @function handleSubmit\r\n     * @param result\r\n     * takes fields passed in from the form and sends to api\r\n     */\r\n    const handleSubmit = async result => {\r\n        // TODO: Below using fixed user id for now. Can change this once we add user registration, login, auth...\r\n        const url = 'http://localhost:4000/api/traders/1/trades';\r\n\r\n        try {\r\n            axios.post(url, {\r\n                result\r\n            })\r\n                .then(function (response) {\r\n                    if (response.status === 200) {\r\n                        console.log(response);\r\n                        return 'Trade Sent';\r\n                    } else {\r\n                        console.log('Trade register failed.', response.status);\r\n                        let error = new Error(response.statusText);\r\n                        error.response = response;\r\n                        throw error\r\n                    }\r\n                });\r\n        } catch (error) {\r\n            console.error(\r\n                'You have an error in your code or there are Network issues.',\r\n                error\r\n            );\r\n            return error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @function addFields\r\n     * @param addFields\r\n     * takes the custom fields created in component and appends to NEW_TRADE_FIELDS piece of state\r\n     */\r\n    function addFields(addFields) {\r\n        dispatch({ type: 'APPEND_FIELDS', payload: addFields });\r\n    }\r\n\r\n    /**\r\n     * @function tabChange\r\n     * @param e\r\n     * @param newValue\r\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\r\n     */\r\n    function tabChange(e, newValue) {\r\n        setValue(newValue);\r\n    }\r\n\r\n    function generateInitial(array, values) {\r\n        let result = {};\r\n        for (let i = 0; i < array.length; i++) {\r\n            result = {...result, [array[i][0]]: values[i]};\r\n        }\r\n        return result;\r\n    }\r\n    function handleCounterpartyChange(e) {\r\n        changeCounterparty(e.target.value);\r\n    }\r\n    function createFormColumns(array) {\r\n        return (\r\n            <>\r\n            {\r\n                array.map((value, index) => {\r\n                    if (value[1] !== 'select') {\r\n                        return (\r\n                            <Grid item xs={ 4 }>\r\n                                <Field name={value[0]}\r\n                                       key={value[0]}\r\n                                       type={ value[1] }\r\n                                       render={({ field, form: { isSubmitting } }) => (\r\n                                           <TextField {...field} label={ (value[1] === 'date') ? '' : value[0]}\r\n                                                      disabled={counterparty === '' || isSubmitting}\r\n                                                      variant=\"outlined\" type={ value[1]}\r\n                                                      helperText={ (value[1] === 'date') ? value[0] : ''}\r\n                                           />\r\n                                       )}\r\n                                />\r\n                                <ErrorMessage name={value[0]} component=\"div\"/>\r\n                            </Grid>\r\n                        );\r\n                    }\r\n                    else {\r\n                        return (\r\n                            <Grid item xs={ 4 }>\r\n                                <Field name={value[0]}\r\n                                       key={value[0]}\r\n                                       placeholder={ value[0] }\r\n                                       component=\"select\"\r\n                                       /*\r\n                                       render= {({ field, form: { isSubmitting } }) => (\r\n\r\n                                                <div>\r\n                                                    <TextField\r\n                                                        select\r\n                                                        label={ value[0] }\r\n                                                        disabled={counterparty === '' || isSubmitting}\r\n                                                        variant=\"outlined\"\r\n                                                        type={ value[1] }\r\n                                                        style={{ width: '100%' }}\r\n                                                    >\r\n                                                        <MenuItem value={ value[0] }>\r\n                                                            Default\r\n                                                        </MenuItem>\r\n                                                    </TextField>\r\n                                               </div>\r\n                                            )\r\n                                       }\r\n                                        */\r\n                                >\r\n                                        {\r\n                                            value[3].map((option, index) => {\r\n                                                return (\r\n                                                    <option value={option}> {option} </option>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Field>\r\n                                    <ErrorMessage name={value[0]} component=\"div\"/>\r\n                            </Grid>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n            </>\r\n        )\r\n    }\r\n    function extendedFields() {\r\n        const extended = fields.filter((field) => {\r\n            return field[2] === '1';\r\n        });\r\n        const returnExtended = i => {\r\n            return extended[i];\r\n        };\r\n        return (\r\n            <Grid container spacing={ 2 }>\r\n                {\r\n                    [[0], [1,2,3], [4,5,6], [7,8], [9,10,11], [12,13,14], [15,16,17], [18,19]].map((value, index) => {\r\n                        const temp = [];\r\n                        for (let i = 0; i < value.length; i++) {\r\n                            temp.push(returnExtended(value[i]));\r\n                        }\r\n                        return (\r\n                            <Grid item xs={ 12 }>\r\n                                { (index === 0 || index === 5) ?\r\n                                    <Typography variant=\"overline\" style={{ marginBottom: 20 }}>\r\n                                        {index === 0 ? \"Floating Leg\" : \"Fixed Leg\"}\r\n                                    </Typography>\r\n                                    : null\r\n                                }\r\n                                <Grid container spacing={ 2 }>\r\n                                    { createFormColumns(temp) }\r\n                                </Grid>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     * @type Grid\r\n     * @type TabContainer\r\n     * @type div\r\n     */\r\n    return (\r\n        <div className={ classes.root }>\r\n            <div>\r\n                <Typography variant=\"overline\" style={{ marginBottom: 20 }}> { (counterparty === '') ? 'New Trade' : counterparty }</Typography>\r\n                <LoadingOverlay\r\n                    active={ isLoading }\r\n                    spinner={ <Eclipse />}\r\n                    styles={{\r\n                        overlay: (base) => ({\r\n                            ...base,\r\n                            background: 'rgba(255, 255, 255, 0.1)'\r\n                        })\r\n                    }}\r\n                >\r\n                    <Formik\r\n                        initialValues={generateInitial(fields, new Array(fields.length).fill(''))}\r\n                        enableReinitialize={ true }\r\n                        onSubmit={(values, actions) => {\r\n                            //console.log(irsSchema(Object.values(values)));\r\n                            handleSubmit(IRS);\r\n                            actions.setSubmitting(false)\r\n                        }}\r\n                        validateOnBlur={ true }\r\n                        render={({ errors, status, touched, isSubmitting, isValidating }) => (\r\n                            <Form>\r\n                                <TextField\r\n                                    select\r\n                                    label=\"Select Counterparty\"\r\n                                    disabled={isSubmitting}\r\n                                    variant=\"outlined\" type={ value[1] }\r\n                                    value={ counterparty }\r\n                                    onChange={ e => handleCounterpartyChange(e) }\r\n                                    style={{ width: '100%', marginBottom: 20 }}\r\n                                >\r\n                                    { counterpartyList.map((value, index) => {\r\n                                        return (\r\n                                            <MenuItem key={ value + index } value={ value }>\r\n                                                {value}\r\n                                            </MenuItem>\r\n                                        );\r\n                                    })}\r\n                                </TextField>\r\n                                <Grid container spacing={ 2 }>\r\n                                {\r\n                                    fields.map((field, index) => {\r\n                                        if (field[2] === '0') {\r\n                                            return (\r\n                                                <Grid item xs={ 6 } style={{ marginTop: 2, marginBottom: 2 }}>\r\n                                                    {createFormColumns([field])}\r\n                                                </Grid>\r\n                                            )\r\n                                        }\r\n                                    })\r\n                                }\r\n                                </Grid>\r\n                                <div style={{ marginTop: 20, marginBottom: 20 }}>\r\n                                    <Divider />\r\n                                </div>\r\n                                { extendedFields() }\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"submit\"\r\n                                    disabled={ isValidating || isSubmitting || counterparty === ''}\r\n                                    style={{ marginTop: 20 }}\r\n                                >\r\n                                    Submit\r\n                                </Button>\r\n                            </Form>\r\n                        )}\r\n                    />\r\n                </LoadingOverlay>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}