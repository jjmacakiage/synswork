{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(req, res) {\n    var _ref2, username, url, response, _ref3, id, error, _response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return req.body;\n\n          case 2:\n            _ref2 = _context.sent;\n            username = _ref2.username;\n            console.log('username', username);\n            url = \"https://api.github.com/users/\".concat(username);\n            _context.prev = 6;\n            _context.next = 9;\n            return fetch(url);\n\n          case 9:\n            response = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 13;\n            return response.json();\n\n          case 13:\n            _ref3 = _context.sent;\n            id = _ref3.id;\n            return _context.abrupt(\"return\", res.status(200).json({\n              token: id\n            }));\n\n          case 18:\n            // https://github.com/developit/unfetch#caveats\n            error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n\n          case 21:\n            _context.next = 27;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](6);\n            _response = _context.t0.response;\n            return _context.abrupt(\"return\", _response ? res.status(_response.status).json({\n              message: _response.statusText\n            }) : res.status(400).json({\n              message: _context.t0.message\n            }));\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 23]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/pages/api/login.js"],"names":["fetch","req","res","body","username","console","log","url","response","ok","json","id","status","token","error","Error","statusText","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcD,GAAG,CAACE,IADlB;;AAAA;AAAA;AACLC,YAAAA,QADK,SACLA,QADK;AAEbC,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AACMG,YAAAA,GAHO,0CAG+BH,QAH/B;AAAA;AAAA;AAAA,mBAMYJ,KAAK,CAACO,GAAD,CANjB;;AAAA;AAMLC,YAAAA,QANK;;AAAA,iBAOPA,QAAQ,CAACC,EAPF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQYD,QAAQ,CAACE,IAAT,EARZ;;AAAA;AAAA;AAQDC,YAAAA,EARC,SAQDA,EARC;AAAA,6CASFT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEG,cAAAA,KAAK,EAAEF;AAAT,aAArB,CATE;;AAAA;AAWT;AACMG,YAAAA,KAZG,GAYK,IAAIC,KAAJ,CAAUP,QAAQ,CAACQ,UAAnB,CAZL;AAaTF,YAAAA,KAAK,CAACN,QAAN,GAAiBA,QAAjB;AAbS,kBAcHM,KAdG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBHN,YAAAA,SAjBG,eAiBHA,QAjBG;AAAA,6CAkBJA,SAAQ,GACXN,GAAG,CAACU,MAAJ,CAAWJ,SAAQ,CAACI,MAApB,EAA4BF,IAA5B,CAAiC;AAAEO,cAAAA,OAAO,EAAET,SAAQ,CAACQ;AAApB,aAAjC,CADW,GAEXd,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEO,cAAAA,OAAO,EAAE,YAAMA;AAAjB,aAArB,CApBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nexport default async (req, res) => {\n  const { username } = await req.body\n  console.log('username', username);\n  const url = `https://api.github.com/users/${username}`;\n\n  try {\n    const response = await fetch(url)\n    if (response.ok) {\n      const { id } = await response.json()\n      return res.status(200).json({ token: id })\n    } else {\n      // https://github.com/developit/unfetch#caveats\n      const error = new Error(response.statusText);\n      error.response = response\n      throw error\n    }\n  } catch (error) {\n    const { response } = error\n    return response\n      ? res.status(response.status).json({ message: response.statusText })\n      : res.status(400).json({ message: error.message })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}