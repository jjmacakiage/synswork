{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\n\nvar TableTwo = function TableTwo(props) {\n  console.log(props.data);\n\n  function formatColumns(columns) {\n    if (columns.length === 0 || columns[0].width) {\n      return columns;\n    }\n\n    var result = [];\n    var width = 1800 / columns.length;\n\n    for (var i = 0; i < columns.length; i++) {\n      var column = columns[i];\n      var object = {\n        title: column,\n        field: column.toString().toLowerCase().replace(\"\\s\", \"\")\n      };\n      result.push(object);\n    }\n\n    return result;\n  }\n\n  function formatRows(rows, columns) {\n    if (rows.length === 0 || !rows[0].length) {\n      return rows;\n    }\n\n    var result = [];\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      var temp = [];\n\n      for (var j = 0; j < row.length; j++) {\n        var dataKey = columns[j].toString().toLowerCase().replace(\"\\s\", \"\");\n        temp.push(_defineProperty({}, dataKey, row[j]));\n      }\n\n      var objectList = temp.reduce(function (result, item) {\n        var key = _Object$keys(item)[0];\n\n        result[key] = item[key];\n        return result;\n      }, {});\n      result.push(objectList);\n    }\n\n    return result;\n  }\n\n  function pullStuff(obj, param) {\n    var getKeys = function getKeys(obj) {\n      if (typeof obj !== 'object') {\n        throw new Error('Invalid JSON');\n      }\n\n      var result = [];\n\n      var topKeys = _Object$keys(obj);\n\n      for (var i = 0; i < topKeys.length; i++) {\n        var topKey = topKeys[i];\n        var topEntry = obj[topKey];\n\n        if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n          result.push(topKey);\n        } else if (_Array$isArray(topEntry)) {\n          var arrayEntry = void 0;\n\n          for (arrayEntry in topEntry) {\n            result.push(getKeys(arrayEntry, true));\n          }\n        } else {\n          result.push(getKeys(topEntry));\n        }\n      }\n\n      return result.flat(Infinity);\n    };\n\n    var getValues = function getValues(obj) {\n      if (typeof obj !== 'object') {\n        throw new Error('Invalid JSON');\n      }\n\n      var result = [];\n\n      var topValues = _Object$values(obj);\n\n      for (var i = 0; i < topValues.length; i++) {\n        var topValue = topValues[i];\n\n        if (typeof topValue === 'string' || typeof topValue === 'number') {\n          result.push(topValue);\n        } else if (_Array$isArray(topValue)) {\n          var arrayEntry = void 0;\n\n          for (arrayEntry in topValue) {\n            result.push(getValues(arrayEntry, true));\n          }\n        } else {\n          result.push(getValues(topValue));\n        }\n      }\n\n      return result.flat(Infinity);\n    };\n\n    switch (param) {\n      case 'keys':\n        return getKeys(obj, false);\n\n      case 'values':\n        return getValues(obj, false);\n\n      default:\n        return;\n    }\n  }\n\n  var data = props.data;\n  var columns = !data.rows ? pullStuff(data[0], 'keys') : data.columns;\n  return React.createElement(MaterialTable, {\n    columns: formatColumns(columns),\n    data: data,\n    options: {\n      filtering: true\n    }\n  });\n};\n\nexport default TableTwo;","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/components/TableTwo.js"],"names":["React","useState","useEffect","MaterialTable","TableTwo","props","console","log","data","formatColumns","columns","length","width","result","i","column","object","title","field","toString","toLowerCase","replace","push","formatRows","rows","row","temp","j","dataKey","objectList","reduce","item","key","pullStuff","obj","param","getKeys","Error","topKeys","topKey","topEntry","arrayEntry","flat","Infinity","getValues","topValues","topValue","filtering"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\n\n\nconst TableTwo = props => {\n\n    console.log(props.data);\n\n    function formatColumns(columns) {\n        if (columns.length === 0 || columns[0].width) {\n            return columns;\n        }\n        let result = [];\n        let width = 1800 / columns.length;\n        for (let i = 0; i < columns.length; i++) {\n            const column = columns[i];\n            const object = {\n                title: column,\n                field: column.toString().toLowerCase().replace(\"\\s\",\"\"),\n            };\n            result.push(object);\n        }\n        return result;\n    }\n    function formatRows(rows, columns) {\n        if (rows.length === 0 || !rows[0].length ){\n            return rows;\n        }\n        let result = [];\n        for (let i = 0; i < rows.length; i++) {\n            let row = rows[i];\n            let temp = [];\n            for (let j = 0; j < row.length; j++) {\n                let dataKey = columns[j].toString().toLowerCase().replace(\"\\s\", \"\");\n                temp.push({ [dataKey]: row[j] });\n            }\n            let objectList = temp.reduce((result, item) => {\n                let key = Object.keys(item)[0];\n                result[key] = item[key];\n                return result;\n            }, {});\n            result.push(objectList);\n        }\n        return result;\n    }\n    function pullStuff(obj, param) {\n        const getKeys = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            const topKeys = Object.keys(obj);\n            for (let i = 0; i < topKeys.length; i++) {\n                let topKey = topKeys[i];\n                let topEntry = obj[topKey];\n                if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n                    result.push(topKey);\n                }\n                else if (Array.isArray(topEntry)) {\n                    let arrayEntry;\n                    for (arrayEntry in topEntry) {\n                        result.push(getKeys(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getKeys(topEntry))\n                }\n            }\n            return result.flat(Infinity);\n        };\n\n        const getValues = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            let topValues = Object.values(obj);\n            for (let i = 0; i < topValues.length; i++) {\n                let topValue = topValues[i];\n                if (typeof topValue === 'string' || typeof topValue === 'number') {\n                    result.push(topValue);\n                }\n                else if (Array.isArray(topValue)) {\n                    let arrayEntry;\n                    for (arrayEntry in topValue) {\n                        result.push(getValues(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getValues(topValue))\n                }\n            }\n            return result.flat(Infinity);\n        };\n        switch (param) {\n            case 'keys':\n                return getKeys(obj, false);\n            case 'values':\n                return getValues(obj, false);\n            default:\n                return;\n        }\n    }\n    const { data } = props;\n    const columns = (!data.rows) ? pullStuff(data[0], 'keys') : data.columns;\n\n    return (\n        <MaterialTable\n            columns={ formatColumns(columns) }\n            data={ data }\n            options={{\n                filtering: true\n            }}\n        />\n    )\n};\n\nexport default TableTwo;\n\n"]},"metadata":{},"sourceType":"module"}