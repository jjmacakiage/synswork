{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Grid, makeStyles, Tabs, Tab, Select, TextField, MenuItem, Divider, Typography } from '@material-ui/core';\nimport { Eclipse } from \"react-loading-io\";\nimport { ErrorMessage, Field, Formik, Form } from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { TabContainer } from \"../../utils/tradehelpers\";\nimport { extractByKey } from \"../../js/new_trade_fields\";\n/**\n * @constant useStyles\n * hook used for styling\n */\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper\n    },\n    customise: {\n      marginTop: 20\n    }\n  };\n});\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeContent\n */\n\nexport default function NewTradeContent(props) {\n  var classes = useStyles();\n  var fields = props.fields,\n      counterpartyList = props.counterpartyList,\n      trades_length = props.trades_length,\n      schema = props.schema,\n      validationFunctions = props.validationFunctions;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      changeLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      counterparty = _useState4[0],\n      changeCounterparty = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n  /**\n   * @function handleSubmit\n   * @param result\n   * takes fields passed in from the form and appends to 'tradeStates' piece of state\n   */\n\n\n  function handleSubmit(result) {\n    var nameRemoved = result.filter(function (value, index) {\n      return index !== result.length - 1;\n    });\n    var payload = {\n      id: trades_length,\n      value: nameRemoved\n    };\n    dispatch({\n      type: 'NEW_TRADE',\n      payload: payload\n    });\n  }\n  /**\n   * @function addFields\n   * @param addFields\n   * takes the custom fields created in component and appends to NEW_TRADE_FIELDS piece of state\n   */\n\n\n  function addFields(addFields) {\n    dispatch({\n      type: 'APPEND_FIELDS',\n      payload: addFields\n    });\n  }\n  /**\n   * @function tabChange\n   * @param e\n   * @param newValue\n   * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n   */\n\n\n  function tabChange(e, newValue) {\n    setValue(newValue);\n  }\n  /**\n   * @return\n   * @type Grid\n   * @type TabContainer\n   * @type div\n   */\n\n\n  function handleCounterpartyChange(e) {\n    changeCounterparty(e.target.value);\n  }\n\n  function createFormColumns(array) {\n    return React.createElement(React.Fragment, null, array.map(function (value, index) {\n      if (value[1] !== 'select') {\n        return React.createElement(Grid, {\n          item: true,\n          xs: 4\n        }, React.createElement(Field, {\n          name: value[0],\n          key: value[0],\n          type: value[1],\n          render: function render(_ref) {\n            var field = _ref.field,\n                isSubmitting = _ref.form.isSubmitting;\n            return React.createElement(TextField, _extends({}, field, {\n              label: value[1] === 'date' ? '' : value[0],\n              disabled: counterparty === '' || isSubmitting,\n              variant: \"outlined\",\n              type: value[1]\n            }));\n          }\n        }), React.createElement(ErrorMessage, {\n          name: value[0]\n        }));\n      } else {\n        return React.createElement(Grid, {\n          item: true,\n          xs: 4\n        }, React.createElement(Field, {\n          name: value[0],\n          key: value[0],\n          render: function render(_ref2) {\n            var field = _ref2.field,\n                isSubmitting = _ref2.form.isSubmitting;\n            return React.createElement(\"div\", null, React.createElement(TextField, {\n              select: true,\n              label: value[0],\n              disabled: counterparty === '' || isSubmitting,\n              variant: \"outlined\",\n              type: value[1],\n              style: {\n                width: '100%'\n              }\n            }, React.createElement(MenuItem, null, \"Default\")), React.createElement(ErrorMessage, {\n              name: value[0]\n            }));\n          }\n        }));\n      }\n    }));\n  }\n\n  function extendedFields() {\n    var extended = fields.filter(function (field) {\n      return field[2] === '1';\n    });\n\n    var returnExtended = function returnExtended(i) {\n      return extended[i];\n    };\n\n    return React.createElement(Grid, {\n      container: true,\n      spacing: 2\n    }, [[0], [1, 2, 3], [4], [5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17], [18, 19, 20], [21, 22, 23]].map(function (value, index) {\n      var temp = [];\n\n      for (var i = 0; i < value.length; i++) {\n        temp.push(returnExtended(value[i]));\n      }\n\n      return React.createElement(Grid, {\n        item: true,\n        xs: 12\n      }, React.createElement(Grid, {\n        container: true,\n        spacing: 2\n      }, createFormColumns(temp)));\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(\"div\", null, React.createElement(Typography, {\n    variant: \"overline\"\n  }, \" New Trade \"), React.createElement(LoadingOverlay, {\n    active: isLoading,\n    spinner: React.createElement(Eclipse, null),\n    styles: {\n      overlay: function overlay(base) {\n        return _objectSpread({}, base, {\n          background: 'rgba(255, 255, 255, 0.1)'\n        });\n      }\n    }\n  }, React.createElement(Formik, {\n    initialValues: function initialValues() {\n      return fields.map(function (field) {\n        return field[0];\n      });\n    },\n    enableReinitialize: true,\n    onSubmit: function onSubmit(values, actions) {\n      var extractByKey = validationFunctions[0];\n      console.log(values);\n      actions.setSubmitting(false);\n    },\n    validateOnBlur: true,\n    render: function render(_ref3) {\n      var errors = _ref3.errors,\n          status = _ref3.status,\n          touched = _ref3.touched,\n          isSubmitting = _ref3.isSubmitting,\n          isValidating = _ref3.isValidating;\n      return React.createElement(Form, null, React.createElement(TextField, {\n        select: true,\n        label: \"Select Counterparty\",\n        disabled: isSubmitting,\n        variant: \"outlined\",\n        type: value[1],\n        onChange: function onChange(e) {\n          return handleCounterpartyChange(e);\n        },\n        style: {\n          width: '100%'\n        }\n      }, counterpartyList.map(function (value, index) {\n        return React.createElement(MenuItem, {\n          key: value + index,\n          value: value\n        }, value);\n      })), React.createElement(Grid, {\n        container: true,\n        spacing: 2\n      }, fields.map(function (field, index) {\n        if (field[2] === '0') {\n          return React.createElement(Grid, {\n            item: true,\n            xs: 6,\n            style: {\n              marginTop: 2,\n              marginBottom: 2\n            }\n          }, createFormColumns([field]));\n        }\n      })), React.createElement(\"div\", {\n        style: {\n          marginTop: 20,\n          marginBottom: 20\n        }\n      }, React.createElement(Divider, null)), extendedFields(), React.createElement(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        disabled: isValidating || isSubmitting,\n        style: {\n          marginTop: 20\n        }\n      }, \"Submit\"));\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/components/newtrade/NewTradeContent.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Button","Grid","makeStyles","Tabs","Tab","Select","TextField","MenuItem","Divider","Typography","Eclipse","ErrorMessage","Field","Formik","Form","LoadingOverlay","TabContainer","extractByKey","useStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","customise","marginTop","NewTradeContent","props","classes","fields","counterpartyList","trades_length","schema","validationFunctions","isLoading","changeLoading","counterparty","changeCounterparty","dispatch","value","setValue","handleSubmit","result","nameRemoved","filter","index","length","payload","id","type","addFields","tabChange","e","newValue","handleCounterpartyChange","target","createFormColumns","array","map","field","isSubmitting","form","width","extendedFields","extended","returnExtended","i","temp","push","overlay","base","values","actions","console","log","setSubmitting","errors","status","touched","isValidating","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {Button, Grid, makeStyles, Tabs, Tab, Select, TextField, MenuItem, Divider, Typography} from '@material-ui/core';\nimport {Eclipse} from \"react-loading-io\";\nimport {ErrorMessage, Field, Formik, Form} from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\n\n\nimport { TabContainer } from \"../../utils/tradehelpers\";\nimport { extractByKey } from \"../../js/new_trade_fields\";\n\n\n/**\n * @constant useStyles\n * hook used for styling\n */\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    customise: {\n        marginTop: 20\n    }\n}));\n\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeContent\n */\n\nexport default function NewTradeContent(props) {\n    const classes = useStyles();\n    const { fields, counterpartyList, trades_length, schema, validationFunctions } = props;\n    const [isLoading, changeLoading] = useState(false);\n    const [counterparty, changeCounterparty] = useState('');\n    const dispatch = useDispatch();\n    const [value, setValue] = useState(0);\n\n\n    /**\n     * @function handleSubmit\n     * @param result\n     * takes fields passed in from the form and appends to 'tradeStates' piece of state\n     */\n    function handleSubmit(result) {\n        const nameRemoved = result.filter((value, index) => {\n            return index !== result.length - 1;\n        });\n        const payload = { id: trades_length, value: nameRemoved };\n        dispatch({ type: 'NEW_TRADE', payload: payload });\n    }\n\n\n    /**\n     * @function addFields\n     * @param addFields\n     * takes the custom fields created in component and appends to NEW_TRADE_FIELDS piece of state\n     */\n    function addFields(addFields) {\n        dispatch({ type: 'APPEND_FIELDS', payload: addFields });\n    }\n\n    /**\n     * @function tabChange\n     * @param e\n     * @param newValue\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n\n    function tabChange(e, newValue) {\n        setValue(newValue);\n    }\n\n    /**\n     * @return\n     * @type Grid\n     * @type TabContainer\n     * @type div\n     */\n\n    function handleCounterpartyChange(e) {\n        changeCounterparty(e.target.value);\n    }\n    function createFormColumns(array) {\n        return (\n            <>\n            {\n                array.map((value, index) => {\n                    if (value[1] !== 'select') {\n                        return (\n                            <Grid item xs={ 4 }>\n                                <Field name={value[0]}\n                                       key={value[0]}\n                                       type={ value[1] }\n                                       render={({ field, form: { isSubmitting } }) => (\n                                           <TextField {...field} label={ (value[1] === 'date') ? '' : value[0]}\n                                                      disabled={counterparty === '' || isSubmitting}\n                                                      variant=\"outlined\" type={ value[1] }\n                                           />\n                                       )}\n                                />\n                                <ErrorMessage name={value[0]} />\n                            </Grid>\n                        );\n                    }\n                    else {\n                        return (\n                            <Grid item xs={ 4 }>\n                                <Field name={value[0]}\n                                       key={value[0]}\n                                       render= {({ field, form: { isSubmitting } }) => (\n                                                <div>\n                                                    <TextField\n                                                        select\n                                                        label={ value[0] }\n                                                        disabled={counterparty === '' || isSubmitting}\n                                                        variant=\"outlined\"\n                                                        type={ value[1] }\n                                                        style={{ width: '100%' }}\n                                                    >\n                                                        <MenuItem>\n                                                            Default\n                                                        </MenuItem>\n                                                    </TextField>\n                                                    <ErrorMessage name={value[0]}/>\n                                               </div>\n                                            )\n                                       }\n                                />\n                            </Grid>\n                        )\n                    }\n                })\n            }\n            </>\n        )\n    }\n    function extendedFields() {\n        const extended = fields.filter((field) => {\n            return field[2] === '1';\n        });\n        const returnExtended = i => {\n            return extended[i];\n        };\n        return (\n            <Grid container spacing={ 2 }>\n                {\n                    [[0], [1,2,3], [4], [5,6], [7,8,9], [10,11,12], [13,14,15], [16,17], [18,19,20], [21,22,23]].map((value, index) => {\n                        const temp = [];\n                        for (let i = 0; i < value.length; i++) {\n                            temp.push(returnExtended(value[i]));\n                        }\n                        return (\n                            <Grid item xs={ 12 }>\n                                <Grid container spacing={ 2 }>\n                                    { createFormColumns(temp) }\n                                </Grid>\n                            </Grid>\n                        )\n                    })\n                }\n            </Grid>\n        );\n    }\n\n    return (\n        <div className={ classes.root }>\n            <div>\n                <Typography variant=\"overline\"> New Trade </Typography>\n                <LoadingOverlay\n                    active={ isLoading }\n                    spinner={ <Eclipse />}\n                    styles={{\n                        overlay: (base) => ({\n                            ...base,\n                            background: 'rgba(255, 255, 255, 0.1)'\n                        })\n                    }}\n                >\n                    <Formik\n                        initialValues={ () => {\n                            return fields.map(field => {\n                                return field[0];\n                            })\n                        } }\n                        enableReinitialize={ true }\n                        onSubmit={(values, actions) => {\n                            const extractByKey = validationFunctions[0];\n                            console.log(values);\n                            actions.setSubmitting(false)\n                        }}\n                        validateOnBlur={ true }\n                        render={({ errors, status, touched, isSubmitting, isValidating }) => (\n                            <Form>\n                                <TextField\n                                    select\n                                    label=\"Select Counterparty\"\n                                    disabled={isSubmitting}\n                                    variant=\"outlined\" type={ value[1] }\n                                    onChange={ e => handleCounterpartyChange(e) }\n                                    style={{ width: '100%'}}\n                                >\n                                    { counterpartyList.map((value, index) => {\n                                        return (\n                                            <MenuItem key={ value + index } value={ value }>\n                                                {value}\n                                            </MenuItem>\n                                        );\n                                    })}\n                                </TextField>\n                                <Grid container spacing={ 2 }>\n                                {\n                                    fields.map((field, index) => {\n                                        if (field[2] === '0') {\n                                            return (\n                                                <Grid item xs={ 6 } style={{ marginTop: 2, marginBottom: 2 }}>\n                                                    {createFormColumns([field])}\n                                                </Grid>\n                                            )\n                                        }\n                                    })\n                                }\n                                </Grid>\n                                <div style={{ marginTop: 20, marginBottom: 20 }}>\n                                    <Divider />\n                                </div>\n                                { extendedFields() }\n                                <Button\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    disabled={ isValidating || isSubmitting }\n                                    style={{ marginTop: 20 }}\n                                >\n                                    Submit\n                                </Button>\n                            </Form>\n                        )}\n                    />\n                </LoadingOverlay>\n            </div>\n        </div>\n    );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}