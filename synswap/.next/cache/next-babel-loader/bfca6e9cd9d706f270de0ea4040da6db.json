{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { Button, Grid, makeStyles, TextField } from \"@material-ui/core\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1)\n    },\n    button: {\n      marginLeft: theme.spacing(1)\n    }\n  };\n});\nexport default function NewTradeForm(props) {\n  var classes = useStyles();\n  var onSubmit = props.onSubmit,\n      fieldList = props.fieldList;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      tradeName = _useState2[0],\n      changeName = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isError = _useState4[0],\n      changeError = _useState4[1];\n\n  var _useState5 = useState({\n    changes: new Array(fieldList.length)\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      RESULT = _useState6[0],\n      setRESULT = _useState6[1];\n\n  function handleChange(e, index) {\n    var newState = _objectSpread({}, RESULT, {\n      changes: RESULT.changes[index] = e.target.value\n    });\n\n    setRESULT(newState);\n    console.log(RESULT.changes);\n  }\n\n  function submitForm() {\n    console.log(RESULT);\n    onSubmit([]);\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 2\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, fieldList.map(function (value, index) {\n    if (index < fieldList.length / 2) {\n      return React.createElement(Grid, {\n        item: true,\n        key: index\n      }, React.createElement(TextField, {\n        id: label.replace(/ /g, \"-\"),\n        label: label,\n        disabled: props.isDisabled,\n        className: classes.textField,\n        value: RESULT[index],\n        onChange: function onChange(e) {\n          return handleChange(e, index);\n        },\n        margin: \"normal\",\n        variant: \"outlined\",\n        error: isError\n      }));\n    } else return null;\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, fieldList.map(function (value, index) {\n    if (index > fieldList.length / 2) {\n      return React.createElement(Grid, {\n        item: true,\n        key: index\n      }, React.createElement(TextField, {\n        id: label.replace(/ /g, \"-\"),\n        label: label,\n        disabled: props.isDisabled,\n        className: classes.textField,\n        value: RESULT[index],\n        onChange: function onChange(e) {\n          return handleChange(e, index);\n        },\n        margin: \"normal\",\n        variant: \"outlined\",\n        error: isError\n      }));\n    } else return null;\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 3\n  }, React.createElement(TextField, {\n    id: \"trade-name\",\n    key: -1,\n    label: \"Name\",\n    className: classes.textField,\n    value: tradeName,\n    onChange: function onChange(e) {\n      return changeName(e.target.value);\n    },\n    margin: \"normal\",\n    variant: \"outlined\"\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 3\n  }, React.createElement(Button, {\n    onClick: submitForm,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button\n  }, \"Submit New Trade\"))));\n}","map":{"version":3,"sources":["/Users/jjmacakiage/dev/synswap-web-react/synswap/components/newtrade/NewTradeForm.js"],"names":["React","useEffect","useState","Button","Grid","makeStyles","TextField","useStyles","theme","root","flexGrow","textField","marginLeft","spacing","marginRight","button","NewTradeForm","props","classes","onSubmit","fieldList","tradeName","changeName","isError","changeError","changes","Array","length","RESULT","setRESULT","handleChange","e","index","newState","target","value","console","log","submitForm","map","label","replace","isDisabled"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Grid, makeStyles, TextField } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    button: {\n        marginLeft: theme.spacing(1)\n    }\n}));\n\n\nexport default function NewTradeForm(props) {\n    const classes = useStyles();\n    const { onSubmit, fieldList } = props;\n    const [tradeName, changeName] = useState('');\n    const [isError, changeError] = useState(false);\n\n    const [RESULT, setRESULT] = useState({ changes: new Array(fieldList.length) });\n\n    function handleChange(e, index) {\n        const newState = { ...RESULT, changes: RESULT.changes[index] = e.target.value };\n        setRESULT(newState);\n        console.log(RESULT.changes)\n    }\n\n    function submitForm() {\n        console.log(RESULT);\n        onSubmit([]);\n    }\n\n    return (\n        <div className={ classes.root }>\n            <Grid container spacing={ 2 }>\n                <Grid item xs={ 6 }>\n                    {\n                        fieldList.map((value, index) => {\n                            if (index < fieldList.length / 2) {\n                                return (\n                                    <Grid item key={ index }>\n                                        <TextField\n                                            id={ label.replace(/ /g,\"-\") }\n                                            label={ label }\n                                            disabled={ props.isDisabled }\n                                            className={ classes.textField }\n                                            value={ RESULT[index] }\n                                            onChange={ e => handleChange(e, index) }\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                            error={ isError }\n                                        />\n                                    </Grid>\n                                );\n                            }\n                            else return null;\n                        })\n                    }\n                </Grid>\n                <Grid item xs={ 6 }>\n                    {\n                        fieldList.map((value, index) => {\n                            if (index > fieldList.length / 2) {\n                                return (\n                                    <Grid item key={ index }>\n                                        <TextField\n                                            id={ label.replace(/ /g,\"-\") }\n                                            label={ label }\n                                            disabled={ props.isDisabled }\n                                            className={ classes.textField }\n                                            value={ RESULT[index] }\n                                            onChange={ e => handleChange(e, index) }\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                            error={ isError }\n                                        />\n                                    </Grid>\n                                );\n                            }\n                            else return null;\n                        })\n                    }\n                </Grid>\n                <Grid item xs={ 3 }>\n                    <TextField\n                        id=\"trade-name\"\n                        key={ -1 }\n                        label=\"Name\"\n                        className={ classes.textField }\n                        value={ tradeName }\n                        onChange={ e => changeName(e.target.value) }\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={ 3 }>\n                    <Button\n                        onClick={ submitForm }\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={ classes.button }\n                    >\n                        Submit New Trade\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}