{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nexport default function fetchCounterpartyList(_x, _x2) {\n  return _fetchCounterpartyList.apply(this, arguments);\n}\n\nfunction _fetchCounterpartyList() {\n  _fetchCounterpartyList = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(currentUser, url) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            axios.post(url).then(function (response) {\n              if (response.status === 200) {\n                console.log(response);\n                dispatch({\n                  type: 'NEW_TRADE',\n                  payload: response.data\n                });\n                return response.data;\n              } else {\n                console.log('Trade register failed.', response.status);\n                var error = new Error(response.statusText);\n                error.response = response;\n                throw error;\n              }\n            });\n            _context.next = 8;\n            break;\n\n          case 4:\n            _context.prev = 4;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('You have an error in your code or there are Network issues.', _context.t0);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 4]]);\n  }));\n  return _fetchCounterpartyList.apply(this, arguments);\n}","map":{"version":3,"sources":["C:\\Users\\liams\\synswap-web-react\\synswap\\utils\\NewTrade\\new_trade_util.js"],"names":["axios","fetchCounterpartyList","currentUser","url","post","then","response","status","console","log","dispatch","type","payload","data","error","Error","statusText"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,wBAA8BC,qBAA9B;AAAA;AAAA;;;;;2BAAe,iBAAqCC,WAArC,EAAkDC,GAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPH,YAAAA,KAAK,CAACI,IAAN,CAAWD,GAAX,EACKE,IADL,CACU,UAAUC,QAAV,EAAoB;AACtB,kBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzBC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAI,gBAAAA,QAAQ,CAAC;AAAEC,kBAAAA,IAAI,EAAE,WAAR;AAAqBC,kBAAAA,OAAO,EAAEN,QAAQ,CAACO;AAAvC,iBAAD,CAAR;AACA,uBAAOP,QAAQ,CAACO,IAAhB;AACH,eAJD,MAIO;AACHL,gBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,QAAQ,CAACC,MAA/C;AACA,oBAAIO,KAAK,GAAG,IAAIC,KAAJ,CAAUT,QAAQ,CAACU,UAAnB,CAAZ;AACAF,gBAAAA,KAAK,CAACR,QAAN,GAAiBA,QAAjB;AACA,sBAAMQ,KAAN;AACH;AACJ,aAZL;AAFO;AAAA;;AAAA;AAAA;AAAA;AAgBPN,YAAAA,OAAO,CAACM,KAAR,CACI,6DADJ;AAhBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from 'axios';\r\n\r\nexport default async function fetchCounterpartyList(currentUser, url) {\r\n    try {\r\n        axios.post(url)\r\n            .then(function (response) {\r\n                if (response.status === 200) {\r\n                    console.log(response);\r\n                    dispatch({ type: 'NEW_TRADE', payload: response.data});\r\n                    return response.data;\r\n                } else {\r\n                    console.log('Trade register failed.', response.status);\r\n                    let error = new Error(response.statusText);\r\n                    error.response = response;\r\n                    throw error\r\n                }\r\n            });\r\n    } catch (error) {\r\n        console.error(\r\n            'You have an error in your code or there are Network issues.',\r\n            error\r\n        );\r\n        return error;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}