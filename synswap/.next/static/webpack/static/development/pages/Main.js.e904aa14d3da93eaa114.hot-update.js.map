{"version":3,"file":"static/webpack/static/development/pages/Main.js.e904aa14d3da93eaa114.hot-update.js","sources":["webpack:///./components/TableTwo.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\nimport * as icons from '@material-ui/icons';\n\nconst TableTwo = props => {\n\n    console.log(props.data);\n\n    function formatColumns(columns) {\n        if (columns.length === 0 || columns[0].width) {\n            return columns;\n        }\n        let result = [];\n        let width = 1800 / columns.length;\n        for (let i = 0; i < columns.length; i++) {\n            const column = columns[i];\n            const object = {\n                title: column,\n                field: column.toString().toLowerCase().replace(\"\\s\",\"\"),\n            };\n            result.push(object);\n        }\n        return result;\n    }\n    function formatRows(rows, columns) {\n        if (rows.length === 0 || !rows[0].length ){\n            return rows;\n        }\n        let result = [];\n        for (let i = 0; i < rows.length; i++) {\n            let row = rows[i];\n            let temp = [];\n            for (let j = 0; j < row.length; j++) {\n                let dataKey = columns[j].toString().toLowerCase().replace(\"\\s\", \"\");\n                temp.push({ [dataKey]: row[j] });\n            }\n            let objectList = temp.reduce((result, item) => {\n                let key = Object.keys(item)[0];\n                result[key] = item[key];\n                return result;\n            }, {});\n            result.push(objectList);\n        }\n        return result;\n    }\n    function pullStuff(obj, param) {\n        const getKeys = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            const topKeys = Object.keys(obj);\n            for (let i = 0; i < topKeys.length; i++) {\n                let topKey = topKeys[i];\n                let topEntry = obj[topKey];\n                if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n                    result.push(topKey);\n                }\n                else if (Array.isArray(topEntry)) {\n                    let arrayEntry;\n                    for (arrayEntry in topEntry) {\n                        result.push(getKeys(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getKeys(topEntry))\n                }\n            }\n            return result.flat(Infinity);\n        };\n\n        const getValues = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            let topValues = Object.values(obj);\n            for (let i = 0; i < topValues.length; i++) {\n                let topValue = topValues[i];\n                if (typeof topValue === 'string' || typeof topValue === 'number') {\n                    result.push(topValue);\n                }\n                else if (Array.isArray(topValue)) {\n                    let arrayEntry;\n                    for (arrayEntry in topValue) {\n                        result.push(getValues(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getValues(topValue))\n                }\n            }\n            return result.flat(Infinity);\n        };\n        switch (param) {\n            case 'keys':\n                return getKeys(obj, false);\n            case 'values':\n                return getValues(obj, false);\n            default:\n                return;\n        }\n    }\n    const { data } = props;\n    const columns = (!data.rows) ? pullStuff(data[0], 'keys') : data.columns;\n\n    return (\n        <MaterialTable\n            columns={ formatColumns(columns) }\n            icons={ icons }\n            data={ data }\n            options={{\n                filtering: true\n            }}\n        />\n    )\n};\n\nexport default TableTwo;\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AAnGA;AAoGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AADA;AAJA;AASA;AACA;AACA;;;;A","sourceRoot":""}