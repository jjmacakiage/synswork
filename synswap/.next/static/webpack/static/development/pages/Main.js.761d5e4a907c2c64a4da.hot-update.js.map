{"version":3,"file":"static/webpack/static/development/pages/Main.js.761d5e4a907c2c64a4da.hot-update.js","sources":["webpack:///./components/newtrade/NewTradeContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {Button, Grid, makeStyles, Tabs, Tab, Select, TextField, InputLabel, Divider, OutlinedInput } from '@material-ui/core';\nimport {Eclipse} from \"react-loading-io\";\nimport {ErrorMessage, Field, Formik, Form} from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\n\n\nimport { TabContainer } from \"../../utils/tradehelpers\";\nimport { extractByKey } from \"../../js/new_trade_fields\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\n/**\n * @constant useStyles\n * hook used for styling\n */\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    customise: {\n        marginTop: 20\n    }\n}));\n\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeContent\n */\n\nexport default function NewTradeContent(props) {\n    const classes = useStyles();\n    const { fields, counterpartyList, trades_length, schema, validationFunctions } = props;\n    const [isLoading, changeLoading] = useState(false);\n    const [counterparty, changeCounterparty] = useState('');\n    const dispatch = useDispatch();\n    const [value, setValue] = useState(0);\n\n\n    /**\n     * @function handleSubmit\n     * @param result\n     * takes fields passed in from the form and appends to 'tradeStates' piece of state\n     */\n    function handleSubmit(result) {\n        const nameRemoved = result.filter((value, index) => {\n            return index !== result.length - 1;\n        });\n        const payload = { id: trades_length, value: nameRemoved };\n        dispatch({ type: 'NEW_TRADE', payload: payload });\n    }\n\n\n    /**\n     * @function addFields\n     * @param addFields\n     * takes the custom fields created in component and appends to NEW_TRADE_FIELDS piece of state\n     */\n    function addFields(addFields) {\n        dispatch({ type: 'APPEND_FIELDS', payload: addFields });\n    }\n\n    /**\n     * @function tabChange\n     * @param e\n     * @param newValue\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n\n    function tabChange(e, newValue) {\n        setValue(newValue);\n    }\n\n    /**\n     * @return\n     * @type Grid\n     * @type TabContainer\n     * @type div\n     */\n\n    function handleCounterpartyChange(e) {\n        changeCounterparty(e.target.value);\n    }\n    function createFormColumns(array) {\n        return (\n            <>\n            {\n                array.map((field, index) => {\n                    if (field[1] !== 'select') {\n                        return (\n                            <Grid item xs={ 4 }>\n                                <Field name={field[0]}\n                                       key={field[0]}\n                                       type={ field[1] }\n                                       component={() => (\n                                               <TextField label={ (field[1] === 'date') ? '' : field[0]}\n                                                          disabled={counterparty === ''}\n                                                          variant=\"outlined\" type={ field[1] }\n                                               />\n                                            )\n                                       }\n                                />\n                                <ErrorMessage name={field[0]} />\n                            </Grid>\n                        );\n                    }\n                    else {\n                        return (\n                            <Grid item xs={ 4 }>\n                                <Field name={field[0]}\n                                       key={field[0]}\n                                       component= {() => (\n                                               <div>\n                                                   <InputLabel htmlFor={field[0]}> {field[0]} </InputLabel>\n                                                   <Select input={<OutlinedInput name={field[0]} />} >\n                                                       <option value=\"DEFAULT\"> Default</option>\n                                                   </Select>\n                                                   <ErrorMessage name={field[0]}/>\n                                               </div>\n                                            )\n                                       }\n                                />\n                            </Grid>\n                        )\n                    }\n                })\n            }\n            </>\n        )\n    }\n\n    function createGrid(items, divider) {\n        return (\n            <Grid container spacing={ 2 }>\n                {\n                    items.map()\n                }\n            </Grid>\n        )\n    }\n    function extendedFields() {\n        const extended = fields.filter((field) => {\n            return field[2] === '1';\n        });\n        const returnExtended = i => {\n            return extended[i];\n        };\n        return (\n            <Grid container spacing={ 2 }>\n                {\n                    [[0], [1,2,3], [4], [5,6], [7,8,9], [10,11,12], [13,14,15], [16,17], [18,19,20], [21,22,23]].map((value, index) => {\n                        const temp = [];\n                        for (let i = 0; i < value.length; i++) {\n                            temp.push(returnExtended(value[i]));\n                        }\n                        return (\n                            <Grid item xs={ 12 }>\n                                <Grid container spacing={ 2 }>\n                                    { createFormColumns(temp) }\n                                </Grid>\n                            </Grid>\n                        )\n                    })\n                }\n            </Grid>\n        );\n    }\n\n    return (\n        <div className={ classes.root }>\n            <div>\n                <Typography variant=\"overline\"> New Trade </Typography>\n                <LoadingOverlay\n                    active={ isLoading }\n                    spinner={ <Eclipse />}\n                    styles={{\n                        overlay: (base) => ({\n                            ...base,\n                            background: 'rgba(255, 255, 255, 0.1)'\n                        })\n                    }}\n                >\n                    <Formik\n                        initialValues={ fields.map(() => {\n                            return '';\n                        }) }\n                        enableReinitialize={ true }\n                        onSubmit={(values, actions) => {\n                            const extractByKey = validationFunctions[0];\n                            console.log(values);\n                            actions.setSubmitting(false)\n                        }}\n                        validateOnBlur={ true }\n                        render={({ errors, status, touched, isSubmitting, isValidating }) => (\n                            <Form>\n                                <Select value={ counterparty } onChange={ e => handleCounterpartyChange(e) } >\n                                    <option value=\"\"> Select Counterparty </option>\n                                    { counterpartyList.map((value, index) => {\n                                        return (\n                                            <option key={ value + index } value={ value }>\n                                                {value}\n                                            </option>\n                                        );\n                                    })}\n                                </Select>\n                                <Grid container spacing={ 2 }>\n                                {\n                                    fields.map((field, index) => {\n                                        if (field[2] === '0') {\n                                            return (\n                                                <Grid item xs={ 6 } style={{ marginTop: 2, marginBottom: 2 }}>\n                                                    {createFormColumns([field])}\n                                                </Grid>\n                                            )\n                                        }\n                                    })\n                                }\n                                </Grid>\n                                <div style={{ marginTop: 20, marginBottom: 20 }}>\n                                    <Divider />\n                                </div>\n                                { extendedFields() }\n                                <Button variant=\"contained\" type=\"submit\" disabled={ isValidating || isSubmitting }> Submit </Button>\n                            </Form>\n                        )}\n                    />\n                </LoadingOverlay>\n            </div>\n        </div>\n    );\n}\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;;;;;AAIA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AAAA;AAUA;;;;;;;;;AASA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AAAA;AAAA;AASA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;AAOA;AACA;AACA;AAEA;;;;;;;;AAOA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAFA;AADA;AAHA;AAWA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AANA;AAFA;AAeA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AADA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AA7BA;AAXA;AAgDA;;;;A","sourceRoot":""}