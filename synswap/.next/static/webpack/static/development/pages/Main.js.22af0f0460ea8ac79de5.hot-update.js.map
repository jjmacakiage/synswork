{"version":3,"file":"static/webpack/static\\development\\pages\\Main.js.22af0f0460ea8ac79de5.hot-update.js","sources":["webpack:///./pages/Main.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport { Grid } from '@material-ui/core';\r\nimport Tabs, {Tab} from \"react-awesome-tabs\";\r\nimport \"../resources/styles/react-awesome-tabs.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport nextCookie from 'next-cookies';\r\nimport Router from 'next/router';\r\n\r\nimport Header from \"../components/main/Header\";\r\nimport Home from './Home';\r\nimport NewTrade from './NewTrade';\r\nimport Trade from './Trade';\r\nimport Blotter from './Blotter';\r\nimport FileUpload from './FileUpload';\r\nimport {error} from \"next/dist/build/output/log\";\r\nimport axios from \"axios\";\r\nimport { withAuthSync } from '../utils/Auth/auth';\r\nimport getHost from '../utils/Auth/get-host';\r\n\r\n/**\r\n * @class Main\r\n * @constructor\r\n * Contains all the navigation functions, including the <Tabs /> and their functions (dispatched to reducers/TabReducer)\r\n * Dependencies used:\r\n * @react-awesome-tabs for the <Tabs> and <Tab> components, react-awesome-tabs.scss for styling (comes with module)\r\n * @material-ui for <Grid />\r\n * @react-redux for useDispatch and useSelector\r\n * Custom Components used:\r\n * @class NewTradeContent - New Trade page\r\n * @class Home - Home page\r\n * @class Trade - Trade page\r\n * @class Header - Header\r\n */\r\n\r\nconst Main = () => {\r\n    const initialFetch = async() => {\r\n        const url = \"http://localhost:4000/api/traders/1/trades\";\r\n        try {\r\n            const response = await axios.get(url);\r\n            dispatch({\r\n                type: 'INITIAL_FETCH',\r\n                payload: {trades: response.data.trades,\r\n                          blocknumber: response.data.blocknumber}\r\n            });\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    const fetchTrades = async (bn) => {\r\n        const url = \"http://localhost:4000/api/updates/\" + bn + \"?traderid=1\";\r\n        try {\r\n            const response = await axios.get(url);\r\n            if(response.data.success && response.data.trades) {\r\n                dispatch({\r\n                    type: 'FETCH_TRADES',\r\n                    payload: {trades: response.data.trades,\r\n                              blocknumber: response.data.blocknumber}});\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    useEffect(() => {\r\n        initialFetch();\r\n\r\n        setInterval(() => {\r\n            setRefresh(true);\r\n        }, 5000);\r\n    },[]);\r\n\r\n    const blocknumber = useSelector(state => state.TradeReducer.blocknumber);\r\n    useEffect(() => {\r\n        fetchTrades(blocknumber);\r\n    }, [refresh === true]);\r\n\r\n    /**\r\n     * @constant activeTab\r\n     * @type {object}\r\n     * a number that represents the activeTab piece of state\r\n     */\r\n    const activeTab = useSelector(state => state.TabReducer.activeTab);\r\n\r\n    /**\r\n     * @var tabs\r\n     * @type {object}\r\n     * an array of objects representing the tabs, with each object in the format { title, index, component }\r\n     */\r\n    const tabs = useSelector(state => state.TabReducer.tabs);\r\n\r\n    /**\r\n     * @constant dispatch\r\n     * @type {function}\r\n     * gives access to dispatch function from Redux store\r\n     */\r\n    const dispatch = useDispatch();\r\n\r\n    /**\r\n     * @constant MAIN_TABS\r\n     * @type {array}\r\n     * array of objects that contains a 'key' and a 'component' that is mapped to the 'component' attribute from a tab object in....\r\n     * ....matchLink\r\n     */\r\n    const MAIN_TABS= [\r\n        { key: 'Home', component: Home({ onClick: handleClick.bind(this) }) },\r\n        { key: 'NewTrade', component: NewTrade({ onClick : handleClick }) },\r\n        { key: 'Trade', component: Trade() },\r\n        { key: 'Blotter', component: Blotter() },\r\n        { key: 'FileNewTrade', component: FileUpload() }\r\n    ];\r\n\r\n    /**\r\n     * @constant openTabs\r\n     * @type {array}\r\n     * used in handleClick method to redirect to a tab if it is already open\r\n     */\r\n    const [openTabs, changeTabs] = useState(['Home']);\r\n\r\n    /**\r\n     * @function matchLink\r\n     * @type string\r\n     * @param link\r\n     * helper function that receives a link {string} from an option in the <HomePane />'s (child components of <Home />) and\r\n     * matches it to a 'component' in the MAIN_TABS array via the 'key'\r\n     * @return number\r\n     */\r\n    function matchLink(link) {\r\n        for (let i = 0; i < MAIN_TABS.length; i++) {\r\n            const data = MAIN_TABS[i];\r\n            if (link === data.key) {\r\n                return i;\r\n            }\r\n        }\r\n        throw Error('Component Not Found');\r\n    }\r\n\r\n    /**\r\n     * @function handleTabSwitch\r\n     * @type number\r\n     * @type dispatch\r\n     * @param active\r\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\r\n     */\r\n    function handleTabSwitch(active) {\r\n        dispatch({ type: 'SWITCH_TAB', payload: active});\r\n    }\r\n\r\n    /**\r\n     * @function handleTabPositionChange\r\n     * @type dispatch\r\n     * @param a\r\n     * @param b\r\n     * eventHandler helper function that takes the two tabs to be switched around, switches their indices,...\r\n     * ...and changes the new active tab\r\n     */\r\n    function handleTabPositionChange(a, b) {\r\n        let c = tabs[a];\r\n        tabs[a] = tabs[b];\r\n        tabs[b] = c;\r\n\r\n        if(activeTab === a) {\r\n            dispatch({ type: 'SWITCH_TAB', activeTab: b });\r\n        }else if(activeTab === b) {\r\n            dispatch({ type: 'SWITCH_TAB', activeTab: a });\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @function handleTabClose\r\n     * @param index\r\n     * eventHandler helper function that takes the closed tab and pops it from 'tabs' piece of state\r\n     */\r\n    function handleTabClose(index) {\r\n        dispatch({ type: 'REMOVE_TAB', payload: index });\r\n        const newTabs = openTabs.filter((value, i) => {\r\n            return i !== index;\r\n        });\r\n        changeTabs(newTabs)\r\n    }\r\n\r\n    /**\r\n     * @function handleClick\r\n     * @param link\r\n     * eventHandler helper function that takes the link as a param and returns a component number from matchLink()\r\n     * if the tab is already open (!indexOf(link) === -1) then switch to that tab with handleTabSwitch\r\n     * else dispatch a new tab object containing a title, index, and component keys to be appended to 'tabs'...\r\n     * ...piece of state\r\n     */\r\n    function handleClick(link) {\r\n        let component = matchLink(link);\r\n        if (openTabs.indexOf(link) === -1) {\r\n            let newTabContent = {\r\n                title: link.match(/[A-Z][a-z]+|[0-9]+/g).join(\" \"),\r\n                index: tabs.length,\r\n                component: component\r\n            };\r\n            dispatch({type: 'ADD_TAB', payload: newTabContent});\r\n            const newOpen = [...openTabs];\r\n            newOpen.push(link);\r\n            changeTabs(newOpen);\r\n        }\r\n        else {\r\n            handleTabSwitch(openTabs.indexOf(link));\r\n        }\r\n    }\r\n    /**\r\n     * @return\r\n     * @type Grid\r\n     * @type Header\r\n     * @type Tabs\r\n     * @type Tab\r\n     * @type MAIN_TABS[component]\r\n     */\r\n    return (\r\n        <Grid container spacing={ 2 }>\r\n            <Grid item xs={ 12 } style={{ maxWidth: 'min-content', backgroundColor: '#f5f5f5'}}>\r\n                <Tabs\r\n                    active={ activeTab }\r\n                    onTabSwitch={ handleTabSwitch.bind(this) }\r\n                    onTabPositionChange={ handleTabPositionChange.bind(this) }\r\n                    onTabClose={ handleTabClose.bind(this) }\r\n                    draggable={ true }\r\n                    showAdd={ false }\r\n                >\r\n                    {\r\n                        //maps 'tabs' piece of state to a <Tab> component, changes when 'tabs' changes\r\n                        tabs.map((value, index) => {\r\n                            return (\r\n                                <Tab\r\n                                    key={ value.title + index }\r\n                                    title={value.title}\r\n                                    showClose={ index !== 0 }\r\n                                >\r\n                                    <Grid container spacing={ 4 }>\r\n                                        <Grid item xs={ 12 }>\r\n                                            <Header />\r\n                                        </Grid>\r\n                                        <Grid item xs={ 12 }>\r\n                                            { MAIN_TABS[ value.component ].component }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Tab>\r\n                            );\r\n                        })\r\n                    }\r\n                </Tabs>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\n/**\r\n * @function getInitialProps\r\n * @param ctx\r\n * checks if user is already logged in before Main component is mounted, if not redirected to  Login page\r\n * @return {Promise<boolean|any|Promise<boolean>>}\r\n */\r\n\r\n/* Main.getInitialProps = async ctx => {\r\n    const { token } = nextCookie(ctx);\r\n    const apiUrl = getHost(ctx.req) + '/api/profile';\r\n\r\n    const redirectOnError = () =>\r\n        typeof window !== 'undefined'\r\n            ? Router.push('/Login')\r\n            : ctx.res.writeHead(302, { Location: '/Login' }).end();\r\n\r\n    try {\r\n        const response = await fetch(apiUrl, {\r\n            credentials: 'include',\r\n            headers: {\r\n                Authorization: JSON.stringify({ token })\r\n            }\r\n        });\r\n\r\n        if (response.ok) {\r\n            const js = await response.json()\r\n            console.log('js', js);\r\n            return js\r\n        } else {\r\n            // https://github.com/developit/unfetch#caveats\r\n            return await redirectOnError()\r\n        }\r\n    } catch (error) {\r\n        // Implementation or Network error\r\n        return redirectOnError()\r\n    }\r\n};\r\n\r\nexport default withAuthSync(Main);\r\n\r\n */\r\nexport default Main;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AADA;AAFA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAFA;AAIA;AACA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AAgCA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AAAA;AAAA;AAEA;;;;;;AAKA;AAAA;AAAA;AAEA;;;;;;AAKA;AAEA;;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;;;;;AAjFA;AAAA;AAAA;AAAA;AAwFA;;;;;;;;;;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AAMA;AAEA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;A","sourceRoot":""}