{"version":3,"file":"static/webpack/static/development/pages/Login.js.97920bcf47988fcdd1ee.hot-update.js","sources":["webpack:///./utils/auth.js"],"sourcesContent":["import { Component } from 'react'\nimport Router from 'next/router'\nimport nextCookie from 'next-cookies'\nimport cookie from 'js-cookie'\n\nfunction login ({ token }) {\n  cookie.set('token', token, {expires: 1});\n  console.log(token);\n  Router.push('/Main')\n}\n\nfunction logout () {\n  cookie.remove('token');\n  // to support logging out from all windows\n  window.localStorage.setItem('logout', Date.now());\n  Router.push('/Login')\n}\n\n// Gets the display name of a JSX component for dev tools\nconst getDisplayName = Component =>\n  Component.displayName || Component.name || 'Component'\n\nfunction withAuthSync (WrappedComponent) {\n  return class extends Component {\n    static displayName = `withAuthSync(${getDisplayName(WrappedComponent)})`\n\n    static async getInitialProps (ctx) {\n      const token = auth(ctx)\n\n      const componentProps =\n        WrappedComponent.getInitialProps &&\n        (await WrappedComponent.getInitialProps(ctx))\n\n      return { ...componentProps, token }\n    }\n\n    constructor (props) {\n      super(props)\n\n      this.syncLogout = this.syncLogout.bind(this)\n    }\n\n    componentDidMount () {\n      window.addEventListener('storage', this.syncLogout)\n    }\n\n    componentWillUnmount () {\n      window.removeEventListener('storage', this.syncLogout)\n      window.localStorage.removeItem('logout')\n    }\n\n    syncLogout (event) {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!')\n        Router.push('/Login')\n      }\n    }\n\n    render () {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n}\n\nfunction auth (ctx) {\n  const { token } = nextCookie(ctx)\n\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, { Location: '/Login' })\n    ctx.res.end()\n  }\n\n  // We already checked for server. This should only happen on client.\n  if (!token) {\n    Router.push('/Login')\n  }\n\n  return token\n}\n\nexport { login, logout, withAuthSync, auth }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA;AANA;AAUA;AAVA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAYA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;AAlBA;AAAA;AAAA;AAoBA;AACA;AArBA;AAAA;AAAA;AAwBA;AACA;AACA;AA1BA;AAAA;AAAA;AA6BA;AACA;AACA;AACA;AACA;AAjCA;AAAA;AAAA;AAoCA;AACA;AArCA;AACA;AADA;AAAA;AAuCA;AACA;AACA;AAAA;AAAA;AAGA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}