{"version":3,"file":"static/webpack/static/development/pages/Main.js.e2f07e5cf3c990fa7091.hot-update.js","sources":["webpack:///./components/newtrade/NewTradeForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Grid, makeStyles, TextField } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    button: {\n        marginLeft: theme.spacing(1)\n    }\n}));\n\n\nexport default function NewTradeForm(props) {\n    const classes = useStyles();\n    const { onSubmit, fieldList } = props;\n    const [tradeName, changeName] = useState('');\n    const [fields, setFields] = useState([]);\n    const [isError, changeError] = useState(false);\n\n    useEffect(() => {\n        generateGrids();\n    }, [fieldList]);\n\n    const [RESULT, setRESULT] = useState({ changes: new Array(fieldList.length) });\n\n    function handleChange(e, index) {\n        const newState = { ...RESULT, changes: RESULT.changes[index] = e.target.value };\n        setRESULT(newState);\n    }\n\n    function submitForm() {\n        const final = [...RESULT.changes];\n        final.push(tradeName);\n        onSubmit(final);\n    }\n    function generateGrids() {\n        setFields(fieldList.map((label, index) => {\n                return (\n                    <Grid item key={ index }>\n                        <TextField\n                            id={ label.replace(/ /g,\"-\") }\n                            label={ label }\n                            disabled={ props.isDisabled }\n                            className={ classes.textField }\n                            value={ RESULT[index] }\n                            onChange={ e => handleChange(e, index) }\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            error={ isError }\n                        />\n                    </Grid>\n                );\n            }\n        ));\n    }\n\n    return (\n        <div className={ classes.root }>\n            <Grid container spacing={ 2 }>\n                <Grid item xs={ 6 }>\n                    { fields.slice(0, fields.length / 2) }\n                </Grid>\n                <Grid item xs={ 6 }>\n                    { fields.slice(fields.length / 2, fields.length) }\n                </Grid>\n                <Grid item xs={ 3 }>\n                    <TextField\n                        id=\"trade-name\"\n                        key={ -1 }\n                        label=\"Name\"\n                        className={ classes.textField }\n                        value={ tradeName }\n                        onChange={ e => changeName(e.target.value) }\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={ 3 }>\n                    <Button\n                        onClick={ submitForm }\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={ classes.button }\n                    >\n                        Submit New Trade\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AARA;AAAA;AAcA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAVA;AAWA;AAAA;AAXA;AAAA;AAAA;AACA;AAYA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AATA;AAaA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAWA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAYA;;;;A","sourceRoot":""}