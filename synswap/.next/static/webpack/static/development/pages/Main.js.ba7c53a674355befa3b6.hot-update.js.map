{"version":3,"file":"static/webpack/static/development/pages/Main.js.ba7c53a674355befa3b6.hot-update.js","sources":["webpack:///./components/newtrade/Form.js"],"sourcesContent":["import React from 'react';\nimport { ErrorMessage, Formik, Form, Field } from 'formik';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { Eclipse } from 'react-loading-io';\nimport * as Yup from 'yup';\n\n\nconst NewTradeFrom = props => {\n    //const validationSchema = useSelector(state => state.NewTradeReducer.validationSchema);\n    const [counterparty, changeCounterparty] = React.useState('');\n    const [isLoading, changeLoading] = React.useState(false);\n    const values = () => {\n        const list = [...props.initialValues];\n        const result = [];\n        for (let i = 0; i < list.length; i++) {\n            result.push(\n                [list[i], Yup.string().required('Required')]\n            )\n        }\n        return Object.fromEntries(new Map(result));\n    };\n    const testSchema = Yup.object().shape(values());\n    return (\n        <LoadingOverlay\n            active={ isLoading }\n            spinner={ <Eclipse />}\n            styles={{\n                overlay: (base) => ({\n                    ...base,\n                    background: 'rgba(255, 255, 255, 255)'\n                })\n            }}\n        >\n            <Formik\n                initialValues={ props.initialValues }\n                onSubmit={ (values, actions)=> {\n                    changeLoading(true);\n                    setTimeout(() => {\n                        changeLoading(false);\n                    }, 2000);\n                    console.log(values);\n                    actions.setSubmitting(false);\n                }}\n                enableReinitialize={ true }\n                /*onSubmit={(values, actions) => {\n                    MyImaginaryRestApiCall(user.id, values).then(\n                        updatedUser => {\n                            actions.setSubmitting(false);\n                            updateUser(updatedUser);\n                            onClose();\n                        },\n                        error => {\n                            actions.setSubmitting(false);\n                            actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n                            actions.setStatus({ msg: 'Set some arbitrary status or data' });\n                        }\n                    );\n                }}\n                */\n                validationSchema={ testSchema }\n                validateOnBlur={ true }\n                >\n                {({ errors, touched, isValidating, isSubmitting }) => (\n                    <Form>\n                        <select value={ counterparty } onChange={ e => changeCounterparty(e.target.value)}>\n                            <option value=\"\"> Select Counterparty </option>\n                            { props.counterparties.map((value, index) => {\n                                return (\n                                   <option key={ value + index } value={ value }>\n                                        {value}\n                                   </option>\n                                );\n                            })}\n                        </select>\n                        {\n                            props.fields.map((field, index) => {\n                                return (\n                                    <div className=\"col\" key={ field + index }>\n                                        <Field type=\"name\" name={ field } disabled={ counterparty === ''} />\n                                        <ErrorMessage name={ field } />\n                                    </div>\n                                )\n                            })\n                        }\n                        <button type=\"submit\" disabled={ isValidating || isSubmitting }> Submit </button>\n                    </Form>\n                )}\n            </Formik>\n        </LoadingOverlay>\n    )\n};\nexport default NewTradeFrom;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AADA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAXA;AA0BA;AACA;AA3BA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AAAA;AAAA;AAtBA;AA4BA;AACA;AAAA;;;;A","sourceRoot":""}