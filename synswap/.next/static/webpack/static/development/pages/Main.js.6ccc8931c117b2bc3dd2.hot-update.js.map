{"version":3,"file":"static/webpack/static/development/pages/Main.js.6ccc8931c117b2bc3dd2.hot-update.js","sources":["webpack:///./components/TableTwo.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\n\nimport {\n    AddBox, ArrowUpward,\n    Check, ChevronLeft,\n    ChevronRight, Clear,\n    DeleteOutline, Edit,\n    FilterList, FirstPage,\n    LastPage, Remove,\n    SaveAlt, Search,\n    ViewColumn\n} from \"@material-ui/icons\";\n\nconst TableTwo = props => {\n    const { data } = props;\n    const columns = (!data.rows) ? pullStuff(data[0], 'keys') : data.columns;\n\n    const tableIcons = {\n        Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n        Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n        Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n        DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n        Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n        Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n        FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n        LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n        NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n        ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n        SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n        ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n        ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n    };\n\n    function formatColumns(columns) {\n        if (columns.length === 0 || columns[0].width) {\n            return columns;\n        }\n        let result = [];\n        let width = 1800 / columns.length;\n        for (let i = 0; i < columns.length; i++) {\n            const column = columns[i];\n            const object = {\n                title: column,\n                field: column,\n            };\n            result.push(object);\n        }\n        return result;\n    }\n    function formatRows(rows) {\n        let result = [];\n        for (let i = 0; i < rows.length; i++) {\n            let row = rows[i];\n            let temp = pullStuff(row, 'values');\n            let temp2 = generateObj(columns, temp);\n            result.push(temp2);\n        }\n        console.log(result[0].length, columns.length);\n        return result;\n    }\n    function generateObj(array, values) {\n        let result = {};\n        for (let i = 0; i < array.length; i++) {\n            result = {...result, [array[i]]: values[i]};\n        }\n        return result;\n    }\n    function pullStuff(obj, param) {\n        const getKeys = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            const topKeys = Object.keys(obj);\n            for (let i = 0; i < topKeys.length; i++) {\n                let topKey = topKeys[i];\n                let topEntry = obj[topKey];\n                if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n                    result.push(topKey);\n                }\n                else if (Array.isArray(topEntry)) {\n                    let arrayEntry;\n                    for (arrayEntry in topEntry) {\n                        result.push(getKeys(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getKeys(topEntry))\n                }\n            }\n            return result.flat(Infinity);\n        };\n\n        const getValues = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            let topValues = Object.values(obj);\n            for (let i = 0; i < topValues.length; i++) {\n                let topValue = topValues[i];\n                if (typeof topValue === 'string' || typeof topValue === 'number') {\n                    result.push(topValue);\n                }\n                else if (Array.isArray(topValue)) {\n                    let arrayEntry;\n                    for (arrayEntry in topValue) {\n                        result.push(getValues(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getValues(topValue))\n                }\n            }\n            return result.flat(Infinity);\n        };\n        switch (param) {\n            case 'keys':\n                return getKeys(obj, false);\n            case 'values':\n                return getValues(obj, false);\n            default:\n                return;\n        }\n    }\n\n    const tableData = formatRows(data);\n    console.log(tableData);\n    return (\n        <MaterialTable\n            columns={ formatColumns(columns) }\n            icons={ tableIcons }\n            data={ formatRows(data) }\n            options={{\n                filtering: true\n            }}\n        />\n    )\n};\n\nexport default TableTwo;\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAUA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAJA;AASA;AACA;AACA;;;;A","sourceRoot":""}