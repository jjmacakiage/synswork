{"version":3,"file":"static/webpack/static\\development\\pages\\Main.js.85700916ba33ac94ce56.hot-update.js","sources":["webpack:///./components/newtrade/NewTradeContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {Button, Grid, makeStyles, Tabs, Tab, Select, TextField, MenuItem, Divider, Typography} from '@material-ui/core';\r\nimport {Eclipse} from \"react-loading-io\";\r\nimport {ErrorMessage, Field, Formik, Form} from \"formik\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\n\r\nimport { TabContainer } from \"../../utils/tradehelpers\";\r\n\r\n\r\n\r\n/**\r\n * @constant useStyles\r\n * hook used for styling\r\n */\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    customise: {\r\n        marginTop: 20\r\n    }\r\n}));\r\n\r\n/**\r\n * @class NewTradeContent\r\n * Contains the forms for creating a NewTrade\r\n * Dependencies used:\r\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\r\n * Custom Components used:\r\n * @class NewTradeContent\r\n */\r\n\r\nexport default function NewTradeContent(props) {\r\n    const classes = useStyles();\r\n    const { fields, counterpartyList, trades_length, schema, validationFunctions } = props;\r\n    const { IRS } = schema;\r\n    const [isLoading, changeLoading] = useState(false);\r\n    const [counterparty, changeCounterparty] = useState('');\r\n    const dispatch = useDispatch();\r\n    const [value, setValue] = useState(0);\r\n\r\n    const irsSchema = (values) => {\r\n        const generateSchema = (object, values) => {\r\n            let keys = Object.keys(object);\r\n            let valueCount = 0;\r\n            let result = {};\r\n            for (let i = 0; i < keys.length; i++) {\r\n                let key = keys[i];\r\n                let obj = object[key];\r\n                if (typeof obj === 'string' || typeof obj === 'number') {\r\n                    result = { ...result, [key]: values[valueCount]};\r\n                    valueCount++;\r\n                }\r\n                else {\r\n                    result = { ...result, [key]: generateSchema(obj, values.slice(valueCount, valueCount + Object.keys(object).length))};\r\n                    valueCount = valueCount + Object.keys(object).length\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        return generateSchema(IRS, values)\r\n    };\r\n\r\n    /**\r\n     * @function handleSubmit\r\n     * @param result\r\n     * takes fields passed in from the form and sends to api\r\n     */\r\n    const handleSubmit = async result => {\r\n        // TODO: Below using fixed user id for now. Can change this once we add user registration, login, auth...\r\n        const url = 'http://localhost:4000/api/traders/1/trades';\r\n\r\n        try {\r\n            axios.post(url, {\r\n                result\r\n            })\r\n                .then(function (response) {\r\n                    if (response.status === 200) {\r\n                        console.log(response);\r\n                        return 'Trade Sent';\r\n                    } else {\r\n                        console.log('Trade register failed.', response.status);\r\n                        let error = new Error(response.statusText);\r\n                        error.response = response;\r\n                        throw error\r\n                    }\r\n                });\r\n        } catch (error) {\r\n            console.error(\r\n                'You have an error in your code or there are Network issues.',\r\n                error\r\n            );\r\n            return error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @function addFields\r\n     * @param addFields\r\n     * takes the custom fields created in component and appends to NEW_TRADE_FIELDS piece of state\r\n     */\r\n    function addFields(addFields) {\r\n        dispatch({ type: 'APPEND_FIELDS', payload: addFields });\r\n    }\r\n\r\n    /**\r\n     * @function tabChange\r\n     * @param e\r\n     * @param newValue\r\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\r\n     */\r\n    function tabChange(e, newValue) {\r\n        setValue(newValue);\r\n    }\r\n\r\n    function generateInitial(array, values) {\r\n        let result = {};\r\n        for (let i = 0; i < array.length; i++) {\r\n            result = {...result, [array[i][0]]: values[i]};\r\n        }\r\n        return result;\r\n    }\r\n    function handleCounterpartyChange(e) {\r\n        changeCounterparty(e.target.value);\r\n    }\r\n    function createFormColumns(array) {\r\n        return (\r\n            <>\r\n            {\r\n                array.map((value, index) => {\r\n                    if (value[1] !== 'select') {\r\n                        return (\r\n                            <Grid item xs={ 4 }>\r\n                                <Field name={value[0]}\r\n                                       key={value[0]}\r\n                                       type={ value[1] }\r\n                                       render={({ field, form: { isSubmitting } }) => (\r\n                                           <TextField {...field} label={ (value[1] === 'date') ? '' : value[0]}\r\n                                                      disabled={counterparty === '' || isSubmitting}\r\n                                                      variant=\"outlined\" type={ value[1]}\r\n                                                      helperText={ (value[1] === 'date') ? value[0] : ''}\r\n                                           />\r\n                                       )}\r\n                                />\r\n                                <ErrorMessage name={value[0]} component=\"div\"/>\r\n                            </Grid>\r\n                        );\r\n                    }\r\n                    else {\r\n                        return (\r\n                            <Grid item xs={ 4 }>\r\n                                <Field name={value[0]}\r\n                                       key={value[0]}\r\n                                       placeholder={ value[0] }\r\n                                       component=\"select\"\r\n                                       /*\r\n                                       render= {({ field, form: { isSubmitting } }) => (\r\n\r\n                                                <div>\r\n                                                    <TextField\r\n                                                        select\r\n                                                        label={ value[0] }\r\n                                                        disabled={counterparty === '' || isSubmitting}\r\n                                                        variant=\"outlined\"\r\n                                                        type={ value[1] }\r\n                                                        style={{ width: '100%' }}\r\n                                                    >\r\n                                                        <MenuItem value={ value[0] }>\r\n                                                            Default\r\n                                                        </MenuItem>\r\n                                                    </TextField>\r\n                                               </div>\r\n                                            )\r\n                                       }\r\n                                        */\r\n                                >\r\n                                        {\r\n                                            value[3].map((option, index) => {\r\n                                                return (\r\n                                                    <option value={option}> {option} </option>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Field>\r\n                                    <ErrorMessage name={value[0]} component=\"div\"/>\r\n                            </Grid>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n            </>\r\n        )\r\n    }\r\n    function extendedFields() {\r\n        const extended = fields.filter((field) => {\r\n            return field[2] === '1';\r\n        });\r\n        const returnExtended = i => {\r\n            return extended[i];\r\n        };\r\n        return (\r\n            <Grid container spacing={ 2 }>\r\n                {\r\n                    [[0], [1,2,3], [4,5,6], [7,8], [9,10,11], [12,13,14], [15,16,17], [18,19]].map((value, index) => {\r\n                        const temp = [];\r\n                        for (let i = 0; i < value.length; i++) {\r\n                            temp.push(returnExtended(value[i]));\r\n                        }\r\n                        return (\r\n                            <Grid item xs={ 12 }>\r\n                                { (index === 0 || index === 5) ?\r\n                                    <Typography variant=\"overline\" style={{ marginBottom: 20 }}>\r\n                                        {index === 0 ? \"Floating Leg\" : \"Fixed Leg\"}\r\n                                    </Typography>\r\n                                    : null\r\n                                }\r\n                                <Grid container spacing={ 2 }>\r\n                                    { createFormColumns(temp) }\r\n                                </Grid>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     * @type Grid\r\n     * @type TabContainer\r\n     * @type div\r\n     */\r\n    return (\r\n        <div className={ classes.root }>\r\n            <div>\r\n                <Typography variant=\"overline\" style={{ marginBottom: 20 }}> { (counterparty === '') ? 'New Trade' : counterparty }</Typography>\r\n                <LoadingOverlay\r\n                    active={ isLoading }\r\n                    spinner={ <Eclipse />}\r\n                    styles={{\r\n                        overlay: (base) => ({\r\n                            ...base,\r\n                            background: 'rgba(255, 255, 255, 0.1)'\r\n                        })\r\n                    }}\r\n                >\r\n                    <Formik\r\n                        initialValues={generateInitial(fields, new Array(fields.length).fill(''))}\r\n                        enableReinitialize={ true }\r\n                        onSubmit={(values, actions) => {\r\n                            //console.log(irsSchema(Object.values(values)));\r\n                            handleSubmit(IRS);\r\n                            actions.setSubmitting(false)\r\n                        }}\r\n                        validateOnBlur={ true }\r\n                        render={({ errors, status, touched, isSubmitting, isValidating }) => (\r\n                            <Form>\r\n                                <TextField\r\n                                    select\r\n                                    label=\"Select Counterparty\"\r\n                                    disabled={isSubmitting}\r\n                                    variant=\"outlined\" type={ value[1] }\r\n                                    value={ counterparty }\r\n                                    onChange={ e => handleCounterpartyChange(e) }\r\n                                    style={{ width: '100%', marginBottom: 20 }}\r\n                                >\r\n                                    { counterpartyList.map((value, index) => {\r\n                                        return (\r\n                                            <MenuItem key={ value + index } value={ value }>\r\n                                                {value}\r\n                                            </MenuItem>\r\n                                        );\r\n                                    })}\r\n                                </TextField>\r\n                                <Grid container spacing={ 2 }>\r\n                                {\r\n                                    fields.map((field, index) => {\r\n                                        if (field[2] === '0') {\r\n                                            return (\r\n                                                <Grid item xs={ 6 } style={{ marginTop: 2, marginBottom: 2 }}>\r\n                                                    {createFormColumns([field])}\r\n                                                </Grid>\r\n                                            )\r\n                                        }\r\n                                    })\r\n                                }\r\n                                </Grid>\r\n                                <div style={{ marginTop: 20, marginBottom: 20 }}>\r\n                                    <Divider />\r\n                                </div>\r\n                                { extendedFields() }\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"submit\"\r\n                                    disabled={ isValidating || isSubmitting || counterparty === ''}\r\n                                    style={{ marginTop: 20 }}\r\n                                >\r\n                                    Submit\r\n                                </Button>\r\n                            </Form>\r\n                        )}\r\n                    />\r\n                </LoadingOverlay>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;;;;;AAIA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AAAA;AAUA;;;;;;;;;AASA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AACA;AADA;AAAA;AAAA;AAoBA;AApBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA4BA;;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAHA;AADA;AAHA;AAWA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAJA;AA2BA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAGA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAKA;AAIA;AAEA;;;;;;;;AAMA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AADA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAPA;AAUA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AApCA;AATA;AA4DA;;;;A","sourceRoot":""}