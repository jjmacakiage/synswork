{"version":3,"file":"static/webpack/static/development/pages/Main.js.c64da14d29eae7017e50.hot-update.js","sources":["webpack:///./components/DataTable.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport TableCell from '@material-ui/core/TableCell';\nimport Paper from '@material-ui/core/Paper';\nimport { AutoSizer, Column, Table } from 'react-virtualized';\n\nconst styles = theme => ({\n    flexContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n    },\n    tableRow: {\n        cursor: 'pointer',\n    },\n    tableRowHover: {\n        '&:hover': {\n            backgroundColor: theme.palette.grey[200],\n        },\n    },\n    tableCell: {\n        flex: 1,\n    },\n    noClick: {\n        cursor: 'initial',\n    },\n});\n\nclass MuiVirtualizedTable extends PureComponent {\n    static defaultProps = {\n        headerHeight: 48,\n        rowHeight: 48,\n    };\n\n    getRowClassName = ({ index }) => {\n        const { classes, onRowClick } = this.props;\n\n        return clsx(classes.tableRow, classes.flexContainer, {\n            [classes.tableRowHover]: index !== -1 && onRowClick != null,\n        });\n    };\n\n    cellRenderer = ({ cellData, columnIndex }) => {\n        const { columns, classes, rowHeight, onRowClick } = this.props;\n        return (\n            <TableCell\n                component=\"div\"\n                className={clsx(classes.tableCell, classes.flexContainer, {\n                    [classes.noClick]: onRowClick == null,\n                })}\n                variant=\"body\"\n                style={{ height: rowHeight }}\n                align={(columnIndex != null && columns[columnIndex].numeric) || false ? 'right' : 'left'}\n            >\n                {cellData}\n            </TableCell>\n        );\n    };\n\n    headerRenderer = ({ label, columnIndex }) => {\n        const { headerHeight, columns, classes } = this.props;\n\n        return (\n            <TableCell\n                component=\"div\"\n                className={clsx(classes.tableCell, classes.flexContainer, classes.noClick)}\n                variant=\"head\"\n                style={{ height: headerHeight, justifyContent: \"center\" }}\n                align={ columns[columnIndex].numeric || false ? 'right' : 'left' }\n            >\n                <span>{label}</span>\n            </TableCell>\n        );\n    };\n\n    render() {\n        const { classes, columns, ...tableProps } = this.props;\n        return (\n            <AutoSizer>\n                {({ height, width }) => (\n                    <Table height={height} width={width} {...tableProps} rowClassName={this.getRowClassName}>\n                        {columns.map(({ dataKey, ...other }, index) => {\n                            return (\n                                <Column\n                                    key={dataKey}\n                                    headerRenderer={headerProps =>\n                                        this.headerRenderer({\n                                            ...headerProps,\n                                            columnIndex: index,\n                                        })\n                                    }\n                                    className={classes.flexContainer}\n                                    cellRenderer={this.cellRenderer}\n                                    dataKey={dataKey}\n                                    {...other}\n                                />\n                            );\n                        })}\n                    </Table>\n                )}\n            </AutoSizer>\n        );\n    }\n}\n\nMuiVirtualizedTable.propTypes = {\n    classes: PropTypes.object.isRequired,\n    columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n    headerHeight: PropTypes.number,\n    onRowClick: PropTypes.func,\n    rowHeight: PropTypes.number,\n};\n\nconst VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\n\nfunction formatColumns(columns) {\n    if (columns.length === 0 || columns[0].width) {\n        return columns;\n    }\n    let result = [];\n    let width = 1800 / columns.length;\n    for (let i = 0; i < columns.length; i++) {\n        const column = columns[i];\n        const object = {\n            width: width,\n            label: column,\n            dataKey: column.toString().toLowerCase().replace(\"\\s\",\"\"),\n            numeric: !isNaN(column)\n        };\n        result.push(object);\n    }\n    return result;\n}\n\nfunction formatRows(rows, columns) {\n    if (rows.length === 0 || typeof rows[0] === 'object'){\n        return rows;\n    }\n    let result = [];\n    for (let i = 0; i < rows.length; i++) {\n        let row = rows[i];\n        let temp = [];\n        for (let j = 0; j < row.length; j++) {\n            let dataKey = columns[j].toString().toLowerCase().replace(\"\\s\", \"\");\n            temp.push({ [dataKey]: row[j] });\n        }\n        let objectList = temp.reduce((result, item) => {\n            let key = Object.keys(item)[0];\n            result[key] = item[key];\n            return result;\n        }, {});\n        result.push(objectList);\n    }\n    return result;\n}\n\n\nexport default function ReactVirtualizedTable(props) {\n    console.log(formatRows(props.data.rows));\n    \n    return (\n        <Paper style={{ height: 400, width: '100%' }}>\n            <VirtualizedTable\n                rowCount={ props.data.rows.length }\n                rowGetter={({ index }) => formatRows(props.data.rows, props.data.columns)[index]}\n                columns={ formatColumns(props.data.columns) }\n                onRowClick={ props.onRowClick }\n            />\n        </Paper>\n    );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AADA;AADA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAjBA;AAAA;AACA;AAqBA;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAPA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAUA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AAFA;AADA;AAMA;AACA;AACA;AAVA;AAcA;AAlBA;AAuBA;;;;AA1EA;AACA;AADA;AAEA;AACA;AAFA;AACA;AA2EA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAQA;;;;A","sourceRoot":""}