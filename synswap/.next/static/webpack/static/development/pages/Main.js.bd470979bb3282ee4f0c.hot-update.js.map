{"version":3,"file":"static/webpack/static/development/pages/Main.js.bd470979bb3282ee4f0c.hot-update.js","sources":["webpack:///./components/Table.js","webpack:///./pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\n\nimport {\n    AddBox, ArrowUpward,\n    Check, ChevronLeft,\n    ChevronRight, Clear,\n    DeleteOutline, Edit,\n    FilterList, FirstPage,\n    LastPage, Remove,\n    SaveAlt, Search,\n    ViewColumn\n} from \"@material-ui/icons\";\n\nconst Table = props => {\n    const { data } = props;\n    const columns = (!data.rows) ? pullStuff(data[0], 'keys') : data.columns;\n\n    const tableIcons = {\n        Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n        Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n        Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n        DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n        Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n        Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n        FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n        LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n        NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n        ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n        SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n        ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n        ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n    };\n\n    function formatColumns(columns) {\n        if (columns.length === 0 || columns[0].width) {\n            return columns;\n        }\n        const doText = text => {\n            const newText = text.replace(/([A-Z]+)/g, \" $1\");\n            return newText.charAt(0).toUpperCase() + newText.slice(1)\n        };\n        let result = [];\n        for (let i = 0; i < columns.length; i++) {\n            const column = columns[i];\n            const object = {\n                title: doText(column),\n                field: column,\n            };\n            result.push(object);\n        }\n        return result;\n    }\n    function formatRows(rows) {\n        let result = [];\n        for (let i = 0; i < rows.length; i++) {\n            let row = rows[i];\n            let temp = pullStuff(row, 'values');\n            let temp2 = generateObj(columns, temp);\n            result.push(temp2);\n        }\n        return result;\n    }\n    function generateObj(array, values) {\n        let result = {};\n        for (let i = 0; i < array.length; i++) {\n            result = {...result, [array[i]]: values[i]};\n        }\n        return result;\n    }\n    function pullStuff(obj, param) {\n        const getKeys = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            const topKeys = Object.keys(obj);\n            for (let i = 0; i < topKeys.length; i++) {\n                let topKey = topKeys[i];\n                let topEntry = obj[topKey];\n                if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n                    result.push(topKey);\n                }\n                else if (Array.isArray(topEntry)) {\n                    let arrayEntry;\n                    for (arrayEntry in topEntry) {\n                        result.push(getKeys(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getKeys(topEntry))\n                }\n            }\n            return result.flat(Infinity);\n        };\n\n        const getValues = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            let topValues = Object.values(obj);\n            for (let i = 0; i < topValues.length; i++) {\n                let topValue = topValues[i];\n                if (typeof topValue === 'string' || typeof topValue === 'number') {\n                    result.push(topValue);\n                }\n                else if (Array.isArray(topValue)) {\n                    let arrayEntry;\n                    for (arrayEntry in topValue) {\n                        result.push(getValues(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getValues(topValue))\n                }\n            }\n            return result.flat(Infinity);\n        };\n        switch (param) {\n            case 'keys':\n                return getKeys(obj, false);\n            case 'values':\n                return getValues(obj, false);\n            default:\n                return;\n        }\n    }\n\n    return (\n        <MaterialTable\n            columns={ formatColumns(columns) }\n            icons={ tableIcons }\n            data={ formatRows(data) }\n            title=\"Blotter\"\n            options={{\n                filtering: true,\n                exportButton: true,\n                headerStyle: {\n                    backgroundColor: '#039dfc'\n                },\n                cellStyle: {\n                    fontSize: 8\n                }\n            }}\n        />\n    )\n};\n\nexport default Table;\n\n","import React, {useState, useEffect, useRef} from \"react\";\nimport { Grid } from '@material-ui/core';\nimport Tabs, {Tab} from \"react-awesome-tabs\";\nimport \"../resources/styles/react-awesome-tabs.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport nextCookie from 'next-cookies';\nimport Router from 'next/router';\n\nimport Header from \"../components/main/Header\";\nimport Home from './Home';\nimport NewTrade from './NewTrade';\nimport Trade from './Trade';\nimport Blotter from './Blotter';\nimport FileUpload from './FileUpload';\nimport {error} from \"next/dist/build/output/log\";\nimport axios from \"axios\";\nimport { withAuthSync } from '../utils/Auth/auth';\nimport getHost from '../utils/Auth/get-host';\n\n/**\n * @class Main\n * @constructor\n * Contains all the navigation functions, including the <Tabs /> and their functions (dispatched to reducers/TabReducer)\n * Dependencies used:\n * @react-awesome-tabs for the <Tabs> and <Tab> components, react-awesome-tabs.scss for styling (comes with module)\n * @material-ui for <Grid />\n * @react-redux for useDispatch and useSelector\n * Custom Components used:\n * @class NewTradeContent - New Trade page\n * @class Home - Home page\n * @class Trade - Trade page\n * @class Header - Header\n */\n\nfunction useInterval(callback, params, delay) {\n    useEffect(() => {\n        setInterval(() => {\n            callback(params);\n        }, delay);\n        return (\n            () => {\n                console.log('Component Unmounted');\n            }\n        )\n    }, []);\n}\n\nconst Main = () => {\n    const blockNumber = useSelector(state => state.TradeReducer.blockNumber);\n\n    const initialFetch = async () => {\n        const url = \"http://localhost:4000/api/traders/1/trades\";\n        try {\n            const response = await axios.get(url);\n            dispatch({\n                type: 'INITIAL_FETCH',\n                payload: {\n                    trades: response.data.trades,\n                    blockNumber: response.data.blocknumber\n                }\n            });\n\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    const fetchTrades = async (bn) => {\n        const url = \"http://localhost:4000/api/updates/\" + bn + \"?traderid=1\";\n        try {\n            const response = await axios.get(url);\n            if(response.data.success && response.data.trades) {\n                dispatch({\n                    type: 'FETCH_TRADES',\n                    payload: {trades: response.data.trades,\n                              blockNumber: response.data.blocknumber}});\n                const notifications = response.data.trades.map((trade) => {\n                    // TODO: Only new trade notifcations currently, currently cannot amend trades.\n                    return {message: \"Amount: \" + trade.amount + \" Type: \" + trade.tradeType, title: \"New trade with \" + trade.counterPartyId +\" alleged\"};\n                });\n                dispatch({\n                    type: 'ADD_NOTIFICATIONS',\n                    payload: notifications\n                })\n            }\n\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    useEffect(() => {\n        initialFetch();\n        return;\n    },[]);\n\n    useInterval(fetchTrades, blockNumber, 5000);\n\n    /**\n     * @constant activeTab\n     * @type {object}\n     * a number that represents the activeTab piece of state\n     */\n    const activeTab = useSelector(state => state.TabReducer.activeTab);\n\n    /**\n     * @var tabs\n     * @type {object}\n     * an array of objects representing the tabs, with each object in the format { title, index, component }\n     */\n    const tabs = useSelector(state => state.TabReducer.tabs);\n\n    /**\n     * @constant dispatch\n     * @type {function}\n     * gives access to dispatch function from Redux store\n     */\n    const dispatch = useDispatch();\n\n    /**\n     * @constant MAIN_TABS\n     * @type {array}\n     * array of objects that contains a 'key' and a 'component' that is mapped to the 'component' attribute from a tab object in....\n     * ....matchLink\n     */\n    const MAIN_TABS= [\n        { key: 'Home', component: Home({ onClick: handleClick.bind(this) }) },\n        { key: 'NewTrade', component: NewTrade({ onClick : handleClick }) },\n        { key: 'Trade', component: Trade() },\n        { key: 'Blotter', component: Blotter() },\n        { key: 'FileNewTrade', component: FileUpload() }\n    ];\n\n    /**\n     * @constant openTabs\n     * @type {array}\n     * used in handleClick method to redirect to a tab if it is already open\n     */\n    const [openTabs, changeTabs] = useState(['Home']);\n\n    /**\n     * @function matchLink\n     * @type string\n     * @param link\n     * helper function that receives a link {string} from an option in the <HomePane />'s (child components of <Home />) and\n     * matches it to a 'component' in the MAIN_TABS array via the 'key'\n     * @return number\n     */\n    function matchLink(link) {\n        for (let i = 0; i < MAIN_TABS.length; i++) {\n            const data = MAIN_TABS[i];\n            if (link === data.key) {\n                return i;\n            }\n        }\n        throw Error('Component Not Found');\n    }\n\n    /**\n     * @function handleTabSwitch\n     * @type number\n     * @type dispatch\n     * @param active\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n    function handleTabSwitch(active) {\n        dispatch({ type: 'SWITCH_TAB', payload: active});\n    }\n\n    /**\n     * @function handleTabPositionChange\n     * @type dispatch\n     * @param a\n     * @param b\n     * eventHandler helper function that takes the two tabs to be switched around, switches their indices,...\n     * ...and changes the new active tab\n     */\n    function handleTabPositionChange(a, b) {\n        let c = tabs[a];\n        tabs[a] = tabs[b];\n        tabs[b] = c;\n\n        if(activeTab === a) {\n            dispatch({ type: 'SWITCH_TAB', activeTab: b });\n        }else if(activeTab === b) {\n            dispatch({ type: 'SWITCH_TAB', activeTab: a });\n        }\n\n    }\n\n    /**\n     * @function handleTabClose\n     * @param index\n     * eventHandler helper function that takes the closed tab and pops it from 'tabs' piece of state\n     */\n    function handleTabClose(index) {\n        dispatch({ type: 'REMOVE_TAB', payload: index });\n        const newTabs = openTabs.filter((value, i) => {\n            return i !== index;\n        });\n        changeTabs(newTabs)\n    }\n\n    /**\n     * @function handleClick\n     * @param link\n     * eventHandler helper function that takes the link as a param and returns a component number from matchLink()\n     * if the tab is already open (!indexOf(link) === -1) then switch to that tab with handleTabSwitch\n     * else dispatch a new tab object containing a title, index, and component keys to be appended to 'tabs'...\n     * ...piece of state\n     */\n    function handleClick(link) {\n        let component = matchLink(link);\n        if (openTabs.indexOf(link) === -1) {\n            let newTabContent = {\n                title: link.match(/[A-Z][a-z]+|[0-9]+/g).join(\" \"),\n                index: tabs.length,\n                key: link,\n                component: component\n            };\n            dispatch({type: 'ADD_TAB', payload: newTabContent});\n            const newOpen = [...openTabs];\n            newOpen.push(link);\n            changeTabs(newOpen);\n        }\n        else {\n            handleTabSwitch(openTabs.indexOf(link));\n        }\n    }\n    /**\n     * @return\n     * @type Grid\n     * @type Header\n     * @type Tabs\n     * @type Tab\n     * @type MAIN_TABS[component]\n     */\n    return (\n        <Grid container spacing={ 2 }>\n            <Grid item xs={ 12 } style={{ maxWidth: 'min-content', backgroundColor: '#f5f5f5'}}>\n                <Tabs\n                    active={ activeTab }\n                    onTabSwitch={ handleTabSwitch.bind(this) }\n                    onTabPositionChange={ handleTabPositionChange.bind(this) }\n                    onTabClose={ handleTabClose.bind(this) }\n                    draggable={ true }\n                    showAdd={ false }\n                >\n                    {\n                        //maps 'tabs' piece of state to a <Tab> component, changes when 'tabs' changes\n                        tabs.map((value, index) => {\n                            return (\n                                <Tab\n                                    key={ value.title + index }\n                                    title={value.title}\n                                    showClose={ index !== 0 }\n                                >\n                                    <Grid container spacing={ 4 }>\n                                        <Grid item xs={ 12 }>\n                                            <Header />\n                                        </Grid>\n                                        <Grid item xs={ 12 }>\n                                            {\n                                                createTab(value.key)\n                                            }\n                                        </Grid>\n                                    </Grid>\n                                </Tab>\n                            );\n                        })\n                    }\n                </Tabs>\n            </Grid>\n        </Grid>\n    );\n\n    function createTab(key) {\n        switch (key) {\n            case ('Home'):\n                return (\n                    <Home onClick={ handleClick.bind(this) } />\n                );\n            case ('NewTrade'):\n                return (\n                    <NewTrade onClick={ handleClick }/>\n                );\n            case ('Trade'):\n                return (\n                    <Trade />\n                );\n            case ('Blotter'):\n                return (\n                    <Blotter/>\n                );\n            case ('FileNewTrade'):\n                return (\n                    <FileUpload/>\n                );\n            default:\n                throw new error('Tab Map Failed')\n        }\n    }\n\n};\n\n/**\n * @function getInitialProps\n * @param ctx\n * checks if user is already logged in before Main component is mounted, if not redirected to  Login page\n * @return {Promise<boolean|any|Promise<boolean>>}\n */\n\n/* Main.getInitialProps = async ctx => {\n    const { token } = nextCookie(ctx);\n    const apiUrl = getHost(ctx.req) + '/api/profile';\n\n    const redirectOnError = () =>\n        typeof window !== 'undefined'\n            ? Router.push('/Login')\n            : ctx.res.writeHead(302, { Location: '/Login' }).end();\n\n    try {\n        const response = await fetch(apiUrl, {\n            credentials: 'include',\n            headers: {\n                Authorization: JSON.stringify({ token })\n            }\n        });\n\n        if (response.ok) {\n            const js = await response.json()\n            console.log('js', js);\n            return js\n        } else {\n            // https://github.com/developit/unfetch#caveats\n            return await redirectOnError()\n        }\n    } catch (error) {\n        // Implementation or Network error\n        return redirectOnError()\n    }\n};\n\nexport default withAuthSync(Main);\n\n */\nexport default Main;\n"],"mappings":"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","sourceRoot":""}