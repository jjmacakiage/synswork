{"version":3,"file":"static/webpack/static/development/pages/Login.js.a0e841177db96e421819.hot-update.js","sources":["webpack:///./pages/Login.js","webpack:///./utils/Auth/login.js"],"sourcesContent":["import React, { useState } from 'react'\nimport doLogin  from '../utils/Auth/login';\nimport LoginForm from '../components/login/LoginForm';\nimport {useDispatch} from \"react-redux\";\n\nexport default function Login () {\n    const [userData, setUserData] = useState({ username: '', error: '' , password: '', token: ''});\n    const dispatch = useDispatch();\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        const res = await doLogin({ ...userData });\n        if (res.status === 'success') {\n            const payload = { username: userData.username, password: userData.password, token: res.token };\n            dispatch({ type: 'LOGIN', payload: payload });\n        }\n        else {\n            //setUserData({ ...userData, error: res });\n        }\n    }\n\n\n    return (\n        <div className='login'>\n           <LoginForm\n               onClick={ e =>  handleSubmit(e) }\n               username={ userData.username }\n               changeUsername={ e => { const newUsername = e.target.value;  setUserData({ username: newUsername, error: userData.error, password: userData.password}) } }\n               changePassword={ e => { const newPassword = e.target.value;  setUserData({ username: userData.username, error: userData.error, password: newPassword}) } }\n           />\n        </div>\n    )\n}\n","import fetch from \"../../pages/Login\";\nimport {login} from \"./auth\";\n\nexport default async function doLogin(userData) {\n    const username = userData.username;\n    const url = '../../pages/api/login';\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username })\n        });\n        if (response.status === 200) {\n            const { token } = await response.json();\n            await login({ token });\n            return { token: token, status: 'success' };\n        } else {\n            console.log('Login failed.');\n            // https://github.com/developit/unfetch#caveats\n            let error = new Error(response.statusText);\n            error.response = response;\n            throw error\n        }\n    } catch (error) {\n        console.error(\n            'You have an error in your code or there are Network issues.',\n            error\n        );\n        return error;\n    }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AACA;AAgBA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AAEA;AAAA;AAAA;AACA;;;;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AACA;AALA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAUA;AAVA;AAAA;AAWA;AAAA;AACA;AAZA;AAAA;AAYA;AAAA;AAAA;AACA;AAbA;AAcA;AACA;AACA;AACA;AAjBA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AArBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;A","sourceRoot":""}