{"version":3,"file":"static/webpack/static/development/pages/Main.js.e29a0889eb197284e6f4.hot-update.js","sources":["webpack:///./components/newtrade/NewTradeContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport fetch from 'isomorphic-unfetch';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {Box, Button, Grid, makeStyles, Tabs, Tab, Select, TextField, MenuItem, Divider, Typography} from '@material-ui/core';\nimport {Eclipse} from \"react-loading-io\";\nimport {ErrorMessage, Field, Formik, Form} from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\nimport { TabContainer } from \"../../utils/tradehelpers\";\n\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            {...other}\n        >\n            <Box p={3}>{children}</Box>\n        </Typography>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\n/**\n * @constant useStyles\n * hook used for styling\n */\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    customise: {\n        marginTop: 20\n    }\n}));\n\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeContent\n */\n\nexport default function NewTradeContent(props) {\n    const classes = useStyles();\n    const { fields, counterpartyList, trades_length, schema, validationFunctions } = props;\n    const { IRS } = schema;\n    const [isLoading, changeLoading] = useState(false);\n    const [counterparty, changeCounterparty] = useState('');\n    const dispatch = useDispatch();\n    const [value, setValue] = useState(0);\n\n    const irsSchema = (values) => {\n        const generateSchema = (object, values) => {\n            let keys = Object.keys(object);\n            let valueCount = 0;\n            let result = {};\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                let obj = object[key];\n                if (typeof obj === 'string' || typeof obj === 'number') {\n                    result = { ...result, [key]: values[valueCount]};\n                    valueCount++;\n                }\n                else {\n                    result = { ...result, [key]: generateSchema(obj, values.slice(valueCount, valueCount + Object.keys(object).length))};\n                    valueCount = valueCount + Object.keys(object).length\n                }\n            }\n            return result;\n        };\n        return generateSchema(IRS, values)\n    };\n\n    /**\n     * @function handleSubmit\n     * @param values\n     * takes fields passed in from the form and sends to api\n     */\n    const handleSubmit = async values => {\n        const url = 'http://localhost:4000/api/traders/1/trades';\n        //console.log(values);\n        const data = values; //irsSchema(Object.values(values));\n        try {\n            axios.post(url, {\n                data\n            })\n                .then(function (response) {\n                    if (response.status === 200) {\n                        console.log(response);\n                        dispatch({ type: 'NEW_TRADE', payload: [response.data.data, values] });\n                        return response.data;\n                    } else {\n                        console.log('Trade register failed.', response.status);\n                        let error = new Error(response.statusText);\n                        error.response = response;\n                        throw error\n                    }\n                });\n        } catch (error) {\n            console.error(\n                'You have an error in your code or there are Network issues.',\n                error\n            );\n            return error;\n        }\n    };\n\n    /**\n     * @function tabChange\n     * @param e\n     * @param newValue\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n    function tabChange(e, newValue) {\n        setValue(newValue);\n    }\n\n    function generateInitial(array, values) {\n        let result = {};\n        for (let i = 0; i < array.length; i++) {\n            result = {...result, [array[i][0]]: values[i]};\n        }\n        return result;\n    }\n    function handleCounterpartyChange(e) {\n        changeCounterparty(e.target.value);\n    }\n    function createFormColumns(array) {\n        return (\n            <>\n            {\n                array.map((value, index) => {\n                    if (value[1] !== 'select') {\n                        return (\n                            <Grid item xs={ 4 }>\n                                <Field name={value[0]}\n                                       key={value[0]}\n                                       type={ value[1] }\n                                       render={({ field, form: { isSubmitting } }) => (\n                                           <TextField {...field} label={ (value[1] === 'date') ? '' : value[0]}\n                                                      disabled={counterparty === '' || isSubmitting}\n                                                      variant=\"outlined\" type={ value[1]}\n                                                      helperText={ (value[1] === 'date') ? value[0] : ''}\n                                           />\n                                       )}\n                                />\n                                <ErrorMessage name={value[0]} component=\"div\"/>\n                            </Grid>\n                        );\n                    }\n                    else {\n                        return (\n                            <Grid item xs={ 4 }>\n                                <Field name={value[0]}\n                                       key={value[0]}\n                                       render= {\n                                           ({ field, form: { isSubmitting } }) => {\n                                               return (\n                                                   <TextField\n                                                       select\n                                                       disabled={counterparty === '' || isSubmitting}\n                                                       variant=\"outlined\"\n                                                       style={{ width: '100%' }}\n                                                       SelectProps={{\n                                                           native: true,\n                                                       }}\n                                                       { ...field}\n                                                   >\n                                                       <option disabled> { value[0] } </option>\n                                                       {\n                                                           value[3].map(option => {\n                                                               return (\n                                                                   <option key={option} value={option}>\n                                                                       {option}\n                                                                   </option>\n                                                               )\n                                                           })\n                                                       }\n                                                   </TextField>\n                                               );\n                                           }\n                                       }\n                                />\n                                    <ErrorMessage name={value[0]} component=\"div\"/>\n                            </Grid>\n                        )\n                    }\n                })\n            }\n            </>\n        )\n    }\n    function extendedFields() {\n        const extended = fields.filter((field) => {\n            return field[2] === '1';\n        });\n        const returnExtended = i => {\n            return extended[i];\n        };\n        return (\n            <Grid container spacing={ 2 }>\n                {\n                    [[0], [1,2,3], [4], [5,6], [7,8,9], [10,11,12], [13,14,15], [16,17], [18,19,20], [21,22,23]].map((value, index) => {\n                        const temp = [];\n                        for (let i = 0; i < value.length; i++) {\n                            temp.push(returnExtended(value[i]));\n                        }\n                        return (\n                            <Grid item xs={ 12 } key={ value + index}>\n                                { (index === 2 || index === 7) ?\n                                    (\n                                        <div style={{ marginTop: 20, marginBottom: 20 }}>\n                                            <Typography variant=\"overline\" style={{ marginBottom: 20 }}>\n                                                {index === 2 ? \"Floating Leg\" : \"Fixed Leg\"}\n                                            </Typography>\n                                            <Divider dark />\n                                        </div>\n                                    )\n                                    : null\n                                }\n                                <Grid container spacing={ 2 }>\n                                    { createFormColumns(temp) }\n                                </Grid>\n                            </Grid>\n                        )\n                    })\n                }\n            </Grid>\n        );\n    }\n\n\n    /**\n     * @return\n     * @type Grid\n     * @type TabContainer\n     * @type div\n     */\n    return (\n        <div className={ classes.root }>\n            <div>\n                <Typography variant=\"overline\" style={{ marginBottom: 20 }}> { (counterparty === '') ? 'New Trade' : counterparty }</Typography>\n                <Tabs value={value} onChange={tabChange} centered >\n                    <Tab label=\"Main\" {...a11yProps(0)} />\n                    <Tab label=\"Details\" {...a11yProps(1)} />\n                </Tabs>\n                <LoadingOverlay\n                    active={ isLoading }\n                    spinner={ <Eclipse />}\n                    styles={{\n                        overlay: (base) => ({\n                            ...base,\n                            background: 'rgba(255, 255, 255, 0.1)'\n                        })\n                    }}\n                >\n                    <Formik\n                        initialValues={ generateInitial(fields, new Array(fields.length).fill('')) }\n                        enableReinitialize={ true }\n                        onSubmit={(values, actions) => {\n                            console.log(irsSchema(Object.values(values)));\n                            handleSubmit(IRS, values);\n                            actions.setSubmitting(false)\n                        }}\n                        validateOnBlur={ true }\n                        render={({ errors, status, touched, isSubmitting, isValidating }) => (\n                            <Form>\n                                <TabPanel value={value} index={0}>\n                                    <TextField\n                                        select\n                                        label=\"Select Counterparty\"\n                                        disabled={isSubmitting}\n                                        variant=\"outlined\" type={ value[1] }\n                                        value={ counterparty }\n                                        onChange={ e => handleCounterpartyChange(e) }\n                                        style={{ width: '100%', marginBottom: 20 }}\n                                    >\n                                        { counterpartyList.map((value, index) => {\n                                            return (\n                                                <MenuItem key={ value + index } value={ value }>\n                                                    {value}\n                                                </MenuItem>\n                                            );\n                                        })}\n                                    </TextField>\n                                    <Grid container spacing={ 2 }>\n                                        {\n                                            fields.map((field, index) => {\n                                                if (field[2] === '0') {\n                                                    return (\n                                                        <Grid item xs={ 6 } style={{ marginTop: 2, marginBottom: 2 }} key={ field + index}>\n                                                            {createFormColumns([field])}\n                                                        </Grid>\n                                                    )\n                                                }\n                                            })\n                                        }\n                                    </Grid>\n                                </TabPanel>\n                                <TabPanel index={1} value={value}>\n                                    { extendedFields() }\n                                    <Button\n                                        variant=\"contained\"\n                                        type=\"submit\"\n                                        disabled={ isValidating || isSubmitting || counterparty === ''}\n                                        style={{ marginTop: 20 }}\n                                    >\n                                        Submit\n                                    </Button>\n                                </TabPanel>\n                            </Form>\n                        )}\n                    />\n                </LoadingOverlay>\n            </div>\n        </div>\n    );\n}\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;;;;AAIA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AAAA;AAUA;;;;;;;;;AASA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AArBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA6BA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAHA;AADA;AAHA;AAWA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AALA;AAUA;AAAA;AAGA;AACA;AAAA;AAAA;AAIA;AAIA;AA3BA;AA8BA;AAAA;AAAA;AAGA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAKA;AAAA;AAAA;AAKA;AAIA;AAGA;;;;;;;;AAMA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AADA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAPA;AAUA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AApCA;AATA;AA6DA;;;;A","sourceRoot":""}