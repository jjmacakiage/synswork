{"version":3,"file":"static/webpack/static/development/pages/Main.js.bdc8580afd47b4df9b6c.hot-update.js","sources":["webpack:///./components/TableTwo.js","webpack:///./pages/Blotter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\n\nimport {\n    AddBox, ArrowUpward,\n    Check, ChevronLeft,\n    ChevronRight, Clear,\n    DeleteOutline, Edit,\n    FilterList, FirstPage,\n    LastPage, Remove,\n    SaveAlt, Search,\n    ViewColumn\n} from \"@material-ui/icons\";\n\nconst TableTwo = props => {\n    const { data } = props;\n    const columns = (!data.rows) ? pullStuff(data[0], 'keys') : data.columns;\n\n    const tableIcons = {\n        Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n        Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n        Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n        DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n        Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n        Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n        FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n        LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n        NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n        ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n        SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n        ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n        ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n    };\n\n    function formatColumns(columns) {\n        if (columns.length === 0 || columns[0].width) {\n            return columns;\n        }\n        let result = [];\n        let width = 1800 / columns.length;\n        for (let i = 0; i < columns.length; i++) {\n            const column = columns[i];\n            const object = {\n                title: column,\n                field: column,\n            };\n            result.push(object);\n        }\n        return result;\n    }\n    function formatRows(rows) {\n        let result = [];\n        for (let i = 0; i < rows.length; i++) {\n            let row = rows[i];\n            let temp = pullStuff(row, 'values');\n            let temp2 = generateObj(columns, temp);\n            result.push(temp2);\n        }\n        return result;\n    }\n    function generateObj(array, values) {\n        let result = {};\n        for (let i = 0; i < array.length; i++) {\n            result = {...result, [array[i]]: values[i]};\n        }\n        return result;\n    }\n    function pullStuff(obj, param) {\n        const getKeys = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            const topKeys = Object.keys(obj);\n            for (let i = 0; i < topKeys.length; i++) {\n                let topKey = topKeys[i];\n                let topEntry = obj[topKey];\n                if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n                    result.push(topKey);\n                }\n                else if (Array.isArray(topEntry)) {\n                    let arrayEntry;\n                    for (arrayEntry in topEntry) {\n                        result.push(getKeys(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getKeys(topEntry))\n                }\n            }\n            return result.flat(Infinity);\n        };\n\n        const getValues = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            let topValues = Object.values(obj);\n            for (let i = 0; i < topValues.length; i++) {\n                let topValue = topValues[i];\n                if (typeof topValue === 'string' || typeof topValue === 'number') {\n                    result.push(topValue);\n                }\n                else if (Array.isArray(topValue)) {\n                    let arrayEntry;\n                    for (arrayEntry in topValue) {\n                        result.push(getValues(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getValues(topValue))\n                }\n            }\n            return result.flat(Infinity);\n        };\n        switch (param) {\n            case 'keys':\n                return getKeys(obj, false);\n            case 'values':\n                return getValues(obj, false);\n            default:\n                return;\n        }\n    }\n\n    return (\n        <MaterialTable\n            columns={ formatColumns(columns) }\n            icons={ tableIcons }\n            data={ formatRows(data) }\n            options={{\n                filtering: true,\n                exportButton: true\n            }}\n        />\n    )\n};\n\nexport default TableTwo;\n\n","import React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Button, Grid } from '@material-ui/core';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport DataTable from '../components/DataTable';\nimport Table from \"../components/Table\";\nimport TableTwo from \"../components/TableTwo\";\n\n\nexport default function Blotter() {\n    const [data, setData] = useState({});\n    const trades = useSelector(state => state.TradeReducer.trades);\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        setData(trades);\n    }, [trades]);\n\n    function exportToCSV() {\n        let csv = '';\n        for (let i = 0; i < data.columns.length; i++) {\n            csv += data.columns[i] + ',';\n        }\n        csv += '\\n';\n        for (let i = 0; i < data.rows.length; i++) {\n            let row = data.rows[i];\n            csv += row.join(',');\n            csv += \"\\n\";\n        };\n\n        let hiddenElement = document.createElement('a');\n        hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\n        hiddenElement.target = '_blank';\n        let date = new Date();\n        let month = date.getUTCMonth();\n        let day = date.getUTCDate();\n        let year = date.getUTCFullYear();\n        let name = year + '-' + month + '-' + day;\n        hiddenElement.download = name + '.csv';\n        hiddenElement.click();\n    }\n\n    return (\n      <div>\n          <Grid container spacing={ 2 }>\n              {\n                  /*\n                  <Grid item xs={ 12 }>\n                      <Button color=\"primary\" onClick={ exportToCSV.bind(this) }>\n                          Export to CSV\n                      </Button>\n                  </Grid>\n                   */\n              }\n              {\n                  /*\n                  <Grid item xs={12}>\n                      <DataTable data={data}/>\n                  </Grid>\n                   */\n              }\n              { /*\n                  <Grid item xs={ 12 } style={{ padding: 50 }}>\n                        <Table data={ data } />\n                </Grid>\n                */\n              }\n              { /*\n                  <Grid item xs={ 12 } style={{ padding: 50 }}>\n                        <Table data={ data } />\n                </Grid>\n                */\n              }\n              {\n                  <Grid item xs={ 12 } style={{ padding: 50 }}>\n                        <TableTwo data={ data } />\n                  </Grid>\n              }\n          </Grid>\n\n      </div>\n    );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAUA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AA8BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAOA;;;;A","sourceRoot":""}