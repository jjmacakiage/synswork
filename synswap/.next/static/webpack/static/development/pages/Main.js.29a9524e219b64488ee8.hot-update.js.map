{"version":3,"file":"static/webpack/static/development/pages/Main.js.29a9524e219b64488ee8.hot-update.js","sources":["webpack:///./components/Table.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { MultiGrid, AutoSizer } from 'react-virtualized';\nimport { Paper, Typography } from '@material-ui/core';\n\nexport default function Table(props) {\n    function pullStuff(obj, param) {\n        const getKeys = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            const topKeys = Object.keys(obj);\n            for (let i = 0; i < topKeys.length; i++) {\n                let topKey = topKeys[i];\n                let topEntry = obj[topKey];\n                if (typeof topEntry === 'string' || typeof topEntry === 'number') {\n                    result.push(topKey);\n                }\n                else if (Array.isArray(topEntry)) {\n                    let arrayEntry;\n                    for (arrayEntry in topEntry) {\n                        result.push(getKeys(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getKeys(topEntry))\n                }\n            }\n            return result.flat(Infinity);\n        };\n\n        const getValues = obj => {\n            if (typeof obj !== 'object') {\n                throw new Error('Invalid JSON');\n            }\n            let result = [];\n            let topValues = Object.values(obj);\n            for (let i = 0; i < topValues.length; i++) {\n                let topValue = topValues[i];\n                if (typeof topValue === 'string' || typeof topValue === 'number') {\n                    result.push(topValue);\n                }\n                else if (Array.isArray(topValue)) {\n                    let arrayEntry;\n                    for (arrayEntry in topValue) {\n                        result.push(getValues(arrayEntry, true));\n                    }\n                }\n                else {\n                    result.push(getValues(topValue))\n                }\n            }\n            return result.flat(Infinity);\n        };\n        switch (param) {\n            case 'keys':\n                return getKeys(obj, false);\n            case 'values':\n                return getValues(obj, false);\n            default:\n                return;\n        }\n    }\n\n    const formatData = data => {\n        const columns = pullStuff(data[0], 'keys');\n        const result = [];\n        result.push(columns);\n        for (let i = 0; i < data.length; i++) {\n            result.push(pullStuff(data[i], 'values'))\n        }\n        return result;\n    };\n\n    const data = formatData(props.data);\n    console.log(data);\n\n    const cellRenderer = ({ columnIndex, key, rowIndex, style }) => {\n        return (\n            <Paper\n                key={ key }\n                style={ {...style, padding: 5, minWidth: \"min-content\" } }\n                square\n            >\n                <Typography variant=\"overline\"> { data[rowIndex][columnIndex] } </Typography>\n            </Paper>\n        )\n    }\n    return (\n        <MultiGrid\n            cellRenderer={cellRenderer}\n            columnCount={data[0].length}\n            columnWidth={ 4000 / data[0].length }\n            fixedColumnCount={ 0 }\n            fixedRowCount={ 1 }\n            height={ 600 }\n            rowCount={data.length}\n            rowHeight={30}\n            width={ 1200 }\n            style={{ marginLeft: 20 }}\n        />\n\n    )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAVA;AAcA;;;;A","sourceRoot":""}