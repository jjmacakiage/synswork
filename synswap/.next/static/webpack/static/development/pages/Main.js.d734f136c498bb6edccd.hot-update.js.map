{"version":3,"file":"static/webpack/static/development/pages/Main.js.d734f136c498bb6edccd.hot-update.js","sources":["webpack:///./pages/Main.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport Tabs, {Tab} from \"react-awesome-tabs\";\nimport \"../resources/styles/react-awesome-tabs.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Router from 'next/router'\nimport fetch from 'isomorphic-unfetch'\nimport nextCookie from 'next-cookies'\n\n\nimport Header from \"../components/main/Header\";\nimport Home from './Home';\nimport NewTrade from './NewTrade';\nimport Trade from './Trade';\nimport Blotter from './Blotter';\nimport {error} from \"next/dist/build/output/log\";\nimport { withAuthSync } from \"../utils/Auth/auth\";\nimport getHost from '../utils/Auth/get-host'\n\n/**\n * @class Main\n * @constructor\n * Contains all the navigation functions, including the <Tabs /> and their functions (dispatched to reducers/TabReducer)\n * Dependencies used:\n * @react-awesome-tabs for the <Tabs> and <Tab> components, react-awesome-tabs.scss for styling (comes with module)\n * @material-ui for <Grid />\n * @react-redux for useDispatch and useSelector\n * Custom Components used:\n * @class NewTrade - New Trade page\n * @class Home - Home page\n * @class Trade - Trade page\n * @class Header - Header\n */\nconst Main = () => {\n    /**\n     * @constant activeTab\n     * @type {object}\n     * a number that represents the activeTab piece of state\n     */\n    const activeTab = useSelector(state => state.TabReducer.activeTab);\n\n    /**\n     * @var tabs\n     * @type {object}\n     * an array of objects representing the tabs, with each object in the format { title, index, component }\n     */\n    const tabs = useSelector(state => state.TabReducer.tabs);\n\n    /**\n     * @constant dispatch\n     * @type {function}\n     * gives access to dispatch function from Redux store\n     */\n    const dispatch = useDispatch();\n\n    /**\n     * @constant tradeProps\n     * receives data from addNewTrade function and updates the most recent TradeProps\n     */\n    const [tradeProps, changeProps] = useState({ data: { columns: [], rows: [] }});\n\n    /**\n     * @constant showTextField\n     * receives data from handleClick function and toggles the Trade ID popup\n     */\n\n    const [showTradeSearch, toggleShow] = useState(false);\n    /**\n     * @constant MAIN_TABS\n     * @type {array}\n     * array of objects that contains a 'key' and a 'component' that is mapped to the 'component' attribute from a tab object in\n     * @function matchLink\n     */\n    const MAIN_TABS = [\n        { key: 'Home', component: <Home onClick={ handleClick.bind(this) } showTextField={ showTradeSearch }/>},\n        { key: 'NewTrade', component: <NewTrade addNewTrade={ addNewTrade } />},\n        { key: 'Trade', component: Trade(tradeProps)},\n        { key: 'Blotter', component: <Blotter />}\n    ];\n\n    /**\n     * @function matchLink\n     * @type string\n     * @param link\n     * helper function that receives a link {string} from an option in the <HomePane />'s (child components of <Home />) and\n     * matches it to a 'component' in the MAIN_TABS array via the 'key'\n     */\n    function matchLink(link) {\n        for (let i = 0; i < MAIN_TABS.length; i++) {\n            const data = MAIN_TABS[i];\n            if (link === data.key) {\n                return i;\n            }\n        }\n        return new error('Component Not Found');\n    }\n\n\n    /**\n     * @function handleTabSwitch\n     * @type dispatch\n     * @param active\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n    function handleTabSwitch(active) {\n        dispatch({ type: 'SWITCH_TAB', payload: active});\n    }\n\n    /**\n     * @function handleTabPositionChange\n     * @type dispatch\n     * @param a\n     * @param b\n     * eventHandler helper function that takes the two tabs to be switched around, switches their indices,...\n     * ...and changes the new active tab\n     */\n    function handleTabPositionChange(a, b) {\n        let c = tabs[a];\n        tabs[a] = tabs[b];\n        tabs[b] = c;\n\n        if(activeTab === a) {\n            dispatch({ type: 'SWITCH_TAB', activeTab: b });\n        }else if(activeTab === b) {\n            dispatch({ type: 'SWITCH_TAB', activeTab: a });\n        }\n\n    }\n\n    /**\n     * @function handleTabClose\n     * @type dispatch\n     * @param index\n     * eventHandler helper function that takes the closed tab and pops it from 'tabs' piece of state\n     */\n    function handleTabClose(index) {\n        dispatch({ type: 'REMOVE_TAB', payload: index });\n    }\n\n\n    /**\n     * @function handleClick\n     * @param link\n     * eventHandler helper function that takes the link as a param and returns a component number from matchLink()...\n     * ...then dispatches a new tab object containing a title, index, and component keys to be appended to 'tabs'...\n     * ...piece of state\n     */\n\n    function handleClick(link) {\n        if (link !== 'TradeSearch') {\n            let component = matchLink(link);\n            const newTabContent = {\n                title: link,\n                index: tabs.length,\n                component: component\n            };\n            dispatch({type: 'ADD_TAB', payload: newTabContent});\n        }\n        else {\n            toggleShow(true);\n        }\n    }\n\n    function addNewTrade(name, fields, values) {\n        console.log([values]);\n        const newTradeContent = {\n            title: name,\n            index: tabs.length,\n            component: matchLink('Trade'),\n            fields: fields,\n            values: values\n        };\n        dispatch({ type: 'ADD_TAB', payload: newTradeContent });\n        changeProps({ data: { columns: fields, rows: values } })\n    }\n    /**\n     * @return\n     * @type Grid\n     * @type Header\n     * @type Tabs\n     * @type Tab\n     * @type MAIN_TABS[component]\n     */\n\n    return (\n        <Grid container spacing={ 0 }>\n            <Grid item xs={ 12 }>\n                <Header />\n            </Grid>\n            <Grid item xs={ 12 }>\n                <Tabs\n                    active={ activeTab }\n                    onTabSwitch={ handleTabSwitch.bind(this) }\n                    onTabPositionChange={ handleTabPositionChange.bind(this) }\n                    onTabClose={ handleTabClose.bind(this) }\n                    draggable={ true }\n                    showAdd={ false }\n                >\n                    {\n                        //maps 'tabs' piece of state to a <Tab> component, changes when 'tabs' changes\n                        tabs.map((value, index) => {\n                            return (\n                                <Tab\n                                    key={ value.title + index }\n                                    title={ value.title }\n                                    showClose={ index !== 0 }\n                                >\n                                    { MAIN_TABS[ value.component ].component }\n                                </Tab>\n                            );\n                        })\n                    }\n                </Tabs>\n            </Grid>\n        </Grid>\n    );\n}\n\nMain.getInitialProps = async ctx => {\n    const { token } = nextCookie(ctx);\n    const apiUrl = getHost(ctx.req) + '/api/profile';\n\n    const redirectOnError = () =>\n        typeof window !== 'undefined'\n            ? Router.push('/Login')\n            : ctx.res.writeHead(302, { Location: '/Login' }).end();\n\n    try {\n        const response = await fetch(apiUrl, {\n            credentials: 'include',\n            headers: {\n                Authorization: JSON.stringify({ token })\n            }\n        })\n\n        if (response.ok) {\n            const js = await response.json()\n            console.log('js', js)\n            return js\n        } else {\n            // https://github.com/developit/unfetch#caveats\n            return await redirectOnError()\n        }\n    } catch (error) {\n        // Implementation or Network error\n        return redirectOnError()\n    }\n}\n\nexport default withAuthSync(Main);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAcA;AACA;;;;;AAKA;AAAA;AAAA;AAEA;;;;;;AAKA;AAAA;AAAA;AAEA;;;;;;AAKA;AAEA;;;;;AAtBA;AA0BA;AAAA;AAAA;AAAA;AAAA;AA1BA;AAAA;AAAA;AA4BA;;;;;;AA5BA;AAAA;AAAA;AAAA;AAkCA;;;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;;;;;;;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;;;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;AASA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA,0GAGA;AAHA;AACA;AALA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AAAA;AADA;AAFA;AACA;AAXA;AAUA;AACA;AAXA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAkBA;AACA;AAnBA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA8BA;;;;A","sourceRoot":""}