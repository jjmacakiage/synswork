{"version":3,"file":"static/webpack/static/development/pages/Main.js.9f2a40c84a9ea13a4bdc.hot-update.js","sources":["webpack:///./components/newtrade/NewTradeContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {Grid, makeStyles, Tabs, Tab, Select, TextField, InputLabel, Divider} from '@material-ui/core';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport NewTradeForm from './NewTradeForm';\nimport CustomiseFields from './CustomiseFields';\nimport { TabContainer } from \"../../utils/tradehelpers\";\nimport {Ball} from \"react-loading-io\";\nimport {ErrorMessage, Field, Formik, Form} from \"formik\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\n/**\n * @constant useStyles\n * hook used for styling\n */\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    customise: {\n        marginTop: 20\n    }\n}));\n\n/**\n * @class NewTradeContent\n * Contains the forms for creating a NewTrade\n * Dependencies used:\n * @material-ui for Grid, makeStyles, Tabs, Tab, Typography\n * Custom Components used:\n * @class NewTradeForm\n * @class CustomiseFields\n */\n\nexport default function NewTradeContent(props) {\n    const classes = useStyles();\n    const { fields, counterpartyList, trades_length } = props;\n    const [isLoading, changeLoading] = useState(false);\n    const [counterparty, changeCounterparty] = useState('');\n    const dispatch = useDispatch();\n    const [value, setValue] = useState(0);\n\n\n    /**\n     * @function handleSubmit\n     * @param result\n     * takes fields passed in from NewTradeForm and appends to 'tradeStates' piece of state\n     */\n    function handleSubmit(result) {\n        const nameRemoved = result.filter((value, index) => {\n            return index !== result.length - 1;\n        });\n        const payload = { id: trades_length, value: nameRemoved };\n        dispatch({ type: 'NEW_TRADE', payload: payload });\n    }\n\n\n    /**\n     * @function addFields\n     * @param addFields\n     * takes the custom fields created in CustomiseFields component and appends to NEW_TRADE_FIELDS piece of state\n     */\n    function addFields(addFields) {\n        dispatch({ type: 'APPEND_FIELDS', payload: addFields });\n    }\n\n    /**\n     * @function tabChange\n     * @param e\n     * @param newValue\n     * eventHandler helper function that takes the desired tab as a parameter and makes it the new active tab\n     */\n\n    function tabChange(e, newValue) {\n        setValue(newValue);\n    }\n\n    /**\n     * @return\n     * @type Grid\n     * @type TabContainer\n     * @type Tab\n     * @type Tabs\n     * @type NewTradeForm\n     * @type CustomiseFields\n     */\n\n    function handleCounterpartyChange(e) {\n        changeCounterparty(e.target.value);\n    }\n    function createFormColumns(array) {\n        return (\n            <div className=\"col\">\n                <div className=\"row\">\n                    {\n                        [array].map(field => {\n                            if (field[2] !== 'select') {\n                                return (\n                                    <div>\n                                        <Field name={field[0]}\n                                               key={field[0]}\n                                               render={() => (\n                                                   <TextField label={field[0]}\n                                                              disabled={counterparty === ''}\n                                                              variant=\"outlined\" type={ field[2] }\n                                                   />\n                                               )}\n                                        />\n                                        <ErrorMessage name={field[0]} />\n                                    </div>\n\n                                );\n                            }\n                            else {\n                                return (\n                                    <Field name={field[0]}\n                                           key={field[0]}\n                                           render={() => (\n                                               <div>\n                                                   <InputLabel\n                                                       htmlFor={field[0]}> {field[0]} </InputLabel>\n                                                   <Select name={field[0]}>\n                                                       <option value=\"DEFAULT\"> Default</option>\n                                                   </Select>\n                                                   <ErrorMessage name={field[0]}/>\n                                               </div>\n                                           )}\n                                    />\n                                )\n                            }\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className={ classes.root }>\n            <div>\n                <LoadingOverlay\n                    active={ false }\n                    spinner={ <Ball />}\n                    styles={{\n                        overlay: (base) => ({\n                            ...base,\n                            background: 'rgba(255, 255, 255, 0.1)'\n                        })\n                    }}\n                >\n                    <Formik\n                        initialValues={ [] }\n                        onSubmit={ (values, actions)=> {\n                            changeLoading(true);\n                            setTimeout(() => {\n                                changeLoading(false);\n                            }, 2000);\n                            console.log(values);\n                            actions.setSubmitting(false);\n                        }}\n                        enableReinitialize={ true }\n                        /*onSubmit={(values, actions) => {\n                            MyImaginaryRestApiCall(user.id, values).then(\n                                updatedUser => {\n                                    actions.setSubmitting(false);\n                                    updateUser(updatedUser);\n                                    onClose();\n                                },\n                                error => {\n                                    actions.setSubmitting(false);\n                                    actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n                                    actions.setStatus({ msg: 'Set some arbitrary status or data' });\n                                }\n                            );\n                        }}\n                        */\n                        validateOnBlur={ true }\n                    >\n                        {({ errors, touched, isValidating, isSubmitting }) => (\n                            <Form>\n                                <Tabs\n                                    value={ value }\n                                    onChange={ tabChange }\n                                    indicatorColor=\"primary\"\n                                    textColor=\"primary\"\n                                    centered\n                                >\n                                    <Tab label=\"Edit\" />\n                                    <Tab label=\"Autofill\" />\n                                </Tabs>\n                                <button type=\"submit\" disabled={ isValidating || isSubmitting }> Submit </button>\n                            </Form>\n                        )}\n                    </Formik>\n\n\n\n                {\n                    value === 0 &&\n                    <TabContainer>\n                        <Grid container spacing={ 2 }>\n                            <Grid item xs={ 6 }>\n                                <Select value={ counterparty } onChange={ e => handleCounterpartyChange(e) } >\n                                    <option value=\"\"> Select Counterparty </option>\n                                    { counterpartyList.map((value, index) => {\n                                        return (\n                                            <option key={ value + index } value={ value }>\n                                                {value}\n                                            </option>\n                                        );\n                                    })}\n                                </Select>\n                                {\n                                    fields.map((field, index) => {\n                                        if (field[2] === 0) {\n                                            return (\n                                                createFormColumns([field])\n                                            )\n                                        }\n                                    })\n                                }\n                            </Grid>\n                        </Grid>\n                    </TabContainer>\n                }\n\n                {\n                    value === 1\n                    &&\n                    <TabContainer>\n                        <Grid container spacing={ 2 }>\n                            <Grid item xs={ 6 }>\n                                {\n                                    () => {\n                                        const extended = fields.filter((field) => {\n                                            return field[2] === 1;\n                                        });\n                                        return (\n                                            <div className=\"secondary\">\n                                                { createFormColumns([extended[0]])}\n                                                { createFormColumns([extended[1], extended[2], extended[3]])}\n                                                <Divider dark={ true } />\n                                                { createFormColumns([extended[4]])}\n                                                { createFormColumns([extended[5], extended[6]])}\n                                                { createFormColumns([extended[7], extended[8], extended[9]])}\n                                                { createFormColumns([extended[10], extended[11], extended[12]])}\n                                                { createFormColumns([extended[13], extended[14], extended[15]])}\n                                                <Divider dark={ true } />\n                                                { createFormColumns([extended[16], extended[17]])}\n                                                { createFormColumns([extended[18], extended[19], extended[20]])}\n                                                { createFormColumns([extended[21], extended[22], extended[23]])}\n                                            </div>\n                                        )\n                                    }\n                                }\n                            </Grid>\n                        </Grid>\n                    </TabContainer>\n                }\n                </LoadingOverlay>\n            </div>\n        </div>\n    );\n}\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAIA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AAAA;AAUA;;;;;;;;;;AAUA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AAAA;AAAA;AASA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;AAOA;AACA;AACA;AAEA;;;;;;;;;;;AAUA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAFA;AADA;AAFA;AASA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AADA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAPA;AAFA;AAcA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AADA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAXA;AA0BA;AA1BA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAZA;AAsBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAIA;AACA;AAGA;AACA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAMA;AAAA;AAMA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}